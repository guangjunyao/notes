#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: emacs
#+DATE: <2017-04-22 Sat>
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+STARTUP: latexpreview
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../configOrg/level1.org

=C-h t=
tutorial
* Create GitHub Pages:
GitHub Pages is easy for websites for you and your projects. GitHub Pages is hosted directly from your GitHub repository.Just edit, push, and your changes are live.
Tutorial of how to create studying notes pages hosted on GitHub Pages.

** Create a repository
Head over to Github and create a new repository named username.github.io, where username is your username on Github.

** Clone the repository
Go to the folder where you want to store your project, and clone the new repository:
#+BEGIN_SRC sh
git clone https://github.com/username/username.github.io
#+END_SRC

** Create folder structure
#+BEGIN_EXAMPLE
[[repository name]]
├── css/
├── img/
├── index.org
├── docs/
├── CS
└── sitemap.org
#+END_EXAMPLE

** Add lines in spacemacs configuration file to publish the org project

#+BEGIN_SRC elisp
(require 'ox-publish)
(setq org-publish-project-alist
'(
("org-notes"
 :base-directory "~/repository_folder/"
 :base-extension "org"
 :publishing-directory "~/repository_folder/docs/"
 :recursive t
 :publishing-function org-html-publish-to-html
 :headline-levels 4             ; Just the default for this project.
 :auto-preamble t
 )
("org-static"
 :base-directory "~/repository_folder/"
 :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
 :publishing-directory "~/repository_folder/docs/"
 :recursive t
 :publishing-function org-publish-attachment
 )
))
#+END_SRC

** Publish personal html files
- copy html and attachment folders under the main folder.
- insert the link in the sitemap org file.
- publish all.
- copy html and attachment folder under the docs folder.

** Attach markdown files in the org file.

** Publish ipython file directly.

** Insert file links in sitemap.org
#+begin_src emacs-lisp :tangle yes
[[file:remember.org][remember]]
#+end_src

** The export options template
*** Insert basic information using C-c C-e # default
#+begin_src emacs-lisp :tangle yes
#+TITLE: filename with the extension omitted
#+DATE: <2013-06-04 Tue>
#+AUTHOR: Your name
#+EMAIL: Your email address
#+OPTIONS: ':t *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:comment d:(not LOGBOOK) date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil stat:t tags:t tasks:t tex:t timestamp:t toc:t
#+OPTIONS: todo:t |:t
#+CREATOR: Emacs 24.3.50.3 (Org mode 8.0.3)
#+DESCRIPTION:
#+EXCLUDE_TAGS: noexport
#+KEYWORDS:
#+LANGUAGE: en
#+SELECT_TAGS: export
#+end_src
*** Add export templates configuration files
Create the following files under the org-configuration directory
**** level-0.org
:#+STYLE: <link rel="stylesheet" type="text/css" href="stylesheet.css" />
**** level-1.org
:#+STYLE: <link rel="stylesheet" type="text/css" href="../stylesheet.css" />
* Basic operations in Emacs
** special syntax
Insert file link:
Press [[, file: file link, ], backspace, [, [alias, ], ].
** insert table box
| name1 | name2 |
|-------+-------|
| row1  | value |
|       |       |
#+BEGIN_SRC sh
| name 1 | name 2|,
|- tab,
enter,
|
#+END_SRC

- Initial visibility
Show all shortcut: C-u C-u <TAB>, shirt+<TAB>

Or change the start-up configuration.
#+begin_src emacs-lisp :tangle yes
     #+STARTUP: overview
     #+STARTUP: content
     #+STARTUP: showall
     #+STARTUP: showeverything
#+end_src

** shortcut :
*获取帮助*
-  =C-h k= 寻找快捷键的帮助信息: after the command enter the key combination.
-  =C-h v= 寻找变量的帮助信息
-  =C-h f= 寻找函数的帮助信息
-  =C-l= move the current cursor to the center of the screen.

- <s, press tab to get the src box.

- define keyboard macro.
=C-x (= or =<f3>= start defining a keyboard macro

=C-x )= or =<f4>= stop defining the keyboard macro

And here is how to execute a keyboard macro you’ve defined:

=C-x e= or =f4= – execute the keyboard macro

Here’s how to execute the macro 37 times (you use ‘C-u’ to provide the 37):

=C-u 37 C-x e=

- open a python buffer:
=C-c C-p=

- open clipboard list:
=C-;=

- project file view:
=M-m p h=

- kill project buffer:
=M-m k=

| 命令 |	说明|
|M-a|	定位到一行的开头|
|M-e|	定位到一行的结尾|
|M-f|	向前移动一个单词|
|M-b|	向后移动一个单词|
|C-M-a |	定位到函数头部 |
|C-M-a	|定位到函数结尾|
|C-M-h|	选中整个函数|

- indent a block by number of space
=C-u 4 C-x TAB=
=C-M-\=

* ORG Mode
[[http://ehneilsen.net/notebook/orgExamples/org-examples.html#sec-4][Example]]
** Structure editing
M-<RET>     (org-insert-heading)
Insert a new heading/item with the same level as the one at point.
If the command is used at the beginning of a line, and if there is a heading or a plain list item (see Plain lists) at point, the new heading/item is created before the current line. When used at the beginning of a regular line of text, turn that line into a heading.

When this command is used in the middle of a line, the line is split and the rest of the line becomes the new item or headline. If you do not want the line to be split, customize org-M-RET-may-split-line.

Calling the command with a C-u prefix unconditionally inserts a new heading at the end of the current subtree, thus preserving its contents. With a double C-u C-u prefix, the new heading is created at the end of the parent subtree instead.

C-<RET>     (org-insert-heading-respect-content)
Insert a new heading at the end of the current subtree.
M-S-<RET>     (org-insert-todo-heading)
Insert new TODO entry with same level as current heading. See also the variable org-treat-insert-todo-heading-as-state-change.
C-S-<RET>     (org-insert-todo-heading-respect-content)
Insert new TODO entry with same level as current heading. Like C-<RET>, the new headline will be inserted after the current subtree.
<TAB>     (org-cycle)
In a new entry with no text yet, the first <TAB> demotes the entry to become a child of the previous one. The next <TAB> makes it a parent, and so on, all the way to top level. Yet another <TAB>, and you are back to the initial level.
M-<left>     (org-do-promote)
Promote current heading by one level.
M-<right>     (org-do-demote)
Demote current heading by one level.
M-S-<left>     (org-promote-subtree)
Promote the current subtree by one level.
M-S-<right>     (org-demote-subtree)
Demote the current subtree by one level.
M-S-<up>     (org-move-subtree-up)
Move subtree up (swap with previous subtree of same level).
M-S-<down>     (org-move-subtree-down)
Move subtree down (swap with next subtree of same level).
M-h     (org-mark-element)
Mark the element at point. Hitting repeatedly will mark subsequent elements of the one just marked. E.g., hitting <M-h> on a paragraph will mark it, hitting <M-h> immediately again will mark the next one.
C-c @     (org-mark-subtree)
Mark the subtree at point. Hitting repeatedly will mark subsequent subtrees of the same level than the marked subtree.
C-c C-x C-w     (org-cut-subtree)
Kill subtree, i.e., remove it from buffer but save in kill ring. With a numeric prefix argument N, kill N sequential subtrees.
C-c C-x M-w     (org-copy-subtree)
Copy subtree to kill ring. With a numeric prefix argument N, copy the N sequential subtrees.
C-c C-x C-y     (org-paste-subtree)
Yank subtree from kill ring. This does modify the level of the subtree to make sure the tree fits in nicely at the yank position. The yank level can also be specified with a numeric prefix argument, or by yanking after a headline marker like ‘****’.
C-y     (org-yank)
Depending on the options org-yank-adjusted-subtrees and org-yank-folded-subtrees, Org's internal yank command will paste subtrees folded and in a clever way, using the same command as C-c C-x C-y. With the default settings, no level adjustment will take place, but the yanked tree will be folded unless doing so would swallow text previously visible. Any prefix argument to this command will force a normal yank to be executed, with the prefix passed along. A good way to force a normal yank is C-u C-y. If you use yank-pop after a yank, it will yank previous kill items plainly, without adjustment and folding.
C-c C-x c     (org-clone-subtree-with-time-shift)
Clone a subtree by making a number of sibling copies of it. You will be prompted for the number of copies to make, and you can also specify if any timestamps in the entry should be shifted. This can be useful, for example, to create a number of tasks related to a series of lectures to prepare. For more details, see the docstring of the command org-clone-subtree-with-time-shift.
C-c C-w     (org-refile)
Refile entry or region to a different location. See Refile and copy.
C-c ^     (org-sort)
Sort same-level entries. When there is an active region, all entries in the region will be sorted. Otherwise the children of the current headline are sorted. The command prompts for the sorting method, which can be alphabetically, numerically, by time (first timestamp with active preferred, creation time, scheduled time, deadline time), by priority, by TODO keyword (in the sequence the keywords have been defined in the setup) or by the value of a property. Reverse sorting is possible as well. You can also supply your own function to extract the sorting key. With a C-u prefix, sorting will be case-sensitive.
C-x n s     (org-narrow-to-subtree)
Narrow buffer to current subtree.
C-x n b     (org-narrow-to-block)
Narrow buffer to current block.
C-x n w     (widen)
Widen buffer to remove narrowing.
C-c *     (org-toggle-heading)
Turn a normal line or plain list item into a headline (so that it becomes a subheading at its location). Also turn a headline into a normal line by removing the stars. If there is an active region, turn all lines in the region into headlines. If the first line in the region was an item, turn only the item lines into headlines. Finally, if the first line is a headline, remove the stars from all headlines in the region.
** Latex
*** disable underscore to subscript
#+begin_src emacs-lisp :tangle yes
^:nil
#+end_src
*** Greeks:
$$\alpha, \beta, \gamma$$
*** Superscript, subscript
$$R_{sun} = 6.96 x 10^8 m$$
*** Derivatives, Limits, Sums and Integrals
$$\frac{du}{dt}$$
#+begin_src emacs-lisp :tangle yes
\frac{du}{dt}
#+end_src
the Heat Equation$$\[ \frac{\partial u}{\partial t}
   = h^2 \left( \frac{\partial^2 u}{\partial x^2}
      + \frac{\partial^2 u}{\partial y^2}
      + \frac{\partial^2 u}{\partial z^2} \right) \]$$
#+begin_src emacs-lisp :tangle yes
\[ \frac{\partial u}{\partial t}
   = h^2 \left( \frac{\partial^2 u}{\partial x^2}
      + \frac{\partial^2 u}{\partial y^2}
      + \frac{\partial^2 u}{\partial z^2} \right) \]
#+end_src
$$\lim_{x \to +\infty}, \inf_{x > s}$$
#+begin_src emacs-lisp :tangle yes
\lim_{x \to +\infty}, \inf_{x > s}
#+end_src
$$\[ \sum_{k=1}^n k^2 = \frac{1}{2} n (n+1).\] $$
#+begin_src emacs-lisp :tangle yes
\[ \sum_{k=1}^n k^2 = \frac{1}{2} n (n+1).\]
#+end_src
$$\[ \int_a^b f(x)\,dx.\] $$
#+begin_src emacs-lisp :tangle yes
\[ \int_a^b f(x)\,dx.\]
#+end_src
$$\[ \int_0^{+\infty} x^n e^{-x} \,dx = n!.\]
\[ \int \cos \theta \,d\theta = \sin \theta.\]
\[ \int_{x^2 + y^2 \leq R^2} f(x,y)\,dx\,dy
   = \int_{\theta=0}^{2\pi} \int_{r=0}^R
      f(r\cos\theta,r\sin\theta) r\,dr\,d\theta.\] $$
#+begin_src emacs-lisp :tangle yes
\[ \int_0^{+\infty} x^n e^{-x} \,dx = n!.\]
\[ \int \cos \theta \,d\theta = \sin \theta.\]
\[ \int_{x^2 + y^2 \leq R^2} f(x,y)\,dx\,dy
   = \int_{\theta=0}^{2\pi} \int_{r=0}^R
      f(r\cos\theta,r\sin\theta) r\,dr\,d\theta.\]
#+end_src
$$\[ \int \!\!\! \int_D f(x,y)\,dx\,dy.\] $$
#+begin_src emacs-lisp :tangle yes
\[ \int \!\!\! \int_D f(x,y)\,dx\,dy.\]
#+end_src
** ditaa figures
*** Connected elements with colors
#+begin_src ditaa :file ditaa-seqboxes.png
+------+   +-----+   +-----+   +-----+
|{io}  |   |{d}  |   |{s}  |   |cBLU |
| Foo  +---+ Bar +---+ Baz +---+ Moo |
|      |   |     |   |     |   |     |
+------+   +-----+   +--+--+   +-----+
                        |
           /-----\      |      +------+
           |     |      |      | c1AB |
           | Goo +------+---=--+ Shoo |
           \-----/             |      |
                               +------+
#+end_src
** UML diagrams with PlantUML
*** Class diagrams

*** Sequences diagrams

** export org to html using styles
[[http://demo.thi.ng/org-spec/][styles]]
