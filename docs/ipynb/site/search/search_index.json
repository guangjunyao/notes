{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Ipython markdown forum For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. workon data_analysis - work on a virtual environement of python. mkdocs build - Build the documentation site. mkdocs build --clean - Clean extra files. mkdocs help - Print this help message. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-ipython-markdown-forum","text":"For full documentation visit mkdocs.org .","title":"Welcome to Ipython markdown forum"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. workon data_analysis - work on a virtual environement of python. mkdocs build - Build the documentation site. mkdocs build --clean - Clean extra files. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"PCA/","text":"Principal Component Analysis converts correlated variables into a set of values of linearly uncorrelated variables called pricipal components. The first component contributes most of the variance. PCA is a tool used for data visualization or data pre-processing before supervised techniques are applied. it involves only a set of features X1, X2, ....Xp, and no associated response Y. Pro: Explain a data set with few data. There are no special assumptions on the data and PCA can be applied on all data-sets. Con: Non-linear structure is hard to model with PCA. The meaning of the original variables may be difficult to assess directly on latent variables (but use the loading plot) or Varimax, factor analysis etc. The covariance matrix is needlessly large if your number of dimensions >> number of data points. Consider an Index and the stocks composing for this index, all the stocks are correlated. It's hard to use all the correlated factors to explain the movements of a stock index statistically. Principal Components are derived that well suited to explain the movements in the stock index. import numpy as np from pandas_datareader import base, data from sklearn.decomposition import KernelPCA import pandas as pd import pandas.io.data as web /home/weiwu/.virtualenvs/data_analysis/local/lib/python2.7/site-packages/pandas/io/data.py:35: FutureWarning: The pandas.io.data module is moved to a separate package (pandas-datareader) and will be removed from pandas in a future version. After installing the pandas-datareader package (https://github.com/pydata/pandas-datareader), you can change the import ``from pandas.io import data, wb`` to ``from pandas_datareader import data, wb``. FutureWarning) symbols = ['ADS.DE', 'ALV.DE', 'BAS.DE', 'BAYN.DE', 'BEI.DE', 'BMW.DE', 'CBK.DE', 'CON.DE', 'DAI.DE', 'DB1.DE', 'DBK.DE', 'DPW.DE', 'DTE.DE', 'EOAN.DE', 'FME.DE', 'FRE.DE', 'HEI.DE', 'HEN3.DE', 'IFX.DE', 'LHA.DE', 'LIN.DE', 'LXS.DE', 'MRK.DE', 'MUV2.DE', 'RWE.DE', 'SAP.DE', 'SDF.DE', 'SIE.DE', 'TKA.DE', 'VOW3.DE', '^GDAXI'] # df = web.DataReader(symbols, 'yahoo') data = pd.DataFrame() for sym in symbols: data[sym] = web.DataReader(sym, data_source='yahoo', start='20160510')['Adj Close'] data = data.dropna() #data = df['Adj Close'].dropna() dax = pd.DataFrame(data.pop('^GDAXI')) data[data.columns[:6]].head() ADS.DE ALV.DE BAS.DE BAYN.DE BEI.DE BMW.DE Date 2016-05-10 111.2931 135.59 66.702 95.426 79.6014 71.824 2016-05-11 110.4644 132.87 66.132 95.283 78.7778 70.802 2016-05-12 110.5619 130.86 64.740 90.662 78.3709 69.716 2016-05-13 108.6829 131.96 65.474 91.605 78.6388 70.918 2016-05-17 108.7324 131.14 65.436 91.234 77.5969 68.793 Applying PCA PCA works with normalized data sets. scale_function = lambda x: (x - x.mean()) / x.std() Consider PCA with multiple components. pca = KernelPCA().fit(data.apply(scale_function)) len(pca.lambdas_) 137 The fifth component already has almost negligible influence. pca.lambdas_[:10].round() array([ 5032., 1047., 752., 267., 131., 93., 61., 43., 34., 27.]) Analyze relative importance of each component, normalize these value. get_we = lambda x: x / x.sum() get_we(pca.lambdas_)[:10] array([ 0.65774151, 0.13683607, 0.09827087, 0.03484447, 0.01711015, 0.01219465, 0.00791495, 0.00568182, 0.00448305, 0.00356995]) The first component already explains about 65% of the variability in the 30 time series. The first 6 components explain about 95% of the variability. get_we(pca.lambdas_)[:6].sum() 0.95699771812076306 Constructing a PCA Index Use PCA to construct a PCA index over time and compare it with the original index.Have a PCA index with a single component only: pca = KernelPCA(n_components=1).fit(data.apply(scale_function)) dax['PCA_1'] = pca.transform(-data) import matplotlib.pyplot as plt %matplotlib inline dax.apply(scale_function).plot(figsize=(8, 4)) # tag: pca_1 # title: German DAX index and PCA index with 1 component <matplotlib.axes._subplots.AxesSubplot at 0x7fc1978e4b90> Improve the results b adding more components. We need to calculate a weighted average from the single resulting components. pca = KernelPCA(n_components=6).fit(data.apply(scale_function)) pca_components = pca.transform(-data) weights = get_we(pca.lambdas_) dax['PCA_6'] = np.dot(pca_components, weights) import matplotlib.pyplot as plt %matplotlib inline dax.apply(scale_function).plot(figsize=(8, 4)) # tag: pca_2 # title: German DAX index and PCA indices with 1 and 6 components <matplotlib.axes._subplots.AxesSubplot at 0x7fc1977900d0> Inspect the relationship between the DAX index and the PCA index via a scatter plot, adding date information to the mix. First, we convert the DatetimeIndex of the dataFrame Object to a matplotlib compatible format: import matplotlib as mpl mpl_dates = mpl.dates.date2num(data.index.to_pydatetime()) mpl_dates array([ 736094., 736095., 736096., 736097., 736101., 736102., 736103., 736104., 736107., 736108., 736109., 736110., 736111., 736114., 736115., 736116., 736117., 736118., 736121., 736122., 736123., 736124., 736125., 736128., 736129., 736130., 736131., 736132., 736135., 736136., 736137., 736138., 736139., 736142., 736143., 736144., 736145., 736146., 736149., 736150., 736151., 736152., 736153., 736156., 736157., 736158., 736159., 736160., 736163., 736164., 736165., 736166., 736167., 736170., 736171., 736172., 736173., 736174., 736177., 736178., 736179., 736180., 736181., 736184., 736185., 736186., 736187., 736188., 736191., 736192., 736193., 736194., 736195., 736198., 736199., 736200., 736201., 736202., 736205., 736206., 736207., 736208., 736209., 736212., 736213., 736214., 736215., 736216., 736219., 736220., 736221., 736222., 736223., 736226., 736227., 736228., 736229., 736230., 736233., 736234., 736235., 736236., 736237., 736241., 736242., 736243., 736244., 736247., 736248., 736249., 736250., 736251., 736254., 736255., 736256., 736257., 736258., 736261., 736262., 736263., 736264., 736265., 736268., 736269., 736270., 736271., 736272., 736275., 736276., 736277., 736278., 736279., 736282., 736283., 736284., 736285., 736286., 736289., 736290., 736291., 736292., 736293., 736296., 736297., 736298., 736299., 736300., 736303., 736304., 736305., 736306., 736307., 736310., 736311., 736312., 736313., 736314., 736317., 736318., 736319., 736320., 736321., 736325., 736326., 736327., 736328., 736331., 736332., 736333., 736334., 736335., 736338., 736339., 736340., 736341., 736342., 736345., 736346., 736347., 736348., 736349., 736352., 736353., 736354., 736355., 736356., 736359., 736360., 736361., 736362., 736363., 736366., 736367., 736368., 736369., 736370., 736373., 736374., 736375., 736376., 736377., 736380., 736381., 736382., 736383., 736384., 736387., 736388., 736389., 736390., 736391., 736394., 736395., 736396., 736397., 736398., 736401., 736402., 736403., 736404., 736405., 736408., 736409., 736410., 736411., 736412., 736415., 736416., 736417., 736418., 736419., 736422., 736423., 736424., 736425., 736426., 736429., 736430., 736431., 736432., 736437., 736438., 736439., 736440., 736443., 736444., 736445., 736446., 736447., 736451., 736452., 736453., 736454., 736457., 736458., 736459.]) plt.figure(figsize=(8, 4)) plt.scatter(dax['PCA_6'], dax['^GDAXI'], c=mpl_dates) lin_reg = np.polyval(np.polyfit(dax['PCA_6'], dax['^GDAXI'], 1), dax['PCA_6']) plt.plot(dax['PCA_6'], lin_reg, 'r', lw=3) plt.grid(True) plt.xlabel('PCA_6') plt.ylabel('^GDAXI') plt.colorbar(ticks=mpl.dates.DayLocator(interval=250), format=mpl.dates.DateFormatter('%d %b %y')) # tag: pca_3 # title: DAX return values against PCA return values with linear regression <matplotlib.colorbar.Colorbar at 0x7fc196f316d0> There's obviously some kind of strucutral break sometime in the middle of September of 2016. Let us divide the total time frame into two subintervals early and late session respectively. cut_date = '2016/9/21' early_pca = dax[dax.index < cut_date]['PCA_6'] early_reg = np.polyval(np.polyfit(early_pca, dax['^GDAXI'][dax.index < cut_date], 1), early_pca) late_pca = dax[dax.index >= cut_date]['PCA_6'] late_reg = np.polyval(np.polyfit(late_pca, dax['^GDAXI'][dax.index >= cut_date], 1), late_pca) plt.figure(figsize=(8, 4)) plt.scatter(dax['PCA_6'], dax['^GDAXI'], c=mpl_dates) plt.plot(early_pca, early_reg, 'r', lw=3) plt.plot(late_pca, late_reg, 'r', lw=3) plt.grid(True) plt.xlabel('PCA_6') plt.ylabel('^GDAXI') plt.colorbar(ticks=mpl.dates.DayLocator(interval=250), format=mpl.dates.DateFormatter('%d %b %y')) # tag: pca_7 # title: DAX index values against PCA index values with early and late regression (regime switch) <matplotlib.colorbar.Colorbar at 0x7fc19736ad10> The new regression lines show high explanatory power both before our cutoff date and thereafter.","title":"Principle Component Anlysis"},{"location":"PCA/#applying-pca","text":"PCA works with normalized data sets. scale_function = lambda x: (x - x.mean()) / x.std() Consider PCA with multiple components. pca = KernelPCA().fit(data.apply(scale_function)) len(pca.lambdas_) 137 The fifth component already has almost negligible influence. pca.lambdas_[:10].round() array([ 5032., 1047., 752., 267., 131., 93., 61., 43., 34., 27.]) Analyze relative importance of each component, normalize these value. get_we = lambda x: x / x.sum() get_we(pca.lambdas_)[:10] array([ 0.65774151, 0.13683607, 0.09827087, 0.03484447, 0.01711015, 0.01219465, 0.00791495, 0.00568182, 0.00448305, 0.00356995]) The first component already explains about 65% of the variability in the 30 time series. The first 6 components explain about 95% of the variability. get_we(pca.lambdas_)[:6].sum() 0.95699771812076306","title":"Applying PCA"},{"location":"PCA/#constructing-a-pca-index","text":"Use PCA to construct a PCA index over time and compare it with the original index.Have a PCA index with a single component only: pca = KernelPCA(n_components=1).fit(data.apply(scale_function)) dax['PCA_1'] = pca.transform(-data) import matplotlib.pyplot as plt %matplotlib inline dax.apply(scale_function).plot(figsize=(8, 4)) # tag: pca_1 # title: German DAX index and PCA index with 1 component <matplotlib.axes._subplots.AxesSubplot at 0x7fc1978e4b90> Improve the results b adding more components. We need to calculate a weighted average from the single resulting components. pca = KernelPCA(n_components=6).fit(data.apply(scale_function)) pca_components = pca.transform(-data) weights = get_we(pca.lambdas_) dax['PCA_6'] = np.dot(pca_components, weights) import matplotlib.pyplot as plt %matplotlib inline dax.apply(scale_function).plot(figsize=(8, 4)) # tag: pca_2 # title: German DAX index and PCA indices with 1 and 6 components <matplotlib.axes._subplots.AxesSubplot at 0x7fc1977900d0> Inspect the relationship between the DAX index and the PCA index via a scatter plot, adding date information to the mix. First, we convert the DatetimeIndex of the dataFrame Object to a matplotlib compatible format: import matplotlib as mpl mpl_dates = mpl.dates.date2num(data.index.to_pydatetime()) mpl_dates array([ 736094., 736095., 736096., 736097., 736101., 736102., 736103., 736104., 736107., 736108., 736109., 736110., 736111., 736114., 736115., 736116., 736117., 736118., 736121., 736122., 736123., 736124., 736125., 736128., 736129., 736130., 736131., 736132., 736135., 736136., 736137., 736138., 736139., 736142., 736143., 736144., 736145., 736146., 736149., 736150., 736151., 736152., 736153., 736156., 736157., 736158., 736159., 736160., 736163., 736164., 736165., 736166., 736167., 736170., 736171., 736172., 736173., 736174., 736177., 736178., 736179., 736180., 736181., 736184., 736185., 736186., 736187., 736188., 736191., 736192., 736193., 736194., 736195., 736198., 736199., 736200., 736201., 736202., 736205., 736206., 736207., 736208., 736209., 736212., 736213., 736214., 736215., 736216., 736219., 736220., 736221., 736222., 736223., 736226., 736227., 736228., 736229., 736230., 736233., 736234., 736235., 736236., 736237., 736241., 736242., 736243., 736244., 736247., 736248., 736249., 736250., 736251., 736254., 736255., 736256., 736257., 736258., 736261., 736262., 736263., 736264., 736265., 736268., 736269., 736270., 736271., 736272., 736275., 736276., 736277., 736278., 736279., 736282., 736283., 736284., 736285., 736286., 736289., 736290., 736291., 736292., 736293., 736296., 736297., 736298., 736299., 736300., 736303., 736304., 736305., 736306., 736307., 736310., 736311., 736312., 736313., 736314., 736317., 736318., 736319., 736320., 736321., 736325., 736326., 736327., 736328., 736331., 736332., 736333., 736334., 736335., 736338., 736339., 736340., 736341., 736342., 736345., 736346., 736347., 736348., 736349., 736352., 736353., 736354., 736355., 736356., 736359., 736360., 736361., 736362., 736363., 736366., 736367., 736368., 736369., 736370., 736373., 736374., 736375., 736376., 736377., 736380., 736381., 736382., 736383., 736384., 736387., 736388., 736389., 736390., 736391., 736394., 736395., 736396., 736397., 736398., 736401., 736402., 736403., 736404., 736405., 736408., 736409., 736410., 736411., 736412., 736415., 736416., 736417., 736418., 736419., 736422., 736423., 736424., 736425., 736426., 736429., 736430., 736431., 736432., 736437., 736438., 736439., 736440., 736443., 736444., 736445., 736446., 736447., 736451., 736452., 736453., 736454., 736457., 736458., 736459.]) plt.figure(figsize=(8, 4)) plt.scatter(dax['PCA_6'], dax['^GDAXI'], c=mpl_dates) lin_reg = np.polyval(np.polyfit(dax['PCA_6'], dax['^GDAXI'], 1), dax['PCA_6']) plt.plot(dax['PCA_6'], lin_reg, 'r', lw=3) plt.grid(True) plt.xlabel('PCA_6') plt.ylabel('^GDAXI') plt.colorbar(ticks=mpl.dates.DayLocator(interval=250), format=mpl.dates.DateFormatter('%d %b %y')) # tag: pca_3 # title: DAX return values against PCA return values with linear regression <matplotlib.colorbar.Colorbar at 0x7fc196f316d0> There's obviously some kind of strucutral break sometime in the middle of September of 2016. Let us divide the total time frame into two subintervals early and late session respectively. cut_date = '2016/9/21' early_pca = dax[dax.index < cut_date]['PCA_6'] early_reg = np.polyval(np.polyfit(early_pca, dax['^GDAXI'][dax.index < cut_date], 1), early_pca) late_pca = dax[dax.index >= cut_date]['PCA_6'] late_reg = np.polyval(np.polyfit(late_pca, dax['^GDAXI'][dax.index >= cut_date], 1), late_pca) plt.figure(figsize=(8, 4)) plt.scatter(dax['PCA_6'], dax['^GDAXI'], c=mpl_dates) plt.plot(early_pca, early_reg, 'r', lw=3) plt.plot(late_pca, late_reg, 'r', lw=3) plt.grid(True) plt.xlabel('PCA_6') plt.ylabel('^GDAXI') plt.colorbar(ticks=mpl.dates.DayLocator(interval=250), format=mpl.dates.DateFormatter('%d %b %y')) # tag: pca_7 # title: DAX index values against PCA index values with early and late regression (regime switch) <matplotlib.colorbar.Colorbar at 0x7fc19736ad10> The new regression lines show high explanatory power both before our cutoff date and thereafter.","title":"Constructing a PCA Index"},{"location":"about/","text":"Iubet per fors superi crine Minima moram vulgus humus cum tuta dixerunt Lorem markdownum aviti , dolore hanc tota arceat terret unguis luctus? Curaque hoc undique sine sanguine, senior in, atque; altera, consorte solacia. De domus tu dedit. Etsi avem Priamum? Arma artes exiguo eripere caeloque colle. Non sentit inquit quater discedere dolebo! Iam conabar ima apte ausis, venturaque dulces. Rutilos renoventur miseroque possit quam Haud figuram, illa dat petit deserere placet, liquidas ait, meoque contrarius. Ratione cuspide currum. Dixi perque utrumque. Adoni et capit ruricolae et micante solido ore habet rogis iuves in tardarunt quid, non non regis, virago. In spectat numen, te remige Pelasgas, a feroci flores concustodita precor parentem quam modo virum. Venientique ponti Perimet locum saxo; stipe ille sine semper ad vivum At sonantem vero spatiumque. Madidisque flamma avulsa utrumque mandata, perimunt vultumque utile Eleis nocte, de laetis dubitat illas quoque: sertis adsuetos? Cuius molli per nescit tympana velaque tepentibus clarus inmittite et signaque. Ore factus decet paulatimque Ruunt praemia Remissis naides Sed se te vitiatur tenent thalamos tamen Lenaeo gerebat Subiectum caput: de: Megareus formam, marmoris et dolore acrior erant. Vana hos Solis metu ipsa tertia munimine antiquas consenuere fallis sine remis? Edendi inmotosque undis, habet perlucidus ter iram Glaucus potest more referente! Me tuta regis, resimas ut navifragumque arbore pauca utrumque, in mihi simul pressa tepidique tanta deposuisse aulaea. Maiores altus nato ignotis trita reminiscitur Iovem matrona opes clara neque, hos est causa. Videntur et puerum de veniet nulla, nec numquam quantas. Cadmi fusum arces diffusa iuvencae vestis diffugiunt mediae secum.","title":"About"},{"location":"about/#iubet-per-fors-superi-crine","text":"","title":"Iubet per fors superi crine"},{"location":"about/#minima-moram-vulgus-humus-cum-tuta-dixerunt","text":"Lorem markdownum aviti , dolore hanc tota arceat terret unguis luctus? Curaque hoc undique sine sanguine, senior in, atque; altera, consorte solacia. De domus tu dedit. Etsi avem Priamum? Arma artes exiguo eripere caeloque colle. Non sentit inquit quater discedere dolebo! Iam conabar ima apte ausis, venturaque dulces.","title":"Minima moram vulgus humus cum tuta dixerunt"},{"location":"about/#rutilos-renoventur-miseroque-possit-quam","text":"Haud figuram, illa dat petit deserere placet, liquidas ait, meoque contrarius. Ratione cuspide currum. Dixi perque utrumque. Adoni et capit ruricolae et micante solido ore habet rogis iuves in tardarunt quid, non non regis, virago. In spectat numen, te remige Pelasgas, a feroci flores concustodita precor parentem quam modo virum.","title":"Rutilos renoventur miseroque possit quam"},{"location":"about/#venientique-ponti","text":"Perimet locum saxo; stipe ille sine semper ad vivum At sonantem vero spatiumque. Madidisque flamma avulsa utrumque mandata, perimunt vultumque utile Eleis nocte, de laetis dubitat illas quoque: sertis adsuetos? Cuius molli per nescit tympana velaque tepentibus clarus inmittite et signaque. Ore factus decet paulatimque Ruunt praemia Remissis naides Sed se te vitiatur tenent thalamos tamen","title":"Venientique ponti"},{"location":"about/#lenaeo-gerebat","text":"Subiectum caput: de: Megareus formam, marmoris et dolore acrior erant. Vana hos Solis metu ipsa tertia munimine antiquas consenuere fallis sine remis? Edendi inmotosque undis, habet perlucidus ter iram Glaucus potest more referente! Me tuta regis, resimas ut navifragumque arbore pauca utrumque, in mihi simul pressa tepidique tanta deposuisse aulaea. Maiores altus nato ignotis trita reminiscitur Iovem matrona opes clara neque, hos est causa. Videntur et puerum de veniet nulla, nec numquam quantas. Cadmi fusum arces diffusa iuvencae vestis diffugiunt mediae secum.","title":"Lenaeo gerebat"},{"location":"optimization/","text":"st=>start: load libraries e=>end: return optimized weight dataframe d=>operation: load data transfer=>operation: transfer_data risk=>operation: \u63d0\u53d6risk model data \u5e76\u6309\u9700\u6c42\u8f6c\u6362 man=>operation: manipulate data to requested form opts=>operation: multi-period optimization by date index cal_risk=>operation: target symbols risk calculation constraint=>operation: setup constraint prob=>operation: setup problem based on constraint and target sol=>operation: solve for the problem cond=>condition: loop end to date index? st->d->transfer->man->risk->opts->cal_risk->constraint->prob->sol->cond cond(yes)->e cond(no)->opts ```python def CvxOptimizer(target_mode, position_limit, risk_model, asset_return, asset_weight, target_risk, target_return, target_date, asset_constraint, group_constraint, exposure_constraint) # transfer_data if asset_constraint is not None: asset_constraint = asset_constraint.asMatrix() if group_constraint is not None: group_constraint = group_constraint.asMatrix() if exposure_constraint is not None: exposure_constraint = exposure_constraint.asMatrix() # \u63d0\u53d6risk model data \u5e76\u6309\u9700\u6c42\u8f6c\u6362 data = ExtractDictModelData(risk_model) risk_data = RiskAnlysis(data) # create optmized weight dataframe df_opts_weight = pd.DataFrame(data=np.nan, columns=specific_risk.columns, index=exposure_constraint.index) # multi-period optimization by date index for target_date in exposure_constraint.index: # \u63d0\u53d6target symbols target_symbols = ... # target symbols risk calculation big_X = get_factor_exposure(risk_model, ls_factor, target_date, idx_level_1_value) cov_matrix = cov_matrix.reindex(all_factors, all_factors, fill_value=np.nan) # Factor model portfolio optimization process. w = cvx.Variable(noa) G_sum = np.array(matrix(Group_sub))*w f = big_X.T.values*w gamma = cvx.Parameter(sign='positive') Lmax = cvx.Parameter() ret = w.T * rets_mean.values risk = cvx.quad_form(f, cov_matrix.values) + cvx.quad_form(w, delta.values) # setup constraint eq_constraint = [cvx.sum_entries(w) == 1, cvx.norm(w, 1) <= Lmax] l_eq_constraint = [w >= df_asset_weight.lower.values, w <= df_asset_weight.upper.values, G_sum >= df_group_weight.lower.values, G_sum <= df_group_weight.upper.values] if exposure_constraint is not None: l_eq_constraint.append(f >= df_factor_exposure_lower_bnd.values) l_eq_constraint.append(f <= df_factor_exposure_upper_bnd.values) #Portfolio optimization with a leverage limit and a bound on risk Lmax.value = 1 gamma.value = 1 if target_mode == MinimumRisk: # Solve the factor model problem. prob_factor = cvx.Problem(cvx.Maximize(-gamma*risk), eq_constraint+l_eq_constraint) if target_mode == MinimumRiskUnderReturn: # minimum risk subject to target return, Markowitz Mean_Variance Portfolio prob_factor = cvx.Problem(cvx.Maximize(-gamma*risk), [ret >= target_return]+l_eq_constraint+eq_constraint) if target_mode == MaximumReturnUnderRisk: # Computes a tangency portfolio, i.e. a maximum Sharpe ratio portfolio prob_factor = cvx.Problem(cvx.Maximize(ret), [risk <= target_risk]+l_eq_constraint+eq_constraint) # solve for optimized w prob_factor.solve(verbose=False) logger.debug(prob_factor.status) if prob_factor.status == 'infeasible': # relax constraint # to do else: df_opts_weight.loc[target_date, idx_level_1_value] = np.array(w.value.astype(np.float64)).T return df_opts_weight.dropna(axis=1, how='all') ```","title":"Optimization summary"},{"location":"python_rules/","text":"Python\u8bed\u8a00\u89c4\u8303 Lint .. tip:: \u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884cpylint \u5b9a\u4e49: pylint\u662f\u4e00\u4e2a\u5728Python\u6e90\u4ee3\u7801\u4e2d\u67e5\u627ebug\u7684\u5de5\u5177. \u5bf9\u4e8eC\u548cC++\u8fd9\u6837\u7684\u4e0d\u90a3\u4e48\u52a8\u6001\u7684(\u8bd1\u8005\u6ce8: \u539f\u6587\u662fless dynamic)\u8bed\u8a00, \u8fd9\u4e9bbug\u901a\u5e38\u7531\u7f16\u8bd1\u5668\u6765\u6355\u83b7. \u7531\u4e8ePython\u7684\u52a8\u6001\u7279\u6027, \u6709\u4e9b\u8b66\u544a\u53ef\u80fd\u4e0d\u5bf9. \u4e0d\u8fc7\u4f2a\u544a\u8b66\u5e94\u8be5\u5f88\u5c11. \u4f18\u70b9: \u53ef\u4ee5\u6355\u83b7\u5bb9\u6613\u5ffd\u89c6\u7684\u9519\u8bef, \u4f8b\u5982\u8f93\u5165\u9519\u8bef, \u4f7f\u7528\u672a\u8d4b\u503c\u7684\u53d8\u91cf\u7b49. \u7f3a\u70b9: pylint\u4e0d\u5b8c\u7f8e. \u8981\u5229\u7528\u5176\u4f18\u52bf, \u6211\u4eec\u6709\u65f6\u4faf\u9700\u8981: a) \u56f4\u7ed5\u7740\u5b83\u6765\u5199\u4ee3\u7801 b) \u6291\u5236\u5176\u544a\u8b66 c) \u6539\u8fdb\u5b83, \u6216\u8005d) \u5ffd\u7565\u5b83. \u7ed3\u8bba: \u786e\u4fdd\u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884cpylint.\u6291\u5236\u4e0d\u51c6\u786e\u7684\u8b66\u544a,\u4ee5\u4fbf\u80fd\u591f\u5c06\u5176\u4ed6\u8b66\u544a\u66b4\u9732\u51fa\u6765\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u884c\u6ce8\u91ca\u6765\u6291\u5236\u544a\u8b66. \u4f8b\u5982: .. code-block:: python dict = 'something awful' # Bad Idea... pylint: disable=redefined-builtin pylint\u8b66\u544a\u662f\u4ee5\u4e00\u4e2a\u6570\u5b57\u7f16\u53f7(\u5982 ``C0112`` )\u548c\u4e00\u4e2a\u7b26\u53f7\u540d(\u5982 ``empty-docstring`` )\u6765\u6807\u8bc6\u7684. \u5728\u7f16\u5199\u65b0\u4ee3\u7801\u6216\u66f4\u65b0\u5df2\u6709\u4ee3\u7801\u65f6\u5bf9\u544a\u8b66\u8fdb\u884c\u533b\u6cbb, \u63a8\u8350\u4f7f\u7528\u7b26\u53f7\u540d\u6765\u6807\u8bc6. \u5982\u679c\u8b66\u544a\u7684\u7b26\u53f7\u540d\u4e0d\u591f\u89c1\u540d\u77e5\u610f\uff0c\u90a3\u4e48\u8bf7\u5bf9\u5176\u589e\u52a0\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002 \u91c7\u7528\u8fd9\u79cd\u6291\u5236\u65b9\u5f0f\u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u67e5\u627e\u6291\u5236\u5e76\u56de\u987e\u5b83\u4eec. \u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 ``pylint --list-msgs`` \u6765\u83b7\u53d6pylint\u544a\u8b66\u5217\u8868. \u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 ``pylint --help-msg=C6409`` , \u4ee5\u83b7\u53d6\u5173\u4e8e\u7279\u5b9a\u6d88\u606f\u7684\u66f4\u591a\u4fe1\u606f. \u76f8\u6bd4\u8f83\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684 ``pylint: disable-msg`` , \u672c\u6587\u63a8\u8350\u4f7f\u7528 ``pylint: disable`` . \u8981\u6291\u5236\"\u53c2\u6570\u672a\u4f7f\u7528\"\u544a\u8b66, \u4f60\u53ef\u4ee5\u7528\"_\"\u4f5c\u4e3a\u53c2\u6570\u6807\u8bc6\u7b26, \u6216\u8005\u5728\u53c2\u6570\u540d\u524d\u52a0\"unused\\_\". \u9047\u5230\u4e0d\u80fd\u6539\u53d8\u53c2\u6570\u540d\u7684\u60c5\u51b5, \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u51fd\u6570\u5f00\u5934\"\u63d0\u5230\"\u5b83\u4eec\u6765\u6d88\u9664\u544a\u8b66. \u4f8b\u5982: .. code-block:: python def foo(a, unused_b, unused_c, d=None, e=None): _ = d, e return a \u5bfc\u5165 .. tip:: \u4ec5\u5bf9\u5305\u548c\u6a21\u5757\u4f7f\u7528\u5bfc\u5165 \u5b9a\u4e49: \u6a21\u5757\u95f4\u5171\u4eab\u4ee3\u7801\u7684\u91cd\u7528\u673a\u5236. \u4f18\u70b9: \u547d\u540d\u7a7a\u95f4\u7ba1\u7406\u7ea6\u5b9a\u5341\u5206\u7b80\u5355. \u6bcf\u4e2a\u6807\u8bc6\u7b26\u7684\u6e90\u90fd\u7528\u4e00\u79cd\u4e00\u81f4\u7684\u65b9\u5f0f\u6307\u793a. x.Obj\u8868\u793aObj\u5bf9\u8c61\u5b9a\u4e49\u5728\u6a21\u5757x\u4e2d. \u7f3a\u70b9: \u6a21\u5757\u540d\u4ecd\u53ef\u80fd\u51b2\u7a81. \u6709\u4e9b\u6a21\u5757\u540d\u592a\u957f, \u4e0d\u592a\u65b9\u4fbf. \u7ed3\u8bba: \u4f7f\u7528 import x \u6765\u5bfc\u5165\u5305\u548c\u6a21\u5757. \u4f7f\u7528 ``from x import y`` , \u5176\u4e2dx\u662f\u5305\u524d\u7f00, y\u662f\u4e0d\u5e26\u524d\u7f00\u7684\u6a21\u5757\u540d. \u4f7f\u7528 ``from x import y as z``, \u5982\u679c\u4e24\u4e2a\u8981\u5bfc\u5165\u7684\u6a21\u5757\u90fd\u53eb\u505ay\u6216\u8005y\u592a\u957f\u4e86. \u4f8b\u5982, \u6a21\u5757 ``sound.effects.echo`` \u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165: .. code-block:: python from sound.effects import echo ... echo.EchoFilter(input, output, delay=0.7, atten=4) \u5bfc\u5165\u65f6\u4e0d\u8981\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0. \u5373\u4f7f\u6a21\u5757\u5728\u540c\u4e00\u4e2a\u5305\u4e2d, \u4e5f\u8981\u4f7f\u7528\u5b8c\u6574\u5305\u540d. \u8fd9\u80fd\u5e2e\u52a9\u4f60\u907f\u514d\u65e0\u610f\u95f4\u5bfc\u5165\u4e00\u4e2a\u5305\u4e24\u6b21. \u5305 .. tip:: \u4f7f\u7528\u6a21\u5757\u7684\u5168\u8def\u5f84\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757 \u4f18\u70b9: \u907f\u514d\u6a21\u5757\u540d\u51b2\u7a81. \u67e5\u627e\u5305\u66f4\u5bb9\u6613. \u7f3a\u70b9: \u90e8\u7f72\u4ee3\u7801\u53d8\u96be, \u56e0\u4e3a\u4f60\u5fc5\u987b\u590d\u5236\u5305\u5c42\u6b21. \u7ed3\u8bba: \u6240\u6709\u7684\u65b0\u4ee3\u7801\u90fd\u5e94\u8be5\u7528\u5b8c\u6574\u5305\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757. \u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bfc\u5165: .. code-block:: python # Reference in code with complete name. import sound.effects.echo # Reference in code with just module name (preferred). from sound.effects import echo \u5f02\u5e38 .. tip:: \u5141\u8bb8\u4f7f\u7528\u5f02\u5e38, \u4f46\u5fc5\u987b\u5c0f\u5fc3 \u5b9a\u4e49: \u5f02\u5e38\u662f\u4e00\u79cd\u8df3\u51fa\u4ee3\u7801\u5757\u7684\u6b63\u5e38\u63a7\u5236\u6d41\u6765\u5904\u7406\u9519\u8bef\u6216\u8005\u5176\u5b83\u5f02\u5e38\u6761\u4ef6\u7684\u65b9\u5f0f. \u4f18\u70b9: \u6b63\u5e38\u64cd\u4f5c\u4ee3\u7801\u7684\u63a7\u5236\u6d41\u4e0d\u4f1a\u548c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u6df7\u5728\u4e00\u8d77. \u5f53\u67d0\u79cd\u6761\u4ef6\u53d1\u751f\u65f6, \u5b83\u4e5f\u5141\u8bb8\u63a7\u5236\u6d41\u8df3\u8fc7\u591a\u4e2a\u6846\u67b6. \u4f8b\u5982, \u4e00\u6b65\u8df3\u51faN\u4e2a\u5d4c\u5957\u7684\u51fd\u6570, \u800c\u4e0d\u5fc5\u7ee7\u7eed\u6267\u884c\u9519\u8bef\u7684\u4ee3\u7801. \u7f3a\u70b9: \u53ef\u80fd\u4f1a\u5bfc\u81f4\u8ba9\u4eba\u56f0\u60d1\u7684\u63a7\u5236\u6d41. \u8c03\u7528\u5e93\u65f6\u5bb9\u6613\u9519\u8fc7\u9519\u8bef\u60c5\u51b5. \u7ed3\u8bba: \u5f02\u5e38\u5fc5\u987b\u9075\u5b88\u7279\u5b9a\u6761\u4ef6: #. \u50cf\u8fd9\u6837\u89e6\u53d1\u5f02\u5e38: ``raise MyException(\"Error message\")`` \u6216\u8005 ``raise MyException`` . \u4e0d\u8981\u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\u7684\u5f62\u5f0f( ``raise MyException, \"Error message\"`` )\u6216\u8005\u8fc7\u65f6\u7684\u5b57\u7b26\u4e32\u5f02\u5e38( ``raise \"Error message\"`` ). #. \u6a21\u5757\u6216\u5305\u5e94\u8be5\u5b9a\u4e49\u81ea\u5df1\u7684\u7279\u5b9a\u57df\u7684\u5f02\u5e38\u57fa\u7c7b, \u8fd9\u4e2a\u57fa\u7c7b\u5e94\u8be5\u4ece\u5185\u5efa\u7684Exception\u7c7b\u7ee7\u627f. \u6a21\u5757\u7684\u5f02\u5e38\u57fa\u7c7b\u5e94\u8be5\u53eb\u505a\"Error\". .. code-block:: python class Error(Exception): pass #. \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 ``except:`` \u8bed\u53e5\u6765\u6355\u83b7\u6240\u6709\u5f02\u5e38, \u4e5f\u4e0d\u8981\u6355\u83b7 ``Exception`` \u6216\u8005 ``StandardError`` , \u9664\u975e\u4f60\u6253\u7b97\u91cd\u65b0\u89e6\u53d1\u8be5\u5f02\u5e38, \u6216\u8005\u4f60\u5df2\u7ecf\u5728\u5f53\u524d\u7ebf\u7a0b\u7684\u6700\u5916\u5c42(\u8bb0\u5f97\u8fd8\u662f\u8981\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f). \u5728\u5f02\u5e38\u8fd9\u65b9\u9762, Python\u975e\u5e38\u5bbd\u5bb9, ``except:`` \u771f\u7684\u4f1a\u6355\u83b7\u5305\u62ecPython\u8bed\u6cd5\u9519\u8bef\u5728\u5185\u7684\u4efb\u4f55\u9519\u8bef. \u4f7f\u7528 ``except:`` \u5f88\u5bb9\u6613\u9690\u85cf\u771f\u6b63\u7684bug. #. \u5c3d\u91cf\u51cf\u5c11try/except\u5757\u4e2d\u7684\u4ee3\u7801\u91cf. try\u5757\u7684\u4f53\u79ef\u8d8a\u5927, \u671f\u671b\u4e4b\u5916\u7684\u5f02\u5e38\u5c31\u8d8a\u5bb9\u6613\u88ab\u89e6\u53d1. \u8fd9\u79cd\u60c5\u51b5\u4e0b, try/except\u5757\u5c06\u9690\u85cf\u771f\u6b63\u7684\u9519\u8bef. #. \u4f7f\u7528finally\u5b50\u53e5\u6765\u6267\u884c\u90a3\u4e9b\u65e0\u8bbatry\u5757\u4e2d\u6709\u6ca1\u6709\u5f02\u5e38\u90fd\u5e94\u8be5\u88ab\u6267\u884c\u7684\u4ee3\u7801. \u8fd9\u5bf9\u4e8e\u6e05\u7406\u8d44\u6e90\u5e38\u5e38\u5f88\u6709\u7528, \u4f8b\u5982\u5173\u95ed\u6587\u4ef6. #. \u5f53\u6355\u83b7\u5f02\u5e38\u65f6, \u4f7f\u7528 ``as`` \u800c\u4e0d\u8981\u7528\u9017\u53f7. \u4f8b\u5982 .. code-block:: python try: raise Error except Error as error: pass \u5168\u5c40\u53d8\u91cf .. tip:: \u907f\u514d\u5168\u5c40\u53d8\u91cf \u5b9a\u4e49: \u5b9a\u4e49\u5728\u6a21\u5757\u7ea7\u7684\u53d8\u91cf. \u4f18\u70b9: \u5076\u5c14\u6709\u7528. \u7f3a\u70b9: \u5bfc\u5165\u65f6\u53ef\u80fd\u6539\u53d8\u6a21\u5757\u884c\u4e3a, \u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u65f6\u4f1a\u5bf9\u6a21\u5757\u7ea7\u53d8\u91cf\u8d4b\u503c. \u7ed3\u8bba: \u907f\u514d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf, \u7528\u7c7b\u53d8\u91cf\u6765\u4ee3\u66ff. \u4f46\u4e5f\u6709\u4e00\u4e9b\u4f8b\u5916: #. \u811a\u672c\u7684\u9ed8\u8ba4\u9009\u9879. #. \u6a21\u5757\u7ea7\u5e38\u91cf. \u4f8b\u5982:\u3000PI = 3.14159. \u5e38\u91cf\u5e94\u8be5\u5168\u5927\u5199, \u7528\u4e0b\u5212\u7ebf\u8fde\u63a5. #. \u6709\u65f6\u5019\u7528\u5168\u5c40\u53d8\u91cf\u6765\u7f13\u5b58\u503c\u6216\u8005\u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u503c\u5f88\u6709\u7528. #. \u5982\u679c\u9700\u8981, \u5168\u5c40\u53d8\u91cf\u5e94\u8be5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u53ef\u7528, \u5e76\u901a\u8fc7\u6a21\u5757\u7ea7\u7684\u516c\u5171\u51fd\u6570\u6765\u8bbf\u95ee. \u5d4c\u5957/\u5c40\u90e8/\u5185\u90e8\u7c7b\u6216\u51fd\u6570 .. tip:: \u9f13\u52b1\u4f7f\u7528\u5d4c\u5957/\u672c\u5730/\u5185\u90e8\u7c7b\u6216\u51fd\u6570 \u5b9a\u4e49: \u7c7b\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5, \u51fd\u6570\u6216\u8005\u7c7b\u4e2d. \u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u4e2d. \u5c01\u95ed\u533a\u95f4\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5bf9\u5d4c\u5957\u51fd\u6570\u662f\u53ea\u8bfb\u7684. \u4f18\u70b9: \u5141\u8bb8\u5b9a\u4e49\u4ec5\u7528\u4e8e\u6709\u6548\u8303\u56f4\u7684\u5de5\u5177\u7c7b\u548c\u51fd\u6570. \u7f3a\u70b9: \u5d4c\u5957\u7c7b\u6216\u5c40\u90e8\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u80fd\u5e8f\u5217\u5316(pickled). \u7ed3\u8bba: \u63a8\u8350\u4f7f\u7528. \u5217\u8868\u63a8\u5bfc(List Comprehensions) .. tip:: \u53ef\u4ee5\u5728\u7b80\u5355\u60c5\u51b5\u4e0b\u4f7f\u7528 \u5b9a\u4e49: \u5217\u8868\u63a8\u5bfc(list comprehensions)\u4e0e\u751f\u6210\u5668\u8868\u8fbe\u5f0f(generator expression)\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u9ad8\u6548\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u5217\u8868\u548c\u8fed\u4ee3\u5668, \u800c\u4e0d\u5fc5\u501f\u52a9map(), filter(), \u6216\u8005lambda. \u4f18\u70b9: \u7b80\u5355\u7684\u5217\u8868\u63a8\u5bfc\u53ef\u4ee5\u6bd4\u5176\u5b83\u7684\u5217\u8868\u521b\u5efa\u65b9\u6cd5\u66f4\u52a0\u6e05\u6670\u7b80\u5355. \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5341\u5206\u9ad8\u6548, \u56e0\u4e3a\u5b83\u4eec\u907f\u514d\u4e86\u521b\u5efa\u6574\u4e2a\u5217\u8868. \u7f3a\u70b9: \u590d\u6742\u7684\u5217\u8868\u63a8\u5bfc\u6216\u8005\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u80fd\u96be\u4ee5\u9605\u8bfb. \u7ed3\u8bba: \u9002\u7528\u4e8e\u7b80\u5355\u60c5\u51b5. \u6bcf\u4e2a\u90e8\u5206\u5e94\u8be5\u5355\u72ec\u7f6e\u4e8e\u4e00\u884c: \u6620\u5c04\u8868\u8fbe\u5f0f, for\u8bed\u53e5, \u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f. \u7981\u6b62\u591a\u91cdfor\u8bed\u53e5\u6216\u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f. \u590d\u6742\u60c5\u51b5\u4e0b\u8fd8\u662f\u4f7f\u7528\u5faa\u73af. .. code-block:: python Yes: result = [] for x in range(10): for y in range(5): if x * y > 10: result.append((x, y)) for x in xrange(5): for y in xrange(5): if x != y: for z in xrange(5): if y != z: yield (x, y, z) return ((x, complicated_transform(x)) for x in long_generator_function(parameter) if x is not None) squares = [x * x for x in range(10)] eat(jelly_bean for jelly_bean in jelly_beans if jelly_bean.color == 'black') .. code-block:: python No: result = [(x, y) for x in range(10) for y in range(5) if x * y > 10] return ((x, y, z) for x in xrange(5) for y in xrange(5) if x != y for z in xrange(5) if y != z) \u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26 .. tip:: \u5982\u679c\u7c7b\u578b\u652f\u6301, \u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26. \u6bd4\u5982\u5217\u8868, \u5b57\u5178\u53ca\u6587\u4ef6\u7b49. \u5b9a\u4e49: \u5bb9\u5668\u7c7b\u578b, \u50cf\u5b57\u5178\u548c\u5217\u8868, \u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u5173\u7cfb\u6d4b\u8bd5\u64cd\u4f5c\u7b26(in\u548cnot in) \u4f18\u70b9: \u9ed8\u8ba4\u64cd\u4f5c\u7b26\u548c\u8fed\u4ee3\u5668\u7b80\u5355\u9ad8\u6548, \u5b83\u4eec\u76f4\u63a5\u8868\u8fbe\u4e86\u64cd\u4f5c, \u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\u8c03\u7528. \u4f7f\u7528\u9ed8\u8ba4\u64cd\u4f5c\u7b26\u7684\u51fd\u6570\u662f\u901a\u7528\u7684. \u5b83\u53ef\u4ee5\u7528\u4e8e\u652f\u6301\u8be5\u64cd\u4f5c\u7684\u4efb\u4f55\u7c7b\u578b. \u7f3a\u70b9: \u4f60\u6ca1\u6cd5\u901a\u8fc7\u9605\u8bfb\u65b9\u6cd5\u540d\u6765\u533a\u5206\u5bf9\u8c61\u7684\u7c7b\u578b(\u4f8b\u5982, has_key()\u610f\u5473\u7740\u5b57\u5178). \u4e0d\u8fc7\u8fd9\u4e5f\u662f\u4f18\u70b9. \u7ed3\u8bba: \u5982\u679c\u7c7b\u578b\u652f\u6301, \u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26, \u4f8b\u5982\u5217\u8868, \u5b57\u5178\u548c\u6587\u4ef6. \u5185\u5efa\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e86\u8fed\u4ee3\u5668\u65b9\u6cd5. \u4f18\u5148\u8003\u8651\u8fd9\u4e9b\u65b9\u6cd5, \u800c\u4e0d\u662f\u90a3\u4e9b\u8fd4\u56de\u5217\u8868\u7684\u65b9\u6cd5. \u5f53\u7136\uff0c\u8fd9\u6837\u904d\u5386\u5bb9\u5668\u65f6\uff0c\u4f60\u5c06\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668. .. code-block:: python Yes: for key in adict: ... if key not in adict: ... if obj in alist: ... for line in afile: ... for k, v in dict.iteritems(): ... .. code-block:: python No: for key in adict.keys(): ... if not adict.has_key(key): ... for line in afile.readlines(): ... \u751f\u6210\u5668 .. tip:: \u6309\u9700\u4f7f\u7528\u751f\u6210\u5668. \u5b9a\u4e49: \u6240\u8c13\u751f\u6210\u5668\u51fd\u6570, \u5c31\u662f\u6bcf\u5f53\u5b83\u6267\u884c\u4e00\u6b21\u751f\u6210(yield)\u8bed\u53e5, \u5b83\u5c31\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668, \u8fd9\u4e2a\u8fed\u4ee3\u5668\u751f\u6210\u4e00\u4e2a\u503c. \u751f\u6210\u503c\u540e, \u751f\u6210\u5668\u51fd\u6570\u7684\u8fd0\u884c\u72b6\u6001\u5c06\u88ab\u6302\u8d77, \u76f4\u5230\u4e0b\u4e00\u6b21\u751f\u6210. \u4f18\u70b9: \u7b80\u5316\u4ee3\u7801, \u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528\u65f6, \u5c40\u90e8\u53d8\u91cf\u548c\u63a7\u5236\u6d41\u7684\u72b6\u6001\u90fd\u4f1a\u88ab\u4fdd\u5b58. \u6bd4\u8d77\u4e00\u6b21\u521b\u5efa\u4e00\u7cfb\u5217\u503c\u7684\u51fd\u6570, \u751f\u6210\u5668\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11. \u7f3a\u70b9: \u6ca1\u6709. \u7ed3\u8bba: \u9f13\u52b1\u4f7f\u7528. \u6ce8\u610f\u5728\u751f\u6210\u5668\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\"Yields:\"\u800c\u4e0d\u662f\"Returns:\". (\u8bd1\u8005\u6ce8: \u53c2\u770b :ref:`\u6ce8\u91ca<comments>` ) Lambda\u51fd\u6570 .. tip:: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570 \u5b9a\u4e49: \u4e0e\u8bed\u53e5\u76f8\u53cd, lambda\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u5b9a\u4e49\u533f\u540d\u51fd\u6570. \u5e38\u7528\u4e8e\u4e3a map() \u548c filter() \u4e4b\u7c7b\u7684\u9ad8\u9636\u51fd\u6570\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\u6216\u8005\u64cd\u4f5c\u7b26. \u4f18\u70b9: \u65b9\u4fbf. \u7f3a\u70b9: \u6bd4\u672c\u5730\u51fd\u6570\u66f4\u96be\u9605\u8bfb\u548c\u8c03\u8bd5. \u6ca1\u6709\u51fd\u6570\u540d\u610f\u5473\u7740\u5806\u6808\u8ddf\u8e2a\u66f4\u96be\u7406\u89e3. \u7531\u4e8elambda\u51fd\u6570\u901a\u5e38\u53ea\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f, \u56e0\u6b64\u5176\u8868\u8fbe\u80fd\u529b\u6709\u9650. \u7ed3\u8bba: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570. \u5982\u679c\u4ee3\u7801\u8d85\u8fc760-80\u4e2a\u5b57\u7b26, \u6700\u597d\u8fd8\u662f\u5b9a\u4e49\u6210\u5e38\u89c4(\u5d4c\u5957)\u51fd\u6570. \u5bf9\u4e8e\u5e38\u89c1\u7684\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\u4e58\u6cd5\u64cd\u4f5c\u7b26\uff0c\u4f7f\u7528 ``operator`` \u6a21\u5757\u4e2d\u7684\u51fd\u6570\u4ee5\u4ee3\u66fflambda\u51fd\u6570. \u4f8b\u5982, \u63a8\u8350\u4f7f\u7528 ``operator.mul`` , \u800c\u4e0d\u662f ``lambda x, y: x * y`` . \u6761\u4ef6\u8868\u8fbe\u5f0f .. tip:: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570 \u5b9a\u4e49: \u6761\u4ef6\u8868\u8fbe\u5f0f\u662f\u5bf9\u4e8eif\u8bed\u53e5\u7684\u4e00\u79cd\u66f4\u4e3a\u7b80\u77ed\u7684\u53e5\u6cd5\u89c4\u5219. \u4f8b\u5982: x = 1 if cond else 2 . \u4f18\u70b9: \u6bd4if\u8bed\u53e5\u66f4\u52a0\u7b80\u77ed\u548c\u65b9\u4fbf. \u7f3a\u70b9: \u6bd4if\u8bed\u53e5\u96be\u4e8e\u9605\u8bfb. \u5982\u679c\u8868\u8fbe\u5f0f\u5f88\u957f\uff0c \u96be\u4e8e\u5b9a\u4f4d\u6761\u4ef6. \u7ed3\u8bba: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570. \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528\u5b8c\u6574\u7684if\u8bed\u53e5. \u9ed8\u8ba4\u53c2\u6570\u503c .. tip:: \u9002\u7528\u4e8e\u5927\u90e8\u5206\u60c5\u51b5. \u5b9a\u4e49: \u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u6307\u5b9a\u53d8\u91cf\u7684\u503c, \u4f8b\u5982, def foo(a, b = 0): . \u5982\u679c\u8c03\u7528foo\u65f6\u53ea\u5e26\u4e00\u4e2a\u53c2\u6570, \u5219b\u88ab\u8bbe\u4e3a0. \u5982\u679c\u5e26\u4e24\u4e2a\u53c2\u6570, \u5219b\u7684\u503c\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u4f18\u70b9: \u4f60\u7ecf\u5e38\u4f1a\u78b0\u5230\u4e00\u4e9b\u4f7f\u7528\u5927\u91cf\u9ed8\u8ba4\u503c\u7684\u51fd\u6570, \u4f46\u5076\u5c14(\u6bd4\u8f83\u5c11\u89c1)\u4f60\u60f3\u8981\u8986\u76d6\u8fd9\u4e9b\u9ed8\u8ba4\u503c. \u9ed8\u8ba4\u53c2\u6570\u503c\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u8fd9\u4ef6\u4e8b, \u4f60\u4e0d\u9700\u8981\u4e3a\u8fd9\u4e9b\u7f55\u89c1\u7684\u4f8b\u5916\u5b9a\u4e49\u5927\u91cf\u51fd\u6570. \u540c\u65f6, Python\u4e5f\u4e0d\u652f\u6301\u91cd\u8f7d\u65b9\u6cd5\u548c\u51fd\u6570, \u9ed8\u8ba4\u53c2\u6570\u662f\u4e00\u79cd\"\u4eff\u9020\"\u91cd\u8f7d\u884c\u4e3a\u7684\u7b80\u5355\u65b9\u5f0f. \u7f3a\u70b9: \u9ed8\u8ba4\u53c2\u6570\u53ea\u5728\u6a21\u5757\u52a0\u8f7d\u65f6\u6c42\u503c\u4e00\u6b21. \u5982\u679c\u53c2\u6570\u662f\u5217\u8868\u6216\u5b57\u5178\u4e4b\u7c7b\u7684\u53ef\u53d8\u7c7b\u578b, \u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898. \u5982\u679c\u51fd\u6570\u4fee\u6539\u4e86\u5bf9\u8c61(\u4f8b\u5982\u5411\u5217\u8868\u8ffd\u52a0\u9879), \u9ed8\u8ba4\u503c\u5c31\u88ab\u4fee\u6539\u4e86. \u7ed3\u8bba: \u9f13\u52b1\u4f7f\u7528, \u4e0d\u8fc7\u6709\u5982\u4e0b\u6ce8\u610f\u4e8b\u9879: \u4e0d\u8981\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u4f7f\u7528\u53ef\u53d8\u5bf9\u8c61\u4f5c\u4e3a\u9ed8\u8ba4\u503c. .. code-block:: python Yes: def foo(a, b=None): if b is None: b = [] .. code-block:: python No: def foo(a, b=[]): ... No: def foo(a, b=time.time()): # The time the module was loaded??? ... No: def foo(a, b=FLAGS.my_thing): # sys.argv has not yet been parsed... ... \u5c5e\u6027(properties) .. tip:: \u8bbf\u95ee\u548c\u8bbe\u7f6e\u6570\u636e\u6210\u5458\u65f6, \u4f60\u901a\u5e38\u4f1a\u4f7f\u7528\u7b80\u5355, \u8f7b\u91cf\u7ea7\u7684\u8bbf\u95ee\u548c\u8bbe\u7f6e\u51fd\u6570. \u5efa\u8bae\u7528\u5c5e\u6027\uff08properties\uff09\u6765\u4ee3\u66ff\u5b83\u4eec. \u5b9a\u4e49: \u4e00\u79cd\u7528\u4e8e\u5305\u88c5\u65b9\u6cd5\u8c03\u7528\u7684\u65b9\u5f0f. \u5f53\u8fd0\u7b97\u91cf\u4e0d\u5927, \u5b83\u662f\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027(attribute)\u7684\u6807\u51c6\u65b9\u5f0f. \u4f18\u70b9: \u901a\u8fc7\u6d88\u9664\u7b80\u5355\u7684\u5c5e\u6027(attribute)\u8bbf\u95ee\u65f6\u663e\u5f0f\u7684get\u548cset\u65b9\u6cd5\u8c03\u7528, \u53ef\u8bfb\u6027\u63d0\u9ad8\u4e86. \u5141\u8bb8\u61d2\u60f0\u7684\u8ba1\u7b97. \u7528Pythonic\u7684\u65b9\u5f0f\u6765\u7ef4\u62a4\u7c7b\u7684\u63a5\u53e3. \u5c31\u6027\u80fd\u800c\u8a00, \u5f53\u76f4\u63a5\u8bbf\u95ee\u53d8\u91cf\u662f\u5408\u7406\u7684, \u6dfb\u52a0\u8bbf\u95ee\u65b9\u6cd5\u5c31\u663e\u5f97\u7410\u788e\u800c\u65e0\u610f\u4e49. \u4f7f\u7528\u5c5e\u6027(properties)\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898. \u5c06\u6765\u4e5f\u53ef\u4ee5\u5728\u4e0d\u7834\u574f\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\u5c06\u8bbf\u95ee\u65b9\u6cd5\u52a0\u4e0a. \u7f3a\u70b9: \u5c5e\u6027(properties)\u662f\u5728get\u548cset\u65b9\u6cd5\u58f0\u660e\u540e\u6307\u5b9a, \u8fd9\u9700\u8981\u4f7f\u7528\u8005\u5728\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u4e2d\u6ce8\u610f: set\u548cget\u662f\u7528\u4e8e\u5c5e\u6027(properties)\u7684(\u9664\u4e86\u7528 @property \u88c5\u9970\u5668\u521b\u5efa\u7684\u53ea\u8bfb\u5c5e\u6027). \u5fc5\u987b\u7ee7\u627f\u81eaobject\u7c7b. \u53ef\u80fd\u9690\u85cf\u6bd4\u5982\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4e4b\u7c7b\u7684\u526f\u4f5c\u7528. \u7ee7\u627f\u65f6\u53ef\u80fd\u4f1a\u8ba9\u4eba\u56f0\u60d1. \u7ed3\u8bba: \u4f60\u901a\u5e38\u4e60\u60ef\u4e8e\u4f7f\u7528\u8bbf\u95ee\u6216\u8bbe\u7f6e\u65b9\u6cd5\u6765\u8bbf\u95ee\u6216\u8bbe\u7f6e\u6570\u636e, \u5b83\u4eec\u7b80\u5355\u800c\u8f7b\u91cf. \u4e0d\u8fc7\u6211\u4eec\u5efa\u8bae\u4f60\u5728\u65b0\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u5c5e\u6027. \u53ea\u8bfb\u5c5e\u6027\u5e94\u8be5\u7528 @property \u88c5\u9970\u5668 <http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Function_and_Method_Decorators> _ \u6765\u521b\u5efa. \u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u8986\u76d6\u5c5e\u6027, \u90a3\u4e48\u5c5e\u6027\u7684\u7ee7\u627f\u53ef\u80fd\u770b\u4e0a\u53bb\u4e0d\u660e\u663e. \u56e0\u6b64\u4f7f\u7528\u8005\u5fc5\u987b\u786e\u4fdd\u8bbf\u95ee\u65b9\u6cd5\u95f4\u63a5\u88ab\u8c03\u7528, \u4ee5\u4fdd\u8bc1\u5b50\u7c7b\u4e2d\u7684\u91cd\u8f7d\u65b9\u6cd5\u88ab\u5c5e\u6027\u8c03\u7528(\u4f7f\u7528\u6a21\u677f\u65b9\u6cd5\u8bbe\u8ba1\u6a21\u5f0f). .. code-block:: python Yes: import math class Square(object): \"\"\"A square with two properties: a writable area and a read-only perimeter. To use: >>> sq = Square(3) >>> sq.area 9 >>> sq.perimeter 12 >>> sq.area = 16 >>> sq.side 4 >>> sq.perimeter 16 \"\"\" def __init__(self, side): self.side = side def __get_area(self): \"\"\"Calculates the 'area' property.\"\"\" return self.side ** 2 def ___get_area(self): \"\"\"Indirect accessor for 'area' property.\"\"\" return self.__get_area() def __set_area(self, area): \"\"\"Sets the 'area' property.\"\"\" self.side = math.sqrt(area) def ___set_area(self, area): \"\"\"Indirect setter for 'area' property.\"\"\" self._SetArea(area) area = property(___get_area, ___set_area, doc=\"\"\"Gets or sets the area of the square.\"\"\") @property def perimeter(self): return self.side * 4 (\u8bd1\u8005\u6ce8: \u8001\u5b9e\u8bf4, \u6211\u89c9\u5f97\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\u5f88\u4e0d\u6070\u5f53, \u6709\u5fc5\u8981\u8fd9\u4e48\u86cb\u75bc\u5417?) True/False\u7684\u6c42\u503c .. tip:: \u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0ffalse \u5b9a\u4e49: Python\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f1a\u5c06\u67d0\u4e9b\u503c\u6c42\u503c\u4e3afalse. \u6309\u7b80\u5355\u7684\u76f4\u89c9\u6765\u8bb2, \u5c31\u662f\u6240\u6709\u7684\"\u7a7a\"\u503c\u90fd\u88ab\u8ba4\u4e3a\u662ffalse. \u56e0\u6b640\uff0c None, [], {}, \"\" \u90fd\u88ab\u8ba4\u4e3a\u662ffalse. \u4f18\u70b9: \u4f7f\u7528Python\u5e03\u5c14\u503c\u7684\u6761\u4ef6\u8bed\u53e5\u66f4\u6613\u8bfb\u4e5f\u66f4\u4e0d\u6613\u72af\u9519. \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u4e5f\u66f4\u5feb. \u7f3a\u70b9: \u5bf9C/C++\u5f00\u53d1\u4eba\u5458\u6765\u8bf4, \u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u602a. \u7ed3\u8bba: \u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f\u7684false, \u4f8b\u5982: \u4f7f\u7528 if foo: \u800c\u4e0d\u662f if foo != []: . \u4e0d\u8fc7\u8fd8\u662f\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u9700\u8981\u4f60\u94ed\u8bb0\u5728\u5fc3: #. \u6c38\u8fdc\u4e0d\u8981\u7528==\u6216\u8005!=\u6765\u6bd4\u8f83\u5355\u4ef6, \u6bd4\u5982None. \u4f7f\u7528is\u6216\u8005is not. #. \u6ce8\u610f: \u5f53\u4f60\u5199\u4e0b ``if x:`` \u65f6, \u4f60\u5176\u5b9e\u8868\u793a\u7684\u662f ``if x is not None`` . \u4f8b\u5982: \u5f53\u4f60\u8981\u6d4b\u8bd5\u4e00\u4e2a\u9ed8\u8ba4\u503c\u662fNone\u7684\u53d8\u91cf\u6216\u53c2\u6570\u662f\u5426\u88ab\u8bbe\u4e3a\u5176\u5b83\u503c. \u8fd9\u4e2a\u503c\u5728\u5e03\u5c14\u8bed\u4e49\u4e0b\u53ef\u80fd\u662ffalse! #. \u6c38\u8fdc\u4e0d\u8981\u7528==\u5c06\u4e00\u4e2a\u5e03\u5c14\u91cf\u4e0efalse\u76f8\u6bd4\u8f83. \u4f7f\u7528 ``if not x:`` \u4ee3\u66ff. \u5982\u679c\u4f60\u9700\u8981\u533a\u5206false\u548cNone, \u4f60\u5e94\u8be5\u7528\u50cf ``if not x and x is not None:`` \u8fd9\u6837\u7684\u8bed\u53e5. #. \u5bf9\u4e8e\u5e8f\u5217(\u5b57\u7b26\u4e32, \u5217\u8868, \u5143\u7ec4), \u8981\u6ce8\u610f\u7a7a\u5e8f\u5217\u662ffalse. \u56e0\u6b64 ``if not seq:`` \u6216\u8005 ``if seq:`` \u6bd4 ``if len(seq):`` \u6216 ``if not len(seq):`` \u8981\u66f4\u597d. #. \u5904\u7406\u6574\u6570\u65f6, \u4f7f\u7528\u9690\u5f0ffalse\u53ef\u80fd\u4f1a\u5f97\u4e0d\u507f\u5931(\u5373\u4e0d\u5c0f\u5fc3\u5c06None\u5f53\u505a0\u6765\u5904\u7406). \u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5df2\u77e5\u662f\u6574\u578b(\u4e14\u4e0d\u662flen()\u7684\u8fd4\u56de\u7ed3\u679c)\u7684\u503c\u4e0e0\u6bd4\u8f83. .. code-block:: python Yes: if not users: print 'no users' if foo == 0: self.handle_zero() if i % 10 == 0: self.handle_multiple_of_ten() .. code-block:: python No: if len(users) == 0: print 'no users' if foo is not None and not foo: self.handle_zero() if not i % 10: self.handle_multiple_of_ten() #. \u6ce8\u610f'0'(\u5b57\u7b26\u4e32)\u4f1a\u88ab\u5f53\u505atrue. \u8fc7\u65f6\u7684\u8bed\u8a00\u7279\u6027 .. tip:: \u5c3d\u53ef\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u65b9\u6cd5\u53d6\u4ee3\u5b57\u7b26\u4e32\u6a21\u5757. \u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8bed\u6cd5\u53d6\u4ee3apply(). \u4f7f\u7528\u5217\u8868\u63a8\u5bfc, for\u5faa\u73af\u53d6\u4ee3filter(), map()\u4ee5\u53careduce(). \u5b9a\u4e49: \u5f53\u524d\u7248\u672c\u7684Python\u63d0\u4f9b\u4e86\u5927\u5bb6\u901a\u5e38\u66f4\u559c\u6b22\u7684\u66ff\u4ee3\u54c1. \u7ed3\u8bba: \u6211\u4eec\u4e0d\u4f7f\u7528\u4e0d\u652f\u6301\u8fd9\u4e9b\u7279\u6027\u7684Python\u7248\u672c, \u6240\u4ee5\u6ca1\u7406\u7531\u4e0d\u7528\u65b0\u7684\u65b9\u5f0f. .. code-block:: python Yes: words = foo.split(':') [x[1] for x in my_list if x[2] == 5] map(math.sqrt, data) # Ok. No inlined lambda expression. fn(*args, **kwargs) .. code-block:: python No: words = string.split(foo, ':') map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list)) apply(fn, args, kwargs) \u8bcd\u6cd5\u4f5c\u7528\u57df(Lexical Scoping) .. tip:: \u63a8\u8350\u4f7f\u7528 \u5b9a\u4e49: \u5d4c\u5957\u7684Python\u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5916\u5c42\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf, \u4f46\u662f\u4e0d\u80fd\u591f\u5bf9\u5b83\u4eec\u8d4b\u503c. \u53d8\u91cf\u7ed1\u5b9a\u7684\u89e3\u6790\u662f\u4f7f\u7528\u8bcd\u6cd5\u4f5c\u7528\u57df, \u4e5f\u5c31\u662f\u57fa\u4e8e\u9759\u6001\u7684\u7a0b\u5e8f\u6587\u672c. \u5bf9\u4e00\u4e2a\u5757\u4e2d\u7684\u67d0\u4e2a\u540d\u79f0\u7684\u4efb\u4f55\u8d4b\u503c\u90fd\u4f1a\u5bfc\u81f4Python\u5c06\u5bf9\u8be5\u540d\u79f0\u7684\u5168\u90e8\u5f15\u7528\u5f53\u505a\u5c40\u90e8\u53d8\u91cf, \u751a\u81f3\u662f\u8d4b\u503c\u524d\u7684\u5904\u7406. \u5982\u679c\u78b0\u5230global\u58f0\u660e, \u8be5\u540d\u79f0\u5c31\u4f1a\u88ab\u89c6\u4f5c\u5168\u5c40\u53d8\u91cf. \u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u7684\u4f8b\u5b50: .. code-block:: python def get_adder(summand1): \"\"\"Returns a function that adds numbers to a given number.\"\"\" def adder(summand2): return summand1 + summand2 return adder (\u8bd1\u8005\u6ce8: \u8fd9\u4e2a\u4f8b\u5b50\u6709\u70b9\u8be1\u5f02, \u4f60\u5e94\u8be5\u8fd9\u6837\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570: ``sum = get_adder(summand1)(summand2)`` ) \u4f18\u70b9: \u901a\u5e38\u53ef\u4ee5\u5e26\u6765\u66f4\u52a0\u6e05\u6670, \u4f18\u96c5\u7684\u4ee3\u7801. \u5c24\u5176\u4f1a\u8ba9\u6709\u7ecf\u9a8c\u7684Lisp\u548cScheme(\u8fd8\u6709Haskell, ML\u7b49)\u7a0b\u5e8f\u5458\u611f\u5230\u6b23\u6170. \u7f3a\u70b9: \u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u8ff7\u60d1\u7684bug. \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f9d\u636e PEP-0227 <http://www.python.org/dev/peps/pep-0227/> _ \u7684\u4f8b\u5b50: .. code-block:: python i = 4 def foo(x): def bar(): print i, # ... # A bunch of code here # ... for i in x: # Ah, i *is* local to Foo, so this is what Bar sees print i, bar() \u56e0\u6b64 ``foo([1, 2, 3])`` \u4f1a\u6253\u5370 ``1 2 3 3`` , \u4e0d\u662f ``1 2 3 4`` . (\u8bd1\u8005\u6ce8: x\u662f\u4e00\u4e2a\u5217\u8868, for\u5faa\u73af\u5176\u5b9e\u662f\u5c06x\u4e2d\u7684\u503c\u4f9d\u6b21\u8d4b\u7ed9i.\u8fd9\u6837\u5bf9i\u7684\u8d4b\u503c\u5c31\u9690\u5f0f\u7684\u53d1\u751f\u4e86, \u6574\u4e2afoo\u51fd\u6570\u4f53\u4e2d\u7684i\u90fd\u4f1a\u88ab\u5f53\u505a\u5c40\u90e8\u53d8\u91cf, \u5305\u62ecbar()\u4e2d\u7684\u90a3\u4e2a. \u8fd9\u4e00\u70b9\u4e0eC++\u4e4b\u7c7b\u7684\u9759\u6001\u8bed\u8a00\u8fd8\u662f\u6709\u5f88\u5927\u5dee\u522b\u7684.) \u7ed3\u8bba: \u9f13\u52b1\u4f7f\u7528. \u51fd\u6570\u4e0e\u65b9\u6cd5\u88c5\u9970\u5668 .. tip:: \u5982\u679c\u597d\u5904\u5f88\u663e\u7136, \u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668 \u5b9a\u4e49: \u7528\u4e8e\u51fd\u6570\u53ca\u65b9\u6cd5\u7684\u88c5\u9970\u5668 <https://docs.python.org/release/2.4.3/whatsnew/node6.html> _ (\u4e5f\u5c31\u662f@\u6807\u8bb0). \u6700\u5e38\u89c1\u7684\u88c5\u9970\u5668\u662f@classmethod \u548c@staticmethod, \u7528\u4e8e\u5c06\u5e38\u89c4\u51fd\u6570\u8f6c\u6362\u6210\u7c7b\u65b9\u6cd5\u6216\u9759\u6001\u65b9\u6cd5. \u4e0d\u8fc7, \u88c5\u9970\u5668\u8bed\u6cd5\u4e5f\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u88c5\u9970\u5668. \u7279\u522b\u5730, \u5bf9\u4e8e\u67d0\u4e2a\u51fd\u6570 my_decorator , \u4e0b\u9762\u7684\u4e24\u6bb5\u4ee3\u7801\u662f\u7b49\u6548\u7684: .. code-block:: python class C(object): @my_decorator def method(self): # method body ... .. code-block:: python class C(object): def method(self): # method body ... method = my_decorator(method) \u4f18\u70b9: \u4f18\u96c5\u7684\u5728\u51fd\u6570\u4e0a\u6307\u5b9a\u4e00\u4e9b\u8f6c\u6362. \u8be5\u8f6c\u6362\u53ef\u80fd\u51cf\u5c11\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801, \u4fdd\u6301\u5df2\u6709\u51fd\u6570\u4e0d\u53d8(enforce invariants), \u7b49. \u7f3a\u70b9: \u88c5\u9970\u5668\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4e0a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c, \u8fd9\u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u60ca\u5f02\u7684\u9690\u85cf\u884c\u4e3a. \u800c\u4e14, \u88c5\u9970\u5668\u5728\u5bfc\u5165\u65f6\u6267\u884c. \u4ece\u88c5\u9970\u5668\u4ee3\u7801\u7684\u5931\u8d25\u4e2d\u6062\u590d\u66f4\u52a0\u4e0d\u53ef\u80fd. \u7ed3\u8bba: \u5982\u679c\u597d\u5904\u5f88\u663e\u7136, \u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668. \u88c5\u9970\u5668\u5e94\u8be5\u9075\u5b88\u548c\u51fd\u6570\u4e00\u6837\u7684\u5bfc\u5165\u548c\u547d\u540d\u89c4\u5219. \u88c5\u9970\u5668\u7684python\u6587\u6863\u5e94\u8be5\u6e05\u6670\u7684\u8bf4\u660e\u8be5\u51fd\u6570\u662f\u4e00\u4e2a\u88c5\u9970\u5668. \u8bf7\u4e3a\u88c5\u9970\u5668\u7f16\u5199\u5355\u5143\u6d4b\u8bd5. \u907f\u514d\u88c5\u9970\u5668\u81ea\u8eab\u5bf9\u5916\u754c\u7684\u4f9d\u8d56(\u5373\u4e0d\u8981\u4f9d\u8d56\u4e8e\u6587\u4ef6, socket, \u6570\u636e\u5e93\u8fde\u63a5\u7b49), \u56e0\u4e3a\u88c5\u9970\u5668\u8fd0\u884c\u65f6\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u4e0d\u53ef\u7528(\u7531 ``pydoc`` \u6216\u5176\u5b83\u5de5\u5177\u5bfc\u5165). \u5e94\u8be5\u4fdd\u8bc1\u4e00\u4e2a\u7528\u6709\u6548\u53c2\u6570\u8c03\u7528\u7684\u88c5\u9970\u5668\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u6210\u529f\u7684. \u88c5\u9970\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684\"\u9876\u7ea7\u4ee3\u7801\". \u53c2\u8003\u540e\u9762\u5173\u4e8e :ref:`Main <main>` \u7684\u8bdd\u9898. \u7ebf\u7a0b .. tip:: \u4e0d\u8981\u4f9d\u8d56\u5185\u5efa\u7c7b\u578b\u7684\u539f\u5b50\u6027. \u867d\u7136Python\u7684\u5185\u5efa\u7c7b\u578b\u4f8b\u5982\u5b57\u5178\u770b\u4e0a\u53bb\u62e5\u6709\u539f\u5b50\u64cd\u4f5c, \u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u5f62\u4e0b\u5b83\u4eec\u4ecd\u7136\u4e0d\u662f\u539f\u5b50\u7684(\u5373: \u5982\u679c__hash__\u6216__eq__\u88ab\u5b9e\u73b0\u4e3aPython\u65b9\u6cd5)\u4e14\u5b83\u4eec\u7684\u539f\u5b50\u6027\u662f\u9760\u4e0d\u4f4f\u7684. \u4f60\u4e5f\u4e0d\u80fd\u6307\u671b\u539f\u5b50\u53d8\u91cf\u8d4b\u503c(\u56e0\u4e3a\u8fd9\u4e2a\u53cd\u8fc7\u6765\u4f9d\u8d56\u5b57\u5178). \u4f18\u5148\u4f7f\u7528Queue\u6a21\u5757\u7684 Queue \u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u901a\u4fe1\u65b9\u5f0f. \u53e6\u5916, \u4f7f\u7528threading\u6a21\u5757\u53ca\u5176\u9501\u539f\u8bed(locking primitives). \u4e86\u89e3\u6761\u4ef6\u53d8\u91cf\u7684\u5408\u9002\u4f7f\u7528\u65b9\u5f0f, \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 threading.Condition \u6765\u53d6\u4ee3\u4f4e\u7ea7\u522b\u7684\u9501\u4e86. \u5a01\u529b\u8fc7\u5927\u7684\u7279\u6027 .. tip:: \u907f\u514d\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027 \u5b9a\u4e49: Python\u662f\u4e00\u79cd\u5f02\u5e38\u7075\u6d3b\u7684\u8bed\u8a00, \u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f88\u591a\u82b1\u54e8\u7684\u7279\u6027, \u8bf8\u5982\u5143\u7c7b(metaclasses), \u5b57\u8282\u7801\u8bbf\u95ee, \u4efb\u610f\u7f16\u8bd1(on-the-fly compilation), \u52a8\u6001\u7ee7\u627f, \u5bf9\u8c61\u7236\u7c7b\u91cd\u5b9a\u4e49(object reparenting), \u5bfc\u5165\u9ed1\u5ba2(import hacks), \u53cd\u5c04, \u7cfb\u7edf\u5185\u4fee\u6539(modification of system internals), \u7b49\u7b49. \u4f18\u70b9: \u5f3a\u5927\u7684\u8bed\u8a00\u7279\u6027, \u80fd\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u7d27\u51d1. \u7f3a\u70b9: \u4f7f\u7528\u8fd9\u4e9b\u5f88\"\u9177\"\u7684\u7279\u6027\u5341\u5206\u8bf1\u4eba, \u4f46\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981. \u4f7f\u7528\u5947\u6280\u6deb\u5de7\u7684\u4ee3\u7801\u5c06\u66f4\u52a0\u96be\u4ee5\u9605\u8bfb\u548c\u8c03\u8bd5. \u5f00\u59cb\u53ef\u80fd\u8fd8\u597d(\u5bf9\u539f\u4f5c\u8005\u800c\u8a00), \u4f46\u5f53\u4f60\u56de\u987e\u4ee3\u7801, \u5b83\u4eec\u53ef\u80fd\u4f1a\u6bd4\u90a3\u4e9b\u7a0d\u957f\u4e00\u70b9\u4f46\u662f\u5f88\u76f4\u63a5\u7684\u4ee3\u7801\u66f4\u52a0\u96be\u4ee5\u7406\u89e3. \u7ed3\u8bba: \u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u907f\u514d\u8fd9\u4e9b\u7279\u6027.","title":"Python \u98ce\u683c\u6307\u5357"},{"location":"python_rules/#python","text":"","title":"Python\u8bed\u8a00\u89c4\u8303"},{"location":"python_rules/#lint","text":".. tip:: \u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884cpylint \u5b9a\u4e49: pylint\u662f\u4e00\u4e2a\u5728Python\u6e90\u4ee3\u7801\u4e2d\u67e5\u627ebug\u7684\u5de5\u5177. \u5bf9\u4e8eC\u548cC++\u8fd9\u6837\u7684\u4e0d\u90a3\u4e48\u52a8\u6001\u7684(\u8bd1\u8005\u6ce8: \u539f\u6587\u662fless dynamic)\u8bed\u8a00, \u8fd9\u4e9bbug\u901a\u5e38\u7531\u7f16\u8bd1\u5668\u6765\u6355\u83b7. \u7531\u4e8ePython\u7684\u52a8\u6001\u7279\u6027, \u6709\u4e9b\u8b66\u544a\u53ef\u80fd\u4e0d\u5bf9. \u4e0d\u8fc7\u4f2a\u544a\u8b66\u5e94\u8be5\u5f88\u5c11. \u4f18\u70b9: \u53ef\u4ee5\u6355\u83b7\u5bb9\u6613\u5ffd\u89c6\u7684\u9519\u8bef, \u4f8b\u5982\u8f93\u5165\u9519\u8bef, \u4f7f\u7528\u672a\u8d4b\u503c\u7684\u53d8\u91cf\u7b49. \u7f3a\u70b9: pylint\u4e0d\u5b8c\u7f8e. \u8981\u5229\u7528\u5176\u4f18\u52bf, \u6211\u4eec\u6709\u65f6\u4faf\u9700\u8981: a) \u56f4\u7ed5\u7740\u5b83\u6765\u5199\u4ee3\u7801 b) \u6291\u5236\u5176\u544a\u8b66 c) \u6539\u8fdb\u5b83, \u6216\u8005d) \u5ffd\u7565\u5b83. \u7ed3\u8bba: \u786e\u4fdd\u5bf9\u4f60\u7684\u4ee3\u7801\u8fd0\u884cpylint.\u6291\u5236\u4e0d\u51c6\u786e\u7684\u8b66\u544a,\u4ee5\u4fbf\u80fd\u591f\u5c06\u5176\u4ed6\u8b66\u544a\u66b4\u9732\u51fa\u6765\u3002 \u4f60\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u4e00\u4e2a\u884c\u6ce8\u91ca\u6765\u6291\u5236\u544a\u8b66. \u4f8b\u5982: .. code-block:: python dict = 'something awful' # Bad Idea... pylint: disable=redefined-builtin pylint\u8b66\u544a\u662f\u4ee5\u4e00\u4e2a\u6570\u5b57\u7f16\u53f7(\u5982 ``C0112`` )\u548c\u4e00\u4e2a\u7b26\u53f7\u540d(\u5982 ``empty-docstring`` )\u6765\u6807\u8bc6\u7684. \u5728\u7f16\u5199\u65b0\u4ee3\u7801\u6216\u66f4\u65b0\u5df2\u6709\u4ee3\u7801\u65f6\u5bf9\u544a\u8b66\u8fdb\u884c\u533b\u6cbb, \u63a8\u8350\u4f7f\u7528\u7b26\u53f7\u540d\u6765\u6807\u8bc6. \u5982\u679c\u8b66\u544a\u7684\u7b26\u53f7\u540d\u4e0d\u591f\u89c1\u540d\u77e5\u610f\uff0c\u90a3\u4e48\u8bf7\u5bf9\u5176\u589e\u52a0\u4e00\u4e2a\u8be6\u7ec6\u89e3\u91ca\u3002 \u91c7\u7528\u8fd9\u79cd\u6291\u5236\u65b9\u5f0f\u7684\u597d\u5904\u662f\u6211\u4eec\u53ef\u4ee5\u8f7b\u677e\u67e5\u627e\u6291\u5236\u5e76\u56de\u987e\u5b83\u4eec. \u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 ``pylint --list-msgs`` \u6765\u83b7\u53d6pylint\u544a\u8b66\u5217\u8868. \u4f60\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4 ``pylint --help-msg=C6409`` , \u4ee5\u83b7\u53d6\u5173\u4e8e\u7279\u5b9a\u6d88\u606f\u7684\u66f4\u591a\u4fe1\u606f. \u76f8\u6bd4\u8f83\u4e8e\u4e4b\u524d\u4f7f\u7528\u7684 ``pylint: disable-msg`` , \u672c\u6587\u63a8\u8350\u4f7f\u7528 ``pylint: disable`` . \u8981\u6291\u5236\"\u53c2\u6570\u672a\u4f7f\u7528\"\u544a\u8b66, \u4f60\u53ef\u4ee5\u7528\"_\"\u4f5c\u4e3a\u53c2\u6570\u6807\u8bc6\u7b26, \u6216\u8005\u5728\u53c2\u6570\u540d\u524d\u52a0\"unused\\_\". \u9047\u5230\u4e0d\u80fd\u6539\u53d8\u53c2\u6570\u540d\u7684\u60c5\u51b5, \u4f60\u53ef\u4ee5\u901a\u8fc7\u5728\u51fd\u6570\u5f00\u5934\"\u63d0\u5230\"\u5b83\u4eec\u6765\u6d88\u9664\u544a\u8b66. \u4f8b\u5982: .. code-block:: python def foo(a, unused_b, unused_c, d=None, e=None): _ = d, e return a","title":"Lint"},{"location":"python_rules/#_1","text":".. tip:: \u4ec5\u5bf9\u5305\u548c\u6a21\u5757\u4f7f\u7528\u5bfc\u5165 \u5b9a\u4e49: \u6a21\u5757\u95f4\u5171\u4eab\u4ee3\u7801\u7684\u91cd\u7528\u673a\u5236. \u4f18\u70b9: \u547d\u540d\u7a7a\u95f4\u7ba1\u7406\u7ea6\u5b9a\u5341\u5206\u7b80\u5355. \u6bcf\u4e2a\u6807\u8bc6\u7b26\u7684\u6e90\u90fd\u7528\u4e00\u79cd\u4e00\u81f4\u7684\u65b9\u5f0f\u6307\u793a. x.Obj\u8868\u793aObj\u5bf9\u8c61\u5b9a\u4e49\u5728\u6a21\u5757x\u4e2d. \u7f3a\u70b9: \u6a21\u5757\u540d\u4ecd\u53ef\u80fd\u51b2\u7a81. \u6709\u4e9b\u6a21\u5757\u540d\u592a\u957f, \u4e0d\u592a\u65b9\u4fbf. \u7ed3\u8bba: \u4f7f\u7528 import x \u6765\u5bfc\u5165\u5305\u548c\u6a21\u5757. \u4f7f\u7528 ``from x import y`` , \u5176\u4e2dx\u662f\u5305\u524d\u7f00, y\u662f\u4e0d\u5e26\u524d\u7f00\u7684\u6a21\u5757\u540d. \u4f7f\u7528 ``from x import y as z``, \u5982\u679c\u4e24\u4e2a\u8981\u5bfc\u5165\u7684\u6a21\u5757\u90fd\u53eb\u505ay\u6216\u8005y\u592a\u957f\u4e86. \u4f8b\u5982, \u6a21\u5757 ``sound.effects.echo`` \u53ef\u4ee5\u7528\u5982\u4e0b\u65b9\u5f0f\u5bfc\u5165: .. code-block:: python from sound.effects import echo ... echo.EchoFilter(input, output, delay=0.7, atten=4) \u5bfc\u5165\u65f6\u4e0d\u8981\u4f7f\u7528\u76f8\u5bf9\u540d\u79f0. \u5373\u4f7f\u6a21\u5757\u5728\u540c\u4e00\u4e2a\u5305\u4e2d, \u4e5f\u8981\u4f7f\u7528\u5b8c\u6574\u5305\u540d. \u8fd9\u80fd\u5e2e\u52a9\u4f60\u907f\u514d\u65e0\u610f\u95f4\u5bfc\u5165\u4e00\u4e2a\u5305\u4e24\u6b21.","title":"\u5bfc\u5165"},{"location":"python_rules/#_2","text":".. tip:: \u4f7f\u7528\u6a21\u5757\u7684\u5168\u8def\u5f84\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757 \u4f18\u70b9: \u907f\u514d\u6a21\u5757\u540d\u51b2\u7a81. \u67e5\u627e\u5305\u66f4\u5bb9\u6613. \u7f3a\u70b9: \u90e8\u7f72\u4ee3\u7801\u53d8\u96be, \u56e0\u4e3a\u4f60\u5fc5\u987b\u590d\u5236\u5305\u5c42\u6b21. \u7ed3\u8bba: \u6240\u6709\u7684\u65b0\u4ee3\u7801\u90fd\u5e94\u8be5\u7528\u5b8c\u6574\u5305\u540d\u6765\u5bfc\u5165\u6bcf\u4e2a\u6a21\u5757. \u5e94\u8be5\u50cf\u4e0b\u9762\u8fd9\u6837\u5bfc\u5165: .. code-block:: python # Reference in code with complete name. import sound.effects.echo # Reference in code with just module name (preferred). from sound.effects import echo","title":"\u5305"},{"location":"python_rules/#_3","text":".. tip:: \u5141\u8bb8\u4f7f\u7528\u5f02\u5e38, \u4f46\u5fc5\u987b\u5c0f\u5fc3 \u5b9a\u4e49: \u5f02\u5e38\u662f\u4e00\u79cd\u8df3\u51fa\u4ee3\u7801\u5757\u7684\u6b63\u5e38\u63a7\u5236\u6d41\u6765\u5904\u7406\u9519\u8bef\u6216\u8005\u5176\u5b83\u5f02\u5e38\u6761\u4ef6\u7684\u65b9\u5f0f. \u4f18\u70b9: \u6b63\u5e38\u64cd\u4f5c\u4ee3\u7801\u7684\u63a7\u5236\u6d41\u4e0d\u4f1a\u548c\u9519\u8bef\u5904\u7406\u4ee3\u7801\u6df7\u5728\u4e00\u8d77. \u5f53\u67d0\u79cd\u6761\u4ef6\u53d1\u751f\u65f6, \u5b83\u4e5f\u5141\u8bb8\u63a7\u5236\u6d41\u8df3\u8fc7\u591a\u4e2a\u6846\u67b6. \u4f8b\u5982, \u4e00\u6b65\u8df3\u51faN\u4e2a\u5d4c\u5957\u7684\u51fd\u6570, \u800c\u4e0d\u5fc5\u7ee7\u7eed\u6267\u884c\u9519\u8bef\u7684\u4ee3\u7801. \u7f3a\u70b9: \u53ef\u80fd\u4f1a\u5bfc\u81f4\u8ba9\u4eba\u56f0\u60d1\u7684\u63a7\u5236\u6d41. \u8c03\u7528\u5e93\u65f6\u5bb9\u6613\u9519\u8fc7\u9519\u8bef\u60c5\u51b5. \u7ed3\u8bba: \u5f02\u5e38\u5fc5\u987b\u9075\u5b88\u7279\u5b9a\u6761\u4ef6: #. \u50cf\u8fd9\u6837\u89e6\u53d1\u5f02\u5e38: ``raise MyException(\"Error message\")`` \u6216\u8005 ``raise MyException`` . \u4e0d\u8981\u4f7f\u7528\u4e24\u4e2a\u53c2\u6570\u7684\u5f62\u5f0f( ``raise MyException, \"Error message\"`` )\u6216\u8005\u8fc7\u65f6\u7684\u5b57\u7b26\u4e32\u5f02\u5e38( ``raise \"Error message\"`` ). #. \u6a21\u5757\u6216\u5305\u5e94\u8be5\u5b9a\u4e49\u81ea\u5df1\u7684\u7279\u5b9a\u57df\u7684\u5f02\u5e38\u57fa\u7c7b, \u8fd9\u4e2a\u57fa\u7c7b\u5e94\u8be5\u4ece\u5185\u5efa\u7684Exception\u7c7b\u7ee7\u627f. \u6a21\u5757\u7684\u5f02\u5e38\u57fa\u7c7b\u5e94\u8be5\u53eb\u505a\"Error\". .. code-block:: python class Error(Exception): pass #. \u6c38\u8fdc\u4e0d\u8981\u4f7f\u7528 ``except:`` \u8bed\u53e5\u6765\u6355\u83b7\u6240\u6709\u5f02\u5e38, \u4e5f\u4e0d\u8981\u6355\u83b7 ``Exception`` \u6216\u8005 ``StandardError`` , \u9664\u975e\u4f60\u6253\u7b97\u91cd\u65b0\u89e6\u53d1\u8be5\u5f02\u5e38, \u6216\u8005\u4f60\u5df2\u7ecf\u5728\u5f53\u524d\u7ebf\u7a0b\u7684\u6700\u5916\u5c42(\u8bb0\u5f97\u8fd8\u662f\u8981\u6253\u5370\u4e00\u6761\u9519\u8bef\u6d88\u606f). \u5728\u5f02\u5e38\u8fd9\u65b9\u9762, Python\u975e\u5e38\u5bbd\u5bb9, ``except:`` \u771f\u7684\u4f1a\u6355\u83b7\u5305\u62ecPython\u8bed\u6cd5\u9519\u8bef\u5728\u5185\u7684\u4efb\u4f55\u9519\u8bef. \u4f7f\u7528 ``except:`` \u5f88\u5bb9\u6613\u9690\u85cf\u771f\u6b63\u7684bug. #. \u5c3d\u91cf\u51cf\u5c11try/except\u5757\u4e2d\u7684\u4ee3\u7801\u91cf. try\u5757\u7684\u4f53\u79ef\u8d8a\u5927, \u671f\u671b\u4e4b\u5916\u7684\u5f02\u5e38\u5c31\u8d8a\u5bb9\u6613\u88ab\u89e6\u53d1. \u8fd9\u79cd\u60c5\u51b5\u4e0b, try/except\u5757\u5c06\u9690\u85cf\u771f\u6b63\u7684\u9519\u8bef. #. \u4f7f\u7528finally\u5b50\u53e5\u6765\u6267\u884c\u90a3\u4e9b\u65e0\u8bbatry\u5757\u4e2d\u6709\u6ca1\u6709\u5f02\u5e38\u90fd\u5e94\u8be5\u88ab\u6267\u884c\u7684\u4ee3\u7801. \u8fd9\u5bf9\u4e8e\u6e05\u7406\u8d44\u6e90\u5e38\u5e38\u5f88\u6709\u7528, \u4f8b\u5982\u5173\u95ed\u6587\u4ef6. #. \u5f53\u6355\u83b7\u5f02\u5e38\u65f6, \u4f7f\u7528 ``as`` \u800c\u4e0d\u8981\u7528\u9017\u53f7. \u4f8b\u5982 .. code-block:: python try: raise Error except Error as error: pass","title":"\u5f02\u5e38"},{"location":"python_rules/#_4","text":".. tip:: \u907f\u514d\u5168\u5c40\u53d8\u91cf \u5b9a\u4e49: \u5b9a\u4e49\u5728\u6a21\u5757\u7ea7\u7684\u53d8\u91cf. \u4f18\u70b9: \u5076\u5c14\u6709\u7528. \u7f3a\u70b9: \u5bfc\u5165\u65f6\u53ef\u80fd\u6539\u53d8\u6a21\u5757\u884c\u4e3a, \u56e0\u4e3a\u5bfc\u5165\u6a21\u5757\u65f6\u4f1a\u5bf9\u6a21\u5757\u7ea7\u53d8\u91cf\u8d4b\u503c. \u7ed3\u8bba: \u907f\u514d\u4f7f\u7528\u5168\u5c40\u53d8\u91cf, \u7528\u7c7b\u53d8\u91cf\u6765\u4ee3\u66ff. \u4f46\u4e5f\u6709\u4e00\u4e9b\u4f8b\u5916: #. \u811a\u672c\u7684\u9ed8\u8ba4\u9009\u9879. #. \u6a21\u5757\u7ea7\u5e38\u91cf. \u4f8b\u5982:\u3000PI = 3.14159. \u5e38\u91cf\u5e94\u8be5\u5168\u5927\u5199, \u7528\u4e0b\u5212\u7ebf\u8fde\u63a5. #. \u6709\u65f6\u5019\u7528\u5168\u5c40\u53d8\u91cf\u6765\u7f13\u5b58\u503c\u6216\u8005\u4f5c\u4e3a\u51fd\u6570\u8fd4\u56de\u503c\u5f88\u6709\u7528. #. \u5982\u679c\u9700\u8981, \u5168\u5c40\u53d8\u91cf\u5e94\u8be5\u4ec5\u5728\u6a21\u5757\u5185\u90e8\u53ef\u7528, \u5e76\u901a\u8fc7\u6a21\u5757\u7ea7\u7684\u516c\u5171\u51fd\u6570\u6765\u8bbf\u95ee.","title":"\u5168\u5c40\u53d8\u91cf"},{"location":"python_rules/#_5","text":".. tip:: \u9f13\u52b1\u4f7f\u7528\u5d4c\u5957/\u672c\u5730/\u5185\u90e8\u7c7b\u6216\u51fd\u6570 \u5b9a\u4e49: \u7c7b\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5, \u51fd\u6570\u6216\u8005\u7c7b\u4e2d. \u51fd\u6570\u53ef\u4ee5\u5b9a\u4e49\u5728\u65b9\u6cd5\u6216\u51fd\u6570\u4e2d. \u5c01\u95ed\u533a\u95f4\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf\u5bf9\u5d4c\u5957\u51fd\u6570\u662f\u53ea\u8bfb\u7684. \u4f18\u70b9: \u5141\u8bb8\u5b9a\u4e49\u4ec5\u7528\u4e8e\u6709\u6548\u8303\u56f4\u7684\u5de5\u5177\u7c7b\u548c\u51fd\u6570. \u7f3a\u70b9: \u5d4c\u5957\u7c7b\u6216\u5c40\u90e8\u7c7b\u7684\u5b9e\u4f8b\u4e0d\u80fd\u5e8f\u5217\u5316(pickled). \u7ed3\u8bba: \u63a8\u8350\u4f7f\u7528.","title":"\u5d4c\u5957/\u5c40\u90e8/\u5185\u90e8\u7c7b\u6216\u51fd\u6570"},{"location":"python_rules/#list-comprehensions","text":".. tip:: \u53ef\u4ee5\u5728\u7b80\u5355\u60c5\u51b5\u4e0b\u4f7f\u7528 \u5b9a\u4e49: \u5217\u8868\u63a8\u5bfc(list comprehensions)\u4e0e\u751f\u6210\u5668\u8868\u8fbe\u5f0f(generator expression)\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u9ad8\u6548\u7684\u65b9\u5f0f\u6765\u521b\u5efa\u5217\u8868\u548c\u8fed\u4ee3\u5668, \u800c\u4e0d\u5fc5\u501f\u52a9map(), filter(), \u6216\u8005lambda. \u4f18\u70b9: \u7b80\u5355\u7684\u5217\u8868\u63a8\u5bfc\u53ef\u4ee5\u6bd4\u5176\u5b83\u7684\u5217\u8868\u521b\u5efa\u65b9\u6cd5\u66f4\u52a0\u6e05\u6670\u7b80\u5355. \u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u4ee5\u5341\u5206\u9ad8\u6548, \u56e0\u4e3a\u5b83\u4eec\u907f\u514d\u4e86\u521b\u5efa\u6574\u4e2a\u5217\u8868. \u7f3a\u70b9: \u590d\u6742\u7684\u5217\u8868\u63a8\u5bfc\u6216\u8005\u751f\u6210\u5668\u8868\u8fbe\u5f0f\u53ef\u80fd\u96be\u4ee5\u9605\u8bfb. \u7ed3\u8bba: \u9002\u7528\u4e8e\u7b80\u5355\u60c5\u51b5. \u6bcf\u4e2a\u90e8\u5206\u5e94\u8be5\u5355\u72ec\u7f6e\u4e8e\u4e00\u884c: \u6620\u5c04\u8868\u8fbe\u5f0f, for\u8bed\u53e5, \u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f. \u7981\u6b62\u591a\u91cdfor\u8bed\u53e5\u6216\u8fc7\u6ee4\u5668\u8868\u8fbe\u5f0f. \u590d\u6742\u60c5\u51b5\u4e0b\u8fd8\u662f\u4f7f\u7528\u5faa\u73af. .. code-block:: python Yes: result = [] for x in range(10): for y in range(5): if x * y > 10: result.append((x, y)) for x in xrange(5): for y in xrange(5): if x != y: for z in xrange(5): if y != z: yield (x, y, z) return ((x, complicated_transform(x)) for x in long_generator_function(parameter) if x is not None) squares = [x * x for x in range(10)] eat(jelly_bean for jelly_bean in jelly_beans if jelly_bean.color == 'black') .. code-block:: python No: result = [(x, y) for x in range(10) for y in range(5) if x * y > 10] return ((x, y, z) for x in xrange(5) for y in xrange(5) if x != y for z in xrange(5) if y != z)","title":"\u5217\u8868\u63a8\u5bfc(List Comprehensions)"},{"location":"python_rules/#_6","text":".. tip:: \u5982\u679c\u7c7b\u578b\u652f\u6301, \u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26. \u6bd4\u5982\u5217\u8868, \u5b57\u5178\u53ca\u6587\u4ef6\u7b49. \u5b9a\u4e49: \u5bb9\u5668\u7c7b\u578b, \u50cf\u5b57\u5178\u548c\u5217\u8868, \u5b9a\u4e49\u4e86\u9ed8\u8ba4\u7684\u8fed\u4ee3\u5668\u548c\u5173\u7cfb\u6d4b\u8bd5\u64cd\u4f5c\u7b26(in\u548cnot in) \u4f18\u70b9: \u9ed8\u8ba4\u64cd\u4f5c\u7b26\u548c\u8fed\u4ee3\u5668\u7b80\u5355\u9ad8\u6548, \u5b83\u4eec\u76f4\u63a5\u8868\u8fbe\u4e86\u64cd\u4f5c, \u6ca1\u6709\u989d\u5916\u7684\u65b9\u6cd5\u8c03\u7528. \u4f7f\u7528\u9ed8\u8ba4\u64cd\u4f5c\u7b26\u7684\u51fd\u6570\u662f\u901a\u7528\u7684. \u5b83\u53ef\u4ee5\u7528\u4e8e\u652f\u6301\u8be5\u64cd\u4f5c\u7684\u4efb\u4f55\u7c7b\u578b. \u7f3a\u70b9: \u4f60\u6ca1\u6cd5\u901a\u8fc7\u9605\u8bfb\u65b9\u6cd5\u540d\u6765\u533a\u5206\u5bf9\u8c61\u7684\u7c7b\u578b(\u4f8b\u5982, has_key()\u610f\u5473\u7740\u5b57\u5178). \u4e0d\u8fc7\u8fd9\u4e5f\u662f\u4f18\u70b9. \u7ed3\u8bba: \u5982\u679c\u7c7b\u578b\u652f\u6301, \u5c31\u4f7f\u7528\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26, \u4f8b\u5982\u5217\u8868, \u5b57\u5178\u548c\u6587\u4ef6. \u5185\u5efa\u7c7b\u578b\u4e5f\u5b9a\u4e49\u4e86\u8fed\u4ee3\u5668\u65b9\u6cd5. \u4f18\u5148\u8003\u8651\u8fd9\u4e9b\u65b9\u6cd5, \u800c\u4e0d\u662f\u90a3\u4e9b\u8fd4\u56de\u5217\u8868\u7684\u65b9\u6cd5. \u5f53\u7136\uff0c\u8fd9\u6837\u904d\u5386\u5bb9\u5668\u65f6\uff0c\u4f60\u5c06\u4e0d\u80fd\u4fee\u6539\u5bb9\u5668. .. code-block:: python Yes: for key in adict: ... if key not in adict: ... if obj in alist: ... for line in afile: ... for k, v in dict.iteritems(): ... .. code-block:: python No: for key in adict.keys(): ... if not adict.has_key(key): ... for line in afile.readlines(): ...","title":"\u9ed8\u8ba4\u8fed\u4ee3\u5668\u548c\u64cd\u4f5c\u7b26"},{"location":"python_rules/#_7","text":".. tip:: \u6309\u9700\u4f7f\u7528\u751f\u6210\u5668. \u5b9a\u4e49: \u6240\u8c13\u751f\u6210\u5668\u51fd\u6570, \u5c31\u662f\u6bcf\u5f53\u5b83\u6267\u884c\u4e00\u6b21\u751f\u6210(yield)\u8bed\u53e5, \u5b83\u5c31\u8fd4\u56de\u4e00\u4e2a\u8fed\u4ee3\u5668, \u8fd9\u4e2a\u8fed\u4ee3\u5668\u751f\u6210\u4e00\u4e2a\u503c. \u751f\u6210\u503c\u540e, \u751f\u6210\u5668\u51fd\u6570\u7684\u8fd0\u884c\u72b6\u6001\u5c06\u88ab\u6302\u8d77, \u76f4\u5230\u4e0b\u4e00\u6b21\u751f\u6210. \u4f18\u70b9: \u7b80\u5316\u4ee3\u7801, \u56e0\u4e3a\u6bcf\u6b21\u8c03\u7528\u65f6, \u5c40\u90e8\u53d8\u91cf\u548c\u63a7\u5236\u6d41\u7684\u72b6\u6001\u90fd\u4f1a\u88ab\u4fdd\u5b58. \u6bd4\u8d77\u4e00\u6b21\u521b\u5efa\u4e00\u7cfb\u5217\u503c\u7684\u51fd\u6570, \u751f\u6210\u5668\u4f7f\u7528\u7684\u5185\u5b58\u66f4\u5c11. \u7f3a\u70b9: \u6ca1\u6709. \u7ed3\u8bba: \u9f13\u52b1\u4f7f\u7528. \u6ce8\u610f\u5728\u751f\u6210\u5668\u51fd\u6570\u7684\u6587\u6863\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528\"Yields:\"\u800c\u4e0d\u662f\"Returns:\". (\u8bd1\u8005\u6ce8: \u53c2\u770b :ref:`\u6ce8\u91ca<comments>` )","title":"\u751f\u6210\u5668"},{"location":"python_rules/#lambda","text":".. tip:: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570 \u5b9a\u4e49: \u4e0e\u8bed\u53e5\u76f8\u53cd, lambda\u5728\u4e00\u4e2a\u8868\u8fbe\u5f0f\u4e2d\u5b9a\u4e49\u533f\u540d\u51fd\u6570. \u5e38\u7528\u4e8e\u4e3a map() \u548c filter() \u4e4b\u7c7b\u7684\u9ad8\u9636\u51fd\u6570\u5b9a\u4e49\u56de\u8c03\u51fd\u6570\u6216\u8005\u64cd\u4f5c\u7b26. \u4f18\u70b9: \u65b9\u4fbf. \u7f3a\u70b9: \u6bd4\u672c\u5730\u51fd\u6570\u66f4\u96be\u9605\u8bfb\u548c\u8c03\u8bd5. \u6ca1\u6709\u51fd\u6570\u540d\u610f\u5473\u7740\u5806\u6808\u8ddf\u8e2a\u66f4\u96be\u7406\u89e3. \u7531\u4e8elambda\u51fd\u6570\u901a\u5e38\u53ea\u5305\u542b\u4e00\u4e2a\u8868\u8fbe\u5f0f, \u56e0\u6b64\u5176\u8868\u8fbe\u80fd\u529b\u6709\u9650. \u7ed3\u8bba: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570. \u5982\u679c\u4ee3\u7801\u8d85\u8fc760-80\u4e2a\u5b57\u7b26, \u6700\u597d\u8fd8\u662f\u5b9a\u4e49\u6210\u5e38\u89c4(\u5d4c\u5957)\u51fd\u6570. \u5bf9\u4e8e\u5e38\u89c1\u7684\u64cd\u4f5c\u7b26\uff0c\u4f8b\u5982\u4e58\u6cd5\u64cd\u4f5c\u7b26\uff0c\u4f7f\u7528 ``operator`` \u6a21\u5757\u4e2d\u7684\u51fd\u6570\u4ee5\u4ee3\u66fflambda\u51fd\u6570. \u4f8b\u5982, \u63a8\u8350\u4f7f\u7528 ``operator.mul`` , \u800c\u4e0d\u662f ``lambda x, y: x * y`` .","title":"Lambda\u51fd\u6570"},{"location":"python_rules/#_8","text":".. tip:: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570 \u5b9a\u4e49: \u6761\u4ef6\u8868\u8fbe\u5f0f\u662f\u5bf9\u4e8eif\u8bed\u53e5\u7684\u4e00\u79cd\u66f4\u4e3a\u7b80\u77ed\u7684\u53e5\u6cd5\u89c4\u5219. \u4f8b\u5982: x = 1 if cond else 2 . \u4f18\u70b9: \u6bd4if\u8bed\u53e5\u66f4\u52a0\u7b80\u77ed\u548c\u65b9\u4fbf. \u7f3a\u70b9: \u6bd4if\u8bed\u53e5\u96be\u4e8e\u9605\u8bfb. \u5982\u679c\u8868\u8fbe\u5f0f\u5f88\u957f\uff0c \u96be\u4e8e\u5b9a\u4f4d\u6761\u4ef6. \u7ed3\u8bba: \u9002\u7528\u4e8e\u5355\u884c\u51fd\u6570. \u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u63a8\u8350\u4f7f\u7528\u5b8c\u6574\u7684if\u8bed\u53e5.","title":"\u6761\u4ef6\u8868\u8fbe\u5f0f"},{"location":"python_rules/#_9","text":".. tip:: \u9002\u7528\u4e8e\u5927\u90e8\u5206\u60c5\u51b5. \u5b9a\u4e49: \u4f60\u53ef\u4ee5\u5728\u51fd\u6570\u53c2\u6570\u5217\u8868\u7684\u6700\u540e\u6307\u5b9a\u53d8\u91cf\u7684\u503c, \u4f8b\u5982, def foo(a, b = 0): . \u5982\u679c\u8c03\u7528foo\u65f6\u53ea\u5e26\u4e00\u4e2a\u53c2\u6570, \u5219b\u88ab\u8bbe\u4e3a0. \u5982\u679c\u5e26\u4e24\u4e2a\u53c2\u6570, \u5219b\u7684\u503c\u7b49\u4e8e\u7b2c\u4e8c\u4e2a\u53c2\u6570. \u4f18\u70b9: \u4f60\u7ecf\u5e38\u4f1a\u78b0\u5230\u4e00\u4e9b\u4f7f\u7528\u5927\u91cf\u9ed8\u8ba4\u503c\u7684\u51fd\u6570, \u4f46\u5076\u5c14(\u6bd4\u8f83\u5c11\u89c1)\u4f60\u60f3\u8981\u8986\u76d6\u8fd9\u4e9b\u9ed8\u8ba4\u503c. \u9ed8\u8ba4\u53c2\u6570\u503c\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u65b9\u6cd5\u6765\u5b8c\u6210\u8fd9\u4ef6\u4e8b, \u4f60\u4e0d\u9700\u8981\u4e3a\u8fd9\u4e9b\u7f55\u89c1\u7684\u4f8b\u5916\u5b9a\u4e49\u5927\u91cf\u51fd\u6570. \u540c\u65f6, Python\u4e5f\u4e0d\u652f\u6301\u91cd\u8f7d\u65b9\u6cd5\u548c\u51fd\u6570, \u9ed8\u8ba4\u53c2\u6570\u662f\u4e00\u79cd\"\u4eff\u9020\"\u91cd\u8f7d\u884c\u4e3a\u7684\u7b80\u5355\u65b9\u5f0f. \u7f3a\u70b9: \u9ed8\u8ba4\u53c2\u6570\u53ea\u5728\u6a21\u5757\u52a0\u8f7d\u65f6\u6c42\u503c\u4e00\u6b21. \u5982\u679c\u53c2\u6570\u662f\u5217\u8868\u6216\u5b57\u5178\u4e4b\u7c7b\u7684\u53ef\u53d8\u7c7b\u578b, \u8fd9\u53ef\u80fd\u4f1a\u5bfc\u81f4\u95ee\u9898. \u5982\u679c\u51fd\u6570\u4fee\u6539\u4e86\u5bf9\u8c61(\u4f8b\u5982\u5411\u5217\u8868\u8ffd\u52a0\u9879), \u9ed8\u8ba4\u503c\u5c31\u88ab\u4fee\u6539\u4e86. \u7ed3\u8bba: \u9f13\u52b1\u4f7f\u7528, \u4e0d\u8fc7\u6709\u5982\u4e0b\u6ce8\u610f\u4e8b\u9879: \u4e0d\u8981\u5728\u51fd\u6570\u6216\u65b9\u6cd5\u5b9a\u4e49\u4e2d\u4f7f\u7528\u53ef\u53d8\u5bf9\u8c61\u4f5c\u4e3a\u9ed8\u8ba4\u503c. .. code-block:: python Yes: def foo(a, b=None): if b is None: b = [] .. code-block:: python No: def foo(a, b=[]): ... No: def foo(a, b=time.time()): # The time the module was loaded??? ... No: def foo(a, b=FLAGS.my_thing): # sys.argv has not yet been parsed... ...","title":"\u9ed8\u8ba4\u53c2\u6570\u503c"},{"location":"python_rules/#properties","text":".. tip:: \u8bbf\u95ee\u548c\u8bbe\u7f6e\u6570\u636e\u6210\u5458\u65f6, \u4f60\u901a\u5e38\u4f1a\u4f7f\u7528\u7b80\u5355, \u8f7b\u91cf\u7ea7\u7684\u8bbf\u95ee\u548c\u8bbe\u7f6e\u51fd\u6570. \u5efa\u8bae\u7528\u5c5e\u6027\uff08properties\uff09\u6765\u4ee3\u66ff\u5b83\u4eec. \u5b9a\u4e49: \u4e00\u79cd\u7528\u4e8e\u5305\u88c5\u65b9\u6cd5\u8c03\u7528\u7684\u65b9\u5f0f. \u5f53\u8fd0\u7b97\u91cf\u4e0d\u5927, \u5b83\u662f\u83b7\u53d6\u548c\u8bbe\u7f6e\u5c5e\u6027(attribute)\u7684\u6807\u51c6\u65b9\u5f0f. \u4f18\u70b9: \u901a\u8fc7\u6d88\u9664\u7b80\u5355\u7684\u5c5e\u6027(attribute)\u8bbf\u95ee\u65f6\u663e\u5f0f\u7684get\u548cset\u65b9\u6cd5\u8c03\u7528, \u53ef\u8bfb\u6027\u63d0\u9ad8\u4e86. \u5141\u8bb8\u61d2\u60f0\u7684\u8ba1\u7b97. \u7528Pythonic\u7684\u65b9\u5f0f\u6765\u7ef4\u62a4\u7c7b\u7684\u63a5\u53e3. \u5c31\u6027\u80fd\u800c\u8a00, \u5f53\u76f4\u63a5\u8bbf\u95ee\u53d8\u91cf\u662f\u5408\u7406\u7684, \u6dfb\u52a0\u8bbf\u95ee\u65b9\u6cd5\u5c31\u663e\u5f97\u7410\u788e\u800c\u65e0\u610f\u4e49. \u4f7f\u7528\u5c5e\u6027(properties)\u53ef\u4ee5\u7ed5\u8fc7\u8fd9\u4e2a\u95ee\u9898. \u5c06\u6765\u4e5f\u53ef\u4ee5\u5728\u4e0d\u7834\u574f\u63a5\u53e3\u7684\u60c5\u51b5\u4e0b\u5c06\u8bbf\u95ee\u65b9\u6cd5\u52a0\u4e0a. \u7f3a\u70b9: \u5c5e\u6027(properties)\u662f\u5728get\u548cset\u65b9\u6cd5\u58f0\u660e\u540e\u6307\u5b9a, \u8fd9\u9700\u8981\u4f7f\u7528\u8005\u5728\u63a5\u4e0b\u6765\u7684\u4ee3\u7801\u4e2d\u6ce8\u610f: set\u548cget\u662f\u7528\u4e8e\u5c5e\u6027(properties)\u7684(\u9664\u4e86\u7528 @property \u88c5\u9970\u5668\u521b\u5efa\u7684\u53ea\u8bfb\u5c5e\u6027). \u5fc5\u987b\u7ee7\u627f\u81eaobject\u7c7b. \u53ef\u80fd\u9690\u85cf\u6bd4\u5982\u64cd\u4f5c\u7b26\u91cd\u8f7d\u4e4b\u7c7b\u7684\u526f\u4f5c\u7528. \u7ee7\u627f\u65f6\u53ef\u80fd\u4f1a\u8ba9\u4eba\u56f0\u60d1. \u7ed3\u8bba: \u4f60\u901a\u5e38\u4e60\u60ef\u4e8e\u4f7f\u7528\u8bbf\u95ee\u6216\u8bbe\u7f6e\u65b9\u6cd5\u6765\u8bbf\u95ee\u6216\u8bbe\u7f6e\u6570\u636e, \u5b83\u4eec\u7b80\u5355\u800c\u8f7b\u91cf. \u4e0d\u8fc7\u6211\u4eec\u5efa\u8bae\u4f60\u5728\u65b0\u7684\u4ee3\u7801\u4e2d\u4f7f\u7528\u5c5e\u6027. \u53ea\u8bfb\u5c5e\u6027\u5e94\u8be5\u7528 @property \u88c5\u9970\u5668 <http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Function_and_Method_Decorators> _ \u6765\u521b\u5efa. \u5982\u679c\u5b50\u7c7b\u6ca1\u6709\u8986\u76d6\u5c5e\u6027, \u90a3\u4e48\u5c5e\u6027\u7684\u7ee7\u627f\u53ef\u80fd\u770b\u4e0a\u53bb\u4e0d\u660e\u663e. \u56e0\u6b64\u4f7f\u7528\u8005\u5fc5\u987b\u786e\u4fdd\u8bbf\u95ee\u65b9\u6cd5\u95f4\u63a5\u88ab\u8c03\u7528, \u4ee5\u4fdd\u8bc1\u5b50\u7c7b\u4e2d\u7684\u91cd\u8f7d\u65b9\u6cd5\u88ab\u5c5e\u6027\u8c03\u7528(\u4f7f\u7528\u6a21\u677f\u65b9\u6cd5\u8bbe\u8ba1\u6a21\u5f0f). .. code-block:: python Yes: import math class Square(object): \"\"\"A square with two properties: a writable area and a read-only perimeter. To use: >>> sq = Square(3) >>> sq.area 9 >>> sq.perimeter 12 >>> sq.area = 16 >>> sq.side 4 >>> sq.perimeter 16 \"\"\" def __init__(self, side): self.side = side def __get_area(self): \"\"\"Calculates the 'area' property.\"\"\" return self.side ** 2 def ___get_area(self): \"\"\"Indirect accessor for 'area' property.\"\"\" return self.__get_area() def __set_area(self, area): \"\"\"Sets the 'area' property.\"\"\" self.side = math.sqrt(area) def ___set_area(self, area): \"\"\"Indirect setter for 'area' property.\"\"\" self._SetArea(area) area = property(___get_area, ___set_area, doc=\"\"\"Gets or sets the area of the square.\"\"\") @property def perimeter(self): return self.side * 4 (\u8bd1\u8005\u6ce8: \u8001\u5b9e\u8bf4, \u6211\u89c9\u5f97\u8fd9\u6bb5\u793a\u4f8b\u4ee3\u7801\u5f88\u4e0d\u6070\u5f53, \u6709\u5fc5\u8981\u8fd9\u4e48\u86cb\u75bc\u5417?)","title":"\u5c5e\u6027(properties)"},{"location":"python_rules/#truefalse","text":".. tip:: \u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0ffalse \u5b9a\u4e49: Python\u5728\u5e03\u5c14\u4e0a\u4e0b\u6587\u4e2d\u4f1a\u5c06\u67d0\u4e9b\u503c\u6c42\u503c\u4e3afalse. \u6309\u7b80\u5355\u7684\u76f4\u89c9\u6765\u8bb2, \u5c31\u662f\u6240\u6709\u7684\"\u7a7a\"\u503c\u90fd\u88ab\u8ba4\u4e3a\u662ffalse. \u56e0\u6b640\uff0c None, [], {}, \"\" \u90fd\u88ab\u8ba4\u4e3a\u662ffalse. \u4f18\u70b9: \u4f7f\u7528Python\u5e03\u5c14\u503c\u7684\u6761\u4ef6\u8bed\u53e5\u66f4\u6613\u8bfb\u4e5f\u66f4\u4e0d\u6613\u72af\u9519. \u5927\u90e8\u5206\u60c5\u51b5\u4e0b, \u4e5f\u66f4\u5feb. \u7f3a\u70b9: \u5bf9C/C++\u5f00\u53d1\u4eba\u5458\u6765\u8bf4, \u53ef\u80fd\u770b\u8d77\u6765\u6709\u70b9\u602a. \u7ed3\u8bba: \u5c3d\u53ef\u80fd\u4f7f\u7528\u9690\u5f0f\u7684false, \u4f8b\u5982: \u4f7f\u7528 if foo: \u800c\u4e0d\u662f if foo != []: . \u4e0d\u8fc7\u8fd8\u662f\u6709\u4e00\u4e9b\u6ce8\u610f\u4e8b\u9879\u9700\u8981\u4f60\u94ed\u8bb0\u5728\u5fc3: #. \u6c38\u8fdc\u4e0d\u8981\u7528==\u6216\u8005!=\u6765\u6bd4\u8f83\u5355\u4ef6, \u6bd4\u5982None. \u4f7f\u7528is\u6216\u8005is not. #. \u6ce8\u610f: \u5f53\u4f60\u5199\u4e0b ``if x:`` \u65f6, \u4f60\u5176\u5b9e\u8868\u793a\u7684\u662f ``if x is not None`` . \u4f8b\u5982: \u5f53\u4f60\u8981\u6d4b\u8bd5\u4e00\u4e2a\u9ed8\u8ba4\u503c\u662fNone\u7684\u53d8\u91cf\u6216\u53c2\u6570\u662f\u5426\u88ab\u8bbe\u4e3a\u5176\u5b83\u503c. \u8fd9\u4e2a\u503c\u5728\u5e03\u5c14\u8bed\u4e49\u4e0b\u53ef\u80fd\u662ffalse! #. \u6c38\u8fdc\u4e0d\u8981\u7528==\u5c06\u4e00\u4e2a\u5e03\u5c14\u91cf\u4e0efalse\u76f8\u6bd4\u8f83. \u4f7f\u7528 ``if not x:`` \u4ee3\u66ff. \u5982\u679c\u4f60\u9700\u8981\u533a\u5206false\u548cNone, \u4f60\u5e94\u8be5\u7528\u50cf ``if not x and x is not None:`` \u8fd9\u6837\u7684\u8bed\u53e5. #. \u5bf9\u4e8e\u5e8f\u5217(\u5b57\u7b26\u4e32, \u5217\u8868, \u5143\u7ec4), \u8981\u6ce8\u610f\u7a7a\u5e8f\u5217\u662ffalse. \u56e0\u6b64 ``if not seq:`` \u6216\u8005 ``if seq:`` \u6bd4 ``if len(seq):`` \u6216 ``if not len(seq):`` \u8981\u66f4\u597d. #. \u5904\u7406\u6574\u6570\u65f6, \u4f7f\u7528\u9690\u5f0ffalse\u53ef\u80fd\u4f1a\u5f97\u4e0d\u507f\u5931(\u5373\u4e0d\u5c0f\u5fc3\u5c06None\u5f53\u505a0\u6765\u5904\u7406). \u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a\u5df2\u77e5\u662f\u6574\u578b(\u4e14\u4e0d\u662flen()\u7684\u8fd4\u56de\u7ed3\u679c)\u7684\u503c\u4e0e0\u6bd4\u8f83. .. code-block:: python Yes: if not users: print 'no users' if foo == 0: self.handle_zero() if i % 10 == 0: self.handle_multiple_of_ten() .. code-block:: python No: if len(users) == 0: print 'no users' if foo is not None and not foo: self.handle_zero() if not i % 10: self.handle_multiple_of_ten() #. \u6ce8\u610f'0'(\u5b57\u7b26\u4e32)\u4f1a\u88ab\u5f53\u505atrue.","title":"True/False\u7684\u6c42\u503c"},{"location":"python_rules/#_10","text":".. tip:: \u5c3d\u53ef\u80fd\u4f7f\u7528\u5b57\u7b26\u4e32\u65b9\u6cd5\u53d6\u4ee3\u5b57\u7b26\u4e32\u6a21\u5757. \u4f7f\u7528\u51fd\u6570\u8c03\u7528\u8bed\u6cd5\u53d6\u4ee3apply(). \u4f7f\u7528\u5217\u8868\u63a8\u5bfc, for\u5faa\u73af\u53d6\u4ee3filter(), map()\u4ee5\u53careduce(). \u5b9a\u4e49: \u5f53\u524d\u7248\u672c\u7684Python\u63d0\u4f9b\u4e86\u5927\u5bb6\u901a\u5e38\u66f4\u559c\u6b22\u7684\u66ff\u4ee3\u54c1. \u7ed3\u8bba: \u6211\u4eec\u4e0d\u4f7f\u7528\u4e0d\u652f\u6301\u8fd9\u4e9b\u7279\u6027\u7684Python\u7248\u672c, \u6240\u4ee5\u6ca1\u7406\u7531\u4e0d\u7528\u65b0\u7684\u65b9\u5f0f. .. code-block:: python Yes: words = foo.split(':') [x[1] for x in my_list if x[2] == 5] map(math.sqrt, data) # Ok. No inlined lambda expression. fn(*args, **kwargs) .. code-block:: python No: words = string.split(foo, ':') map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list)) apply(fn, args, kwargs)","title":"\u8fc7\u65f6\u7684\u8bed\u8a00\u7279\u6027"},{"location":"python_rules/#lexical-scoping","text":".. tip:: \u63a8\u8350\u4f7f\u7528 \u5b9a\u4e49: \u5d4c\u5957\u7684Python\u51fd\u6570\u53ef\u4ee5\u5f15\u7528\u5916\u5c42\u51fd\u6570\u4e2d\u5b9a\u4e49\u7684\u53d8\u91cf, \u4f46\u662f\u4e0d\u80fd\u591f\u5bf9\u5b83\u4eec\u8d4b\u503c. \u53d8\u91cf\u7ed1\u5b9a\u7684\u89e3\u6790\u662f\u4f7f\u7528\u8bcd\u6cd5\u4f5c\u7528\u57df, \u4e5f\u5c31\u662f\u57fa\u4e8e\u9759\u6001\u7684\u7a0b\u5e8f\u6587\u672c. \u5bf9\u4e00\u4e2a\u5757\u4e2d\u7684\u67d0\u4e2a\u540d\u79f0\u7684\u4efb\u4f55\u8d4b\u503c\u90fd\u4f1a\u5bfc\u81f4Python\u5c06\u5bf9\u8be5\u540d\u79f0\u7684\u5168\u90e8\u5f15\u7528\u5f53\u505a\u5c40\u90e8\u53d8\u91cf, \u751a\u81f3\u662f\u8d4b\u503c\u524d\u7684\u5904\u7406. \u5982\u679c\u78b0\u5230global\u58f0\u660e, \u8be5\u540d\u79f0\u5c31\u4f1a\u88ab\u89c6\u4f5c\u5168\u5c40\u53d8\u91cf. \u4e00\u4e2a\u4f7f\u7528\u8fd9\u4e2a\u7279\u6027\u7684\u4f8b\u5b50: .. code-block:: python def get_adder(summand1): \"\"\"Returns a function that adds numbers to a given number.\"\"\" def adder(summand2): return summand1 + summand2 return adder (\u8bd1\u8005\u6ce8: \u8fd9\u4e2a\u4f8b\u5b50\u6709\u70b9\u8be1\u5f02, \u4f60\u5e94\u8be5\u8fd9\u6837\u4f7f\u7528\u8fd9\u4e2a\u51fd\u6570: ``sum = get_adder(summand1)(summand2)`` ) \u4f18\u70b9: \u901a\u5e38\u53ef\u4ee5\u5e26\u6765\u66f4\u52a0\u6e05\u6670, \u4f18\u96c5\u7684\u4ee3\u7801. \u5c24\u5176\u4f1a\u8ba9\u6709\u7ecf\u9a8c\u7684Lisp\u548cScheme(\u8fd8\u6709Haskell, ML\u7b49)\u7a0b\u5e8f\u5458\u611f\u5230\u6b23\u6170. \u7f3a\u70b9: \u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u8ff7\u60d1\u7684bug. \u4f8b\u5982\u4e0b\u9762\u8fd9\u4e2a\u4f9d\u636e PEP-0227 <http://www.python.org/dev/peps/pep-0227/> _ \u7684\u4f8b\u5b50: .. code-block:: python i = 4 def foo(x): def bar(): print i, # ... # A bunch of code here # ... for i in x: # Ah, i *is* local to Foo, so this is what Bar sees print i, bar() \u56e0\u6b64 ``foo([1, 2, 3])`` \u4f1a\u6253\u5370 ``1 2 3 3`` , \u4e0d\u662f ``1 2 3 4`` . (\u8bd1\u8005\u6ce8: x\u662f\u4e00\u4e2a\u5217\u8868, for\u5faa\u73af\u5176\u5b9e\u662f\u5c06x\u4e2d\u7684\u503c\u4f9d\u6b21\u8d4b\u7ed9i.\u8fd9\u6837\u5bf9i\u7684\u8d4b\u503c\u5c31\u9690\u5f0f\u7684\u53d1\u751f\u4e86, \u6574\u4e2afoo\u51fd\u6570\u4f53\u4e2d\u7684i\u90fd\u4f1a\u88ab\u5f53\u505a\u5c40\u90e8\u53d8\u91cf, \u5305\u62ecbar()\u4e2d\u7684\u90a3\u4e2a. \u8fd9\u4e00\u70b9\u4e0eC++\u4e4b\u7c7b\u7684\u9759\u6001\u8bed\u8a00\u8fd8\u662f\u6709\u5f88\u5927\u5dee\u522b\u7684.) \u7ed3\u8bba: \u9f13\u52b1\u4f7f\u7528.","title":"\u8bcd\u6cd5\u4f5c\u7528\u57df(Lexical Scoping)"},{"location":"python_rules/#_11","text":".. tip:: \u5982\u679c\u597d\u5904\u5f88\u663e\u7136, \u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668 \u5b9a\u4e49: \u7528\u4e8e\u51fd\u6570\u53ca\u65b9\u6cd5\u7684\u88c5\u9970\u5668 <https://docs.python.org/release/2.4.3/whatsnew/node6.html> _ (\u4e5f\u5c31\u662f@\u6807\u8bb0). \u6700\u5e38\u89c1\u7684\u88c5\u9970\u5668\u662f@classmethod \u548c@staticmethod, \u7528\u4e8e\u5c06\u5e38\u89c4\u51fd\u6570\u8f6c\u6362\u6210\u7c7b\u65b9\u6cd5\u6216\u9759\u6001\u65b9\u6cd5. \u4e0d\u8fc7, \u88c5\u9970\u5668\u8bed\u6cd5\u4e5f\u5141\u8bb8\u7528\u6237\u81ea\u5b9a\u4e49\u88c5\u9970\u5668. \u7279\u522b\u5730, \u5bf9\u4e8e\u67d0\u4e2a\u51fd\u6570 my_decorator , \u4e0b\u9762\u7684\u4e24\u6bb5\u4ee3\u7801\u662f\u7b49\u6548\u7684: .. code-block:: python class C(object): @my_decorator def method(self): # method body ... .. code-block:: python class C(object): def method(self): # method body ... method = my_decorator(method) \u4f18\u70b9: \u4f18\u96c5\u7684\u5728\u51fd\u6570\u4e0a\u6307\u5b9a\u4e00\u4e9b\u8f6c\u6362. \u8be5\u8f6c\u6362\u53ef\u80fd\u51cf\u5c11\u4e00\u4e9b\u91cd\u590d\u4ee3\u7801, \u4fdd\u6301\u5df2\u6709\u51fd\u6570\u4e0d\u53d8(enforce invariants), \u7b49. \u7f3a\u70b9: \u88c5\u9970\u5668\u53ef\u4ee5\u5728\u51fd\u6570\u7684\u53c2\u6570\u6216\u8fd4\u56de\u503c\u4e0a\u6267\u884c\u4efb\u4f55\u64cd\u4f5c, \u8fd9\u53ef\u80fd\u5bfc\u81f4\u8ba9\u4eba\u60ca\u5f02\u7684\u9690\u85cf\u884c\u4e3a. \u800c\u4e14, \u88c5\u9970\u5668\u5728\u5bfc\u5165\u65f6\u6267\u884c. \u4ece\u88c5\u9970\u5668\u4ee3\u7801\u7684\u5931\u8d25\u4e2d\u6062\u590d\u66f4\u52a0\u4e0d\u53ef\u80fd. \u7ed3\u8bba: \u5982\u679c\u597d\u5904\u5f88\u663e\u7136, \u5c31\u660e\u667a\u800c\u8c28\u614e\u7684\u4f7f\u7528\u88c5\u9970\u5668. \u88c5\u9970\u5668\u5e94\u8be5\u9075\u5b88\u548c\u51fd\u6570\u4e00\u6837\u7684\u5bfc\u5165\u548c\u547d\u540d\u89c4\u5219. \u88c5\u9970\u5668\u7684python\u6587\u6863\u5e94\u8be5\u6e05\u6670\u7684\u8bf4\u660e\u8be5\u51fd\u6570\u662f\u4e00\u4e2a\u88c5\u9970\u5668. \u8bf7\u4e3a\u88c5\u9970\u5668\u7f16\u5199\u5355\u5143\u6d4b\u8bd5. \u907f\u514d\u88c5\u9970\u5668\u81ea\u8eab\u5bf9\u5916\u754c\u7684\u4f9d\u8d56(\u5373\u4e0d\u8981\u4f9d\u8d56\u4e8e\u6587\u4ef6, socket, \u6570\u636e\u5e93\u8fde\u63a5\u7b49), \u56e0\u4e3a\u88c5\u9970\u5668\u8fd0\u884c\u65f6\u8fd9\u4e9b\u8d44\u6e90\u53ef\u80fd\u4e0d\u53ef\u7528(\u7531 ``pydoc`` \u6216\u5176\u5b83\u5de5\u5177\u5bfc\u5165). \u5e94\u8be5\u4fdd\u8bc1\u4e00\u4e2a\u7528\u6709\u6548\u53c2\u6570\u8c03\u7528\u7684\u88c5\u9970\u5668\u5728\u6240\u6709\u60c5\u51b5\u4e0b\u90fd\u662f\u6210\u529f\u7684. \u88c5\u9970\u5668\u662f\u4e00\u79cd\u7279\u6b8a\u5f62\u5f0f\u7684\"\u9876\u7ea7\u4ee3\u7801\". \u53c2\u8003\u540e\u9762\u5173\u4e8e :ref:`Main <main>` \u7684\u8bdd\u9898.","title":"\u51fd\u6570\u4e0e\u65b9\u6cd5\u88c5\u9970\u5668"},{"location":"python_rules/#_12","text":".. tip:: \u4e0d\u8981\u4f9d\u8d56\u5185\u5efa\u7c7b\u578b\u7684\u539f\u5b50\u6027. \u867d\u7136Python\u7684\u5185\u5efa\u7c7b\u578b\u4f8b\u5982\u5b57\u5178\u770b\u4e0a\u53bb\u62e5\u6709\u539f\u5b50\u64cd\u4f5c, \u4f46\u662f\u5728\u67d0\u4e9b\u60c5\u5f62\u4e0b\u5b83\u4eec\u4ecd\u7136\u4e0d\u662f\u539f\u5b50\u7684(\u5373: \u5982\u679c__hash__\u6216__eq__\u88ab\u5b9e\u73b0\u4e3aPython\u65b9\u6cd5)\u4e14\u5b83\u4eec\u7684\u539f\u5b50\u6027\u662f\u9760\u4e0d\u4f4f\u7684. \u4f60\u4e5f\u4e0d\u80fd\u6307\u671b\u539f\u5b50\u53d8\u91cf\u8d4b\u503c(\u56e0\u4e3a\u8fd9\u4e2a\u53cd\u8fc7\u6765\u4f9d\u8d56\u5b57\u5178). \u4f18\u5148\u4f7f\u7528Queue\u6a21\u5757\u7684 Queue \u6570\u636e\u7c7b\u578b\u4f5c\u4e3a\u7ebf\u7a0b\u95f4\u7684\u6570\u636e\u901a\u4fe1\u65b9\u5f0f. \u53e6\u5916, \u4f7f\u7528threading\u6a21\u5757\u53ca\u5176\u9501\u539f\u8bed(locking primitives). \u4e86\u89e3\u6761\u4ef6\u53d8\u91cf\u7684\u5408\u9002\u4f7f\u7528\u65b9\u5f0f, \u8fd9\u6837\u4f60\u5c31\u53ef\u4ee5\u4f7f\u7528 threading.Condition \u6765\u53d6\u4ee3\u4f4e\u7ea7\u522b\u7684\u9501\u4e86.","title":"\u7ebf\u7a0b"},{"location":"python_rules/#_13","text":".. tip:: \u907f\u514d\u4f7f\u7528\u8fd9\u4e9b\u7279\u6027 \u5b9a\u4e49: Python\u662f\u4e00\u79cd\u5f02\u5e38\u7075\u6d3b\u7684\u8bed\u8a00, \u5b83\u4e3a\u4f60\u63d0\u4f9b\u4e86\u5f88\u591a\u82b1\u54e8\u7684\u7279\u6027, \u8bf8\u5982\u5143\u7c7b(metaclasses), \u5b57\u8282\u7801\u8bbf\u95ee, \u4efb\u610f\u7f16\u8bd1(on-the-fly compilation), \u52a8\u6001\u7ee7\u627f, \u5bf9\u8c61\u7236\u7c7b\u91cd\u5b9a\u4e49(object reparenting), \u5bfc\u5165\u9ed1\u5ba2(import hacks), \u53cd\u5c04, \u7cfb\u7edf\u5185\u4fee\u6539(modification of system internals), \u7b49\u7b49. \u4f18\u70b9: \u5f3a\u5927\u7684\u8bed\u8a00\u7279\u6027, \u80fd\u8ba9\u4f60\u7684\u4ee3\u7801\u66f4\u7d27\u51d1. \u7f3a\u70b9: \u4f7f\u7528\u8fd9\u4e9b\u5f88\"\u9177\"\u7684\u7279\u6027\u5341\u5206\u8bf1\u4eba, \u4f46\u4e0d\u662f\u7edd\u5bf9\u5fc5\u8981. \u4f7f\u7528\u5947\u6280\u6deb\u5de7\u7684\u4ee3\u7801\u5c06\u66f4\u52a0\u96be\u4ee5\u9605\u8bfb\u548c\u8c03\u8bd5. \u5f00\u59cb\u53ef\u80fd\u8fd8\u597d(\u5bf9\u539f\u4f5c\u8005\u800c\u8a00), \u4f46\u5f53\u4f60\u56de\u987e\u4ee3\u7801, \u5b83\u4eec\u53ef\u80fd\u4f1a\u6bd4\u90a3\u4e9b\u7a0d\u957f\u4e00\u70b9\u4f46\u662f\u5f88\u76f4\u63a5\u7684\u4ee3\u7801\u66f4\u52a0\u96be\u4ee5\u7406\u89e3. \u7ed3\u8bba: \u5728\u4f60\u7684\u4ee3\u7801\u4e2d\u907f\u514d\u8fd9\u4e9b\u7279\u6027.","title":"\u5a01\u529b\u8fc7\u5927\u7684\u7279\u6027"},{"location":"python_style_rules/","text":"Python\u98ce\u683c\u89c4\u8303 \u5206\u53f7 .. tip:: \u4e0d\u8981\u5728\u884c\u5c3e\u52a0\u5206\u53f7, \u4e5f\u4e0d\u8981\u7528\u5206\u53f7\u5c06\u4e24\u6761\u547d\u4ee4\u653e\u5728\u540c\u4e00\u884c. .. _line_length: \u884c\u957f\u5ea6 .. tip:: \u6bcf\u884c\u4e0d\u8d85\u8fc780\u4e2a\u5b57\u7b26 \u4f8b\u5916: . \u957f\u7684\u5bfc\u5165\u6a21\u5757\u8bed\u53e5 . \u6ce8\u91ca\u91cc\u7684URL \u4e0d\u8981\u4f7f\u7528\u53cd\u659c\u6760\u8fde\u63a5\u884c. Python\u4f1a\u5c06 \u5706\u62ec\u53f7, \u4e2d\u62ec\u53f7\u548c\u82b1\u62ec\u53f7\u4e2d\u7684\u884c\u9690\u5f0f\u7684\u8fde\u63a5\u8d77\u6765 <http://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining> _ , \u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u70b9. \u5982\u679c\u9700\u8981, \u4f60\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u5916\u56f4\u589e\u52a0\u4e00\u5bf9\u989d\u5916\u7684\u5706\u62ec\u53f7. .. code-block:: python Yes: foo_bar(self, width, height, color='black', design=None, x='foo', emphasis=None, highlight=0) if (width == 0 and height == 0 and color == 'red' and emphasis == 'strong'): \u5982\u679c\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u5728\u4e00\u884c\u653e\u4e0d\u4e0b, \u53ef\u4ee5\u4f7f\u7528\u5706\u62ec\u53f7\u6765\u5b9e\u73b0\u9690\u5f0f\u884c\u8fde\u63a5: .. code-block:: python x = ('This will build a very long long ' 'long long long long long long string') \u5728\u6ce8\u91ca\u4e2d\uff0c\u5982\u679c\u5fc5\u8981\uff0c\u5c06\u957f\u7684URL\u653e\u5728\u4e00\u884c\u4e0a\u3002 .. code-block:: python Yes: # See details at # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html .. code-block:: python No: # See details at # http://www.example.com/us/developer/documentation/api/content/\\ # v2.0/csv_file_name_extension_full_specification.html \u6ce8\u610f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5143\u7d20\u7f29\u8fdb; \u4f60\u53ef\u4ee5\u5728\u672c\u6587\u7684 :ref: \u7f29\u8fdb <indentation> \u90e8\u5206\u627e\u5230\u89e3\u91ca. \u62ec\u53f7 .. tip:: \u5b81\u7f3a\u6bcb\u6ee5\u7684\u4f7f\u7528\u62ec\u53f7 \u9664\u975e\u662f\u7528\u4e8e\u5b9e\u73b0\u884c\u8fde\u63a5, \u5426\u5219\u4e0d\u8981\u5728\u8fd4\u56de\u8bed\u53e5\u6216\u6761\u4ef6\u8bed\u53e5\u4e2d\u4f7f\u7528\u62ec\u53f7. \u4e0d\u8fc7\u5728\u5143\u7ec4\u4e24\u8fb9\u4f7f\u7528\u62ec\u53f7\u662f\u53ef\u4ee5\u7684. .. code-block:: python Yes: if foo: bar() while x: x = bar() if x and y: bar() if not x: bar() return foo for (x, y) in dict.items(): ... .. code-block:: python No: if (x): bar() if not(x): bar() return (foo) .. _indentation: \u7f29\u8fdb .. tip:: \u75284\u4e2a\u7a7a\u683c\u6765\u7f29\u8fdb\u4ee3\u7801 \u7edd\u5bf9\u4e0d\u8981\u7528tab, \u4e5f\u4e0d\u8981tab\u548c\u7a7a\u683c\u6df7\u7528. \u5bf9\u4e8e\u884c\u8fde\u63a5\u7684\u60c5\u51b5, \u4f60\u5e94\u8be5\u8981\u4e48\u5782\u76f4\u5bf9\u9f50\u6362\u884c\u7684\u5143\u7d20(\u89c1 :ref: \u884c\u957f\u5ea6 <line_length> \u90e8\u5206\u7684\u793a\u4f8b), \u6216\u8005\u4f7f\u75284\u7a7a\u683c\u7684\u60ac\u6302\u5f0f\u7f29\u8fdb(\u8fd9\u65f6\u7b2c\u4e00\u884c\u4e0d\u5e94\u8be5\u6709\u53c2\u6570): .. code-block:: python Yes: # Aligned with opening delimiter foo = long_function_name(var_one, var_two, var_three, var_four) # Aligned with opening delimiter in a dictionary foo = { long_dictionary_key: value1 + value2, ... } # 4-space hanging indent; nothing on first line foo = long_function_name( var_one, var_two, var_three, var_four) # 4-space hanging indent in a dictionary foo = { long_dictionary_key: long_dictionary_value, ... } .. code-block:: python No: # Stuff on first line forbidden foo = long_function_name(var_one, var_two, var_three, var_four) # 2-space hanging indent forbidden foo = long_function_name( var_one, var_two, var_three, var_four) # No hanging indent in a dictionary foo = { long_dictionary_key: long_dictionary_value, ... } \u7a7a\u884c .. tip:: \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c, \u65b9\u6cd5\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e00\u884c \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c, \u6bd4\u5982\u51fd\u6570\u6216\u8005\u7c7b\u5b9a\u4e49. \u65b9\u6cd5\u5b9a\u4e49, \u7c7b\u5b9a\u4e49\u4e0e\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e4b\u95f4, \u90fd\u5e94\u8be5\u7a7a\u4e00\u884c. \u51fd\u6570\u6216\u65b9\u6cd5\u4e2d, \u67d0\u4e9b\u5730\u65b9\u8981\u662f\u4f60\u89c9\u5f97\u5408\u9002, \u5c31\u7a7a\u4e00\u884c. \u7a7a\u683c .. tip:: \u6309\u7167\u6807\u51c6\u7684\u6392\u7248\u89c4\u8303\u6765\u4f7f\u7528\u6807\u70b9\u4e24\u8fb9\u7684\u7a7a\u683c \u62ec\u53f7\u5185\u4e0d\u8981\u6709\u7a7a\u683c. .. code-block:: python Yes: spam(ham[1], {eggs: 2}, []) .. code-block:: python No: spam( ham[ 1 ], { eggs: 2 }, [ ] ) \u4e0d\u8981\u5728\u9017\u53f7, \u5206\u53f7, \u5192\u53f7\u524d\u9762\u52a0\u7a7a\u683c, \u4f46\u5e94\u8be5\u5728\u5b83\u4eec\u540e\u9762\u52a0(\u9664\u4e86\u5728\u884c\u5c3e). .. code-block:: python Yes: if x == 4: print x, y x, y = y, x .. code-block:: python No: if x == 4 : print x , y x , y = y , x \u53c2\u6570\u5217\u8868, \u7d22\u5f15\u6216\u5207\u7247\u7684\u5de6\u62ec\u53f7\u524d\u4e0d\u5e94\u52a0\u7a7a\u683c. .. code-block:: python Yes: spam(1) .. code-block:: python no: spam (1) .. code-block:: python Yes: dict['key'] = list[index] .. code-block:: python No: dict ['key'] = list [index] \u5728\u4e8c\u5143\u64cd\u4f5c\u7b26\u4e24\u8fb9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c, \u6bd4\u5982\u8d4b\u503c(=), \u6bd4\u8f83(==, <, >, !=, <>, <=, >=, in, not in, is, is not), \u5e03\u5c14(and, or, not). \u81f3\u4e8e\u7b97\u672f\u64cd\u4f5c\u7b26\u4e24\u8fb9\u7684\u7a7a\u683c\u8be5\u5982\u4f55\u4f7f\u7528, \u9700\u8981\u4f60\u81ea\u5df1\u597d\u597d\u5224\u65ad. \u4e0d\u8fc7\u4e24\u4fa7\u52a1\u5fc5\u8981\u4fdd\u6301\u4e00\u81f4. .. code-block:: python Yes: x == 1 .. code-block:: python No: x<1 \u5f53'='\u7528\u4e8e\u6307\u793a\u5173\u952e\u5b57\u53c2\u6570\u6216\u9ed8\u8ba4\u53c2\u6570\u503c\u65f6, \u4e0d\u8981\u5728\u5176\u4e24\u4fa7\u4f7f\u7528\u7a7a\u683c. .. code-block:: python Yes: def complex(real, imag=0.0): return magic(r=real, i=imag) .. code-block:: python No: def complex(real, imag = 0.0): return magic(r = real, i = imag) \u4e0d\u8981\u7528\u7a7a\u683c\u6765\u5782\u76f4\u5bf9\u9f50\u591a\u884c\u95f4\u7684\u6807\u8bb0, \u56e0\u4e3a\u8fd9\u4f1a\u6210\u4e3a\u7ef4\u62a4\u7684\u8d1f\u62c5(\u9002\u7528\u4e8e:, #, =\u7b49): .. code-block:: python Yes: foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { \"foo\": 1, \"long_name\": 2, } .. code-block:: python No: foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { \"foo\" : 1, \"long_name\": 2, } Shebang .. tip:: \u5927\u90e8\u5206.py\u6587\u4ef6\u4e0d\u5fc5\u4ee5#!\u4f5c\u4e3a\u6587\u4ef6\u7684\u5f00\u59cb. \u6839\u636e PEP-394 <http://www.python.org/dev/peps/pep-0394/> _ , \u7a0b\u5e8f\u7684main\u6587\u4ef6\u5e94\u8be5\u4ee5 #!/usr/bin/python2\u6216\u8005 #!/usr/bin/python3\u5f00\u59cb. (\u8bd1\u8005\u6ce8: \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d, Shebang <http://en.wikipedia.org/wiki/Shebang_(Unix)> _ (\u4e5f\u79f0\u4e3aHashbang)\u662f\u4e00\u4e2a\u7531\u4e95\u53f7\u548c\u53f9\u53f7\u6784\u6210\u7684\u5b57\u7b26\u4e32\u884c(#!), \u5176\u51fa\u73b0\u5728\u6587\u672c\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u7684\u524d\u4e24\u4e2a\u5b57\u7b26. \u5728\u6587\u4ef6\u4e2d\u5b58\u5728Shebang\u7684\u60c5\u51b5\u4e0b, \u7c7bUnix\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u8f7d\u5165\u5668\u4f1a\u5206\u6790Shebang\u540e\u7684\u5185\u5bb9, \u5c06\u8fd9\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u89e3\u91ca\u5668\u6307\u4ee4, \u5e76\u8c03\u7528\u8be5\u6307\u4ee4, \u5e76\u5c06\u8f7d\u6709Shebang\u7684\u6587\u4ef6\u8def\u5f84\u4f5c\u4e3a\u8be5\u89e3\u91ca\u5668\u7684\u53c2\u6570. \u4f8b\u5982, \u4ee5\u6307\u4ee4#!/bin/sh\u5f00\u5934\u7684\u6587\u4ef6\u5728\u6267\u884c\u65f6\u4f1a\u5b9e\u9645\u8c03\u7528/bin/sh\u7a0b\u5e8f.) !\u5148\u7528\u4e8e\u5e2e\u52a9\u5185\u6838\u627e\u5230Python\u89e3\u91ca\u5668, \u4f46\u662f\u5728\u5bfc\u5165\u6a21\u5757\u65f6, \u5c06\u4f1a\u88ab\u5ffd\u7565. \u56e0\u6b64\u53ea\u6709\u88ab\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u4e2d\u624d\u6709\u5fc5\u8981\u52a0\u5165#!. .. _comments: \u6ce8\u91ca .. tip:: \u786e\u4fdd\u5bf9\u6a21\u5757, \u51fd\u6570, \u65b9\u6cd5\u548c\u884c\u5185\u6ce8\u91ca\u4f7f\u7528\u6b63\u786e\u7684\u98ce\u683c \u6587\u6863\u5b57\u7b26\u4e32 Python\u6709\u4e00\u79cd\u72ec\u4e00\u65e0\u4e8c\u7684\u7684\u6ce8\u91ca\u65b9\u5f0f: \u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32. \u6587\u6863\u5b57\u7b26\u4e32\u662f\u5305, \u6a21\u5757, \u7c7b\u6216\u51fd\u6570\u91cc\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5. \u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u7684__doc__\u6210\u5458\u88ab\u81ea\u52a8\u63d0\u53d6, \u5e76\u4e14\u88abpydoc\u6240\u7528. (\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u6a21\u5757\u4e0a\u8fd0\u884cpydoc\u8bd5\u4e00\u628a, \u770b\u770b\u5b83\u957f\u4ec0\u4e48\u6837). \u6211\u4eec\u5bf9\u6587\u6863\u5b57\u7b26\u4e32\u7684\u60ef\u4f8b\u662f\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7\"\"\"( `PEP-257 <http://www.python.org/dev/peps/pep-0257/>`_ ). \u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u8fd9\u6837\u7ec4\u7ec7: \u9996\u5148\u662f\u4e00\u884c\u4ee5\u53e5\u53f7, \u95ee\u53f7\u6216\u60ca\u53f9\u53f7\u7ed3\u5c3e\u7684\u6982\u8ff0(\u6216\u8005\u8be5\u6587\u6863\u5b57\u7b26\u4e32\u5355\u7eaf\u53ea\u6709\u4e00\u884c). \u63a5\u7740\u662f\u4e00\u4e2a\u7a7a\u884c. \u63a5\u7740\u662f\u6587\u6863\u5b57\u7b26\u4e32\u5269\u4e0b\u7684\u90e8\u5206, \u5b83\u5e94\u8be5\u4e0e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5f15\u53f7\u5bf9\u9f50. \u4e0b\u9762\u6709\u66f4\u591a\u6587\u6863\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u89c4\u8303. \u6a21\u5757 \u6bcf\u4e2a\u6587\u4ef6\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bb8\u53ef\u6837\u677f. \u6839\u636e\u9879\u76ee\u4f7f\u7528\u7684\u8bb8\u53ef(\u4f8b\u5982, Apache 2.0, BSD, LGPL, GPL), \u9009\u62e9\u5408\u9002\u7684\u6837\u677f. \u51fd\u6570\u548c\u65b9\u6cd5 \u4e0b\u6587\u6240\u6307\u7684\u51fd\u6570,\u5305\u62ec\u51fd\u6570, \u65b9\u6cd5, \u4ee5\u53ca\u751f\u6210\u5668. \u4e00\u4e2a\u51fd\u6570\u5fc5\u987b\u8981\u6709\u6587\u6863\u5b57\u7b26\u4e32, \u9664\u975e\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6: #. \u5916\u90e8\u4e0d\u53ef\u89c1 #. \u975e\u5e38\u77ed\u5c0f #. \u7b80\u5355\u660e\u4e86 \u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u5305\u542b\u51fd\u6570\u505a\u4ec0\u4e48, \u4ee5\u53ca\u8f93\u5165\u548c\u8f93\u51fa\u7684\u8be6\u7ec6\u63cf\u8ff0. \u901a\u5e38, \u4e0d\u5e94\u8be5\u63cf\u8ff0\"\u600e\u4e48\u505a\", \u9664\u975e\u662f\u4e00\u4e9b\u590d\u6742\u7684\u7b97\u6cd5. \u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f, \u5f53\u522b\u4eba\u7f16\u5199\u4ee3\u7801\u8c03\u7528\u8be5\u51fd\u6570\u65f6, \u4ed6\u4e0d\u9700\u8981\u770b\u4e00\u884c\u4ee3\u7801, \u53ea\u8981\u770b\u6587\u6863\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u4e86. \u5bf9\u4e8e\u590d\u6742\u7684\u4ee3\u7801, \u5728\u4ee3\u7801\u65c1\u8fb9\u52a0\u6ce8\u91ca\u4f1a\u6bd4\u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u66f4\u6709\u610f\u4e49. \u5173\u4e8e\u51fd\u6570\u7684\u51e0\u4e2a\u65b9\u9762\u5e94\u8be5\u5728\u7279\u5b9a\u7684\u5c0f\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u8bb0\u5f55\uff0c \u8fd9\u51e0\u4e2a\u65b9\u9762\u5982\u4e0b\u6587\u6240\u8ff0. \u6bcf\u8282\u5e94\u8be5\u4ee5\u4e00\u4e2a\u6807\u9898\u884c\u5f00\u59cb. \u6807\u9898\u884c\u4ee5\u5192\u53f7\u7ed3\u5c3e. \u9664\u6807\u9898\u884c\u5916, \u8282\u7684\u5176\u4ed6\u5185\u5bb9\u5e94\u88ab\u7f29\u8fdb2\u4e2a\u7a7a\u683c. Args: \u5217\u51fa\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u5b57, \u5e76\u5728\u540d\u5b57\u540e\u4f7f\u7528\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u7a7a\u683c, \u5206\u9694\u5bf9\u8be5\u53c2\u6570\u7684\u63cf\u8ff0.\u5982\u679c\u63cf\u8ff0\u592a\u957f\u8d85\u8fc7\u4e86\u5355\u884c80\u5b57\u7b26,\u4f7f\u75282\u6216\u80054\u4e2a\u7a7a\u683c\u7684\u60ac\u6302\u7f29\u8fdb(\u4e0e\u6587\u4ef6\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u4e00\u81f4). \u63cf\u8ff0\u5e94\u8be5\u5305\u62ec\u6240\u9700\u7684\u7c7b\u578b\u548c\u542b\u4e49. \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u63a5\u53d7*foo(\u53ef\u53d8\u957f\u5ea6\u53c2\u6570\u5217\u8868)\u6216\u8005**bar (\u4efb\u610f\u5173\u952e\u5b57\u53c2\u6570), \u5e94\u8be5\u8be6\u7ec6\u5217\u51fa*foo\u548c**bar. Returns: (\u6216\u8005 Yields: \u7528\u4e8e\u751f\u6210\u5668) \u63cf\u8ff0\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8bed\u4e49. \u5982\u679c\u51fd\u6570\u8fd4\u56deNone, \u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7701\u7565. Raises: \u5217\u51fa\u4e0e\u63a5\u53e3\u6709\u5173\u7684\u6240\u6709\u5f02\u5e38. .. code-block:: python def fetch_bigtable_rows(big_table, keys, other_silly_variable=None): \"\"\"Fetches rows from a Bigtable. Retrieves rows pertaining to the given keys from the Table instance represented by big_table. Silly things may happen if other_silly_variable is not None. Args: big_table: An open Bigtable Table instance. keys: A sequence of strings representing the key of each table row to fetch. other_silly_variable: Another optional variable, that has a much longer name than the other args, and which does nothing. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: {'Serak': ('Rigel VII', 'Preparer'), 'Zim': ('Irk', 'Invader'), 'Lrrr': ('Omicron Persei 8', 'Emperor')} If a key from the keys argument is missing from the dictionary, then that row was not found in the table. Raises: IOError: An error occurred accessing the bigtable.Table object. \"\"\" pass \u7c7b \u7c7b\u5e94\u8be5\u5728\u5176\u5b9a\u4e49\u4e0b\u6709\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u8be5\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32. \u5982\u679c\u4f60\u7684\u7c7b\u6709\u516c\u5171\u5c5e\u6027(Attributes), \u90a3\u4e48\u6587\u6863\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u5c5e\u6027(Attributes)\u6bb5. \u5e76\u4e14\u5e94\u8be5\u9075\u5b88\u548c\u51fd\u6570\u53c2\u6570\u76f8\u540c\u7684\u683c\u5f0f. .. code-block:: python class SampleClass(object): \"\"\"Summary of class here. Longer class information.... Longer class information.... Attributes: likes_spam: A boolean indicating if we like SPAM or not. eggs: An integer count of the eggs we have laid. \"\"\" def __init__(self, likes_spam=False): \"\"\"Inits SampleClass with blah.\"\"\" self.likes_spam = likes_spam self.eggs = 0 def public_method(self): \"\"\"Performs operation blah.\"\"\" \u5757\u6ce8\u91ca\u548c\u884c\u6ce8\u91ca \u6700\u9700\u8981\u5199\u6ce8\u91ca\u7684\u662f\u4ee3\u7801\u4e2d\u90a3\u4e9b\u6280\u5de7\u6027\u7684\u90e8\u5206. \u5982\u679c\u4f60\u5728\u4e0b\u6b21 `\u4ee3\u7801\u5ba1\u67e5 <http://en.wikipedia.org/wiki/Code_review>`_ \u7684\u65f6\u5019\u5fc5\u987b\u89e3\u91ca\u4e00\u4e0b, \u90a3\u4e48\u4f60\u5e94\u8be5\u73b0\u5728\u5c31\u7ed9\u5b83\u5199\u6ce8\u91ca. \u5bf9\u4e8e\u590d\u6742\u7684\u64cd\u4f5c, \u5e94\u8be5\u5728\u5176\u64cd\u4f5c\u5f00\u59cb\u524d\u5199\u4e0a\u82e5\u5e72\u884c\u6ce8\u91ca. \u5bf9\u4e8e\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\u7684\u4ee3\u7801, \u5e94\u5728\u5176\u884c\u5c3e\u6dfb\u52a0\u6ce8\u91ca. .. code-block:: python # We use a weighted dictionary search to find out where i is in # the array. We extrapolate position based on the largest num # in the array and the array size and then do binary search to # get the exact number. if i & (i-1) == 0: # true iff i is a power of 2 \u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027, \u6ce8\u91ca\u5e94\u8be5\u81f3\u5c11\u79bb\u5f00\u4ee3\u78012\u4e2a\u7a7a\u683c. \u53e6\u4e00\u65b9\u9762, \u7edd\u4e0d\u8981\u63cf\u8ff0\u4ee3\u7801. \u5047\u8bbe\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u6bd4\u4f60\u66f4\u61c2Python, \u4ed6\u53ea\u662f\u4e0d\u77e5\u9053\u4f60\u7684\u4ee3\u7801\u8981\u505a\u4ec0\u4e48. .. code-block:: python # BAD COMMENT: Now go through the b array and make sure whenever i occurs # the next element is i+1 \u7c7b .. tip:: \u5982\u679c\u4e00\u4e2a\u7c7b\u4e0d\u7ee7\u627f\u81ea\u5176\u5b83\u7c7b, \u5c31\u663e\u5f0f\u7684\u4eceobject\u7ee7\u627f. \u5d4c\u5957\u7c7b\u4e5f\u4e00\u6837. .. code-block:: python Yes: class SampleClass(object): pass class OuterClass(object): class InnerClass(object): pass class ChildClass(ParentClass): \"\"\"Explicitly inherits from another class already.\"\"\" .. code-block:: python No: class SampleClass: pass class OuterClass: class InnerClass: pass \u7ee7\u627f\u81ea object \u662f\u4e3a\u4e86\u4f7f\u5c5e\u6027(properties)\u6b63\u5e38\u5de5\u4f5c, \u5e76\u4e14\u8fd9\u6837\u53ef\u4ee5\u4fdd\u62a4\u4f60\u7684\u4ee3\u7801, \u4f7f\u5176\u4e0d\u53d7 PEP-3000 <http://www.python.org/dev/peps/pep-3000/> _ \u7684\u4e00\u4e2a\u7279\u6b8a\u7684\u6f5c\u5728\u4e0d\u517c\u5bb9\u6027\u5f71\u54cd. \u8fd9\u6837\u505a\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u65b9\u6cd5, \u8fd9\u4e9b\u65b9\u6cd5\u5b9e\u73b0\u4e86\u5bf9\u8c61\u7684\u9ed8\u8ba4\u8bed\u4e49, \u5305\u62ec __new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__ . \u5b57\u7b26\u4e32 .. tip:: \u5373\u4f7f\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32, \u4f7f\u7528%\u64cd\u4f5c\u7b26\u6216\u8005\u683c\u5f0f\u5316\u65b9\u6cd5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u4e0d\u8fc7\u4e5f\u4e0d\u80fd\u4e00\u6982\u800c\u8bba, \u4f60\u9700\u8981\u5728+\u548c%\u4e4b\u95f4\u597d\u597d\u5224\u5b9a. .. code-block:: python Yes: x = a + b x = '%s, %s!' % (imperative, expletive) x = '{}, {}!'.format(imperative, expletive) x = 'name: %s; score: %d' % (name, n) x = 'name: {}; score: {}'.format(name, n) .. code-block:: python No: x = '%s%s' % (a, b) # use + in this case x = '{}{}'.format(a, b) # use + in this case x = imperative + ', ' + expletive + '!' x = 'name: ' + name + '; score: ' + str(n) \u907f\u514d\u5728\u5faa\u73af\u4e2d\u7528+\u548c+=\u64cd\u4f5c\u7b26\u6765\u7d2f\u52a0\u5b57\u7b26\u4e32. \u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684, \u8fd9\u6837\u505a\u4f1a\u521b\u5efa\u4e0d\u5fc5\u8981\u7684\u4e34\u65f6\u5bf9\u8c61, \u5e76\u4e14\u5bfc\u81f4\u4e8c\u6b21\u65b9\u800c\u4e0d\u662f\u7ebf\u6027\u7684\u8fd0\u884c\u65f6\u95f4. \u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848, \u4f60\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u52a0\u5165\u5217\u8868, \u7136\u540e\u5728\u5faa\u73af\u7ed3\u675f\u540e\u7528 .join \u8fde\u63a5\u5217\u8868. (\u4e5f\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u5199\u5165\u4e00\u4e2a cStringIO.StringIO \u7f13\u5b58\u4e2d.) .. code-block:: python Yes: items = ['<table>'] for last_name, first_name in employee_list: items.append('<tr><td>%s, %s</td></tr>' % (last_name, first_name)) items.append('</table>') employee_table = ''.join(items) .. code-block:: python No: employee_table = '<table>' for last_name, first_name in employee_list: employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name) employee_table += '</table>' \u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d, \u4fdd\u6301\u4f7f\u7528\u5b57\u7b26\u4e32\u5f15\u53f7\u7684\u4e00\u81f4\u6027. \u4f7f\u7528\u5355\u5f15\u53f7'\u6216\u8005\u53cc\u5f15\u53f7\"\u4e4b\u4e00\u7528\u4ee5\u5f15\u7528\u5b57\u7b26\u4e32, \u5e76\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u6cbf\u7528. \u5728\u5b57\u7b26\u4e32\u5185\u53ef\u4ee5\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u5f15\u53f7, \u4ee5\u907f\u514d\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528. GPyLint\u5df2\u7ecf\u52a0\u5165\u4e86\u8fd9\u4e00\u68c0\u67e5. (\u8bd1\u8005\u6ce8:GPyLint\u7591\u4e3a\u7b14\u8bef, \u5e94\u4e3aPyLint.) .. code-block:: python Yes: Python('Why are you hiding your eyes?') Gollum(\"I'm scared of lint errors.\") Narrator('\"Good!\" thought a happy Python reviewer.') .. code-block:: python No: Python(\"Why are you hiding your eyes?\") Gollum('The lint. It burns. It burns us.') Gollum(\"Always the great lint. Watching. Watching.\") \u4e3a\u591a\u884c\u5b57\u7b26\u4e32\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7\"\"\"\u800c\u975e\u4e09\u91cd\u5355\u5f15\u53f7'''. \u5f53\u4e14\u4ec5\u5f53\u9879\u76ee\u4e2d\u4f7f\u7528\u5355\u5f15\u53f7'\u6765\u5f15\u7528\u5b57\u7b26\u4e32\u65f6, \u624d\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e09\u91cd'''\u4e3a\u975e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u591a\u884c\u5b57\u7b26\u4e32\u6765\u6807\u8bc6\u5f15\u7528. \u6587\u6863\u5b57\u7b26\u4e32\u5fc5\u987b\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7\"\"\". \u4e0d\u8fc7\u8981\u6ce8\u610f, \u901a\u5e38\u7528\u9690\u5f0f\u884c\u8fde\u63a5\u66f4\u6e05\u6670, \u56e0\u4e3a\u591a\u884c\u5b57\u7b26\u4e32\u4e0e\u7a0b\u5e8f\u5176\u4ed6\u90e8\u5206\u7684\u7f29\u8fdb\u65b9\u5f0f\u4e0d\u4e00\u81f4. .. code-block:: python Yes: print (\"This is much nicer.\\n\" \"Do it this way.\\n\") .. code-block:: python No: print \"\"\"This is pretty ugly. Don't do this. \"\"\" \u6587\u4ef6\u548csockets .. tip:: \u5728\u6587\u4ef6\u548csockets\u7ed3\u675f\u65f6, \u663e\u5f0f\u7684\u5173\u95ed\u5b83. \u9664\u6587\u4ef6\u5916, sockets\u6216\u5176\u4ed6\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\u5728\u6ca1\u6709\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u6253\u5f00, \u4f1a\u6709\u8bb8\u591a\u526f\u4f5c\u7528, \u4f8b\u5982: . \u5b83\u4eec\u53ef\u80fd\u4f1a\u6d88\u8017\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90, \u5982\u6587\u4ef6\u63cf\u8ff0\u7b26. \u5982\u679c\u8fd9\u4e9b\u8d44\u6e90\u5728\u4f7f\u7528\u540e\u6ca1\u6709\u53ca\u65f6\u5f52\u8fd8\u7cfb\u7edf, \u90a3\u4e48\u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4ee3\u7801\u4f1a\u5c06\u8d44\u6e90\u6d88\u8017\u6b86\u5c3d. . \u6301\u6709\u6587\u4ef6\u5c06\u4f1a\u963b\u6b62\u5bf9\u4e8e\u6587\u4ef6\u7684\u5176\u4ed6\u8bf8\u5982\u79fb\u52a8\u3001\u5220\u9664\u4e4b\u7c7b\u7684\u64cd\u4f5c. . \u4ec5\u4ec5\u662f\u4ece\u903b\u8f91\u4e0a\u5173\u95ed\u6587\u4ef6\u548csockets, \u90a3\u4e48\u5b83\u4eec\u4ecd\u7136\u53ef\u80fd\u4f1a\u88ab\u5176\u5171\u4eab\u7684\u7a0b\u5e8f\u5728\u65e0\u610f\u4e2d\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c. \u53ea\u6709\u5f53\u5b83\u4eec\u771f\u6b63\u88ab\u5173\u95ed\u540e, \u5bf9\u4e8e\u5b83\u4eec\u5c1d\u8bd5\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u5c06\u4f1a\u8dd1\u51fa\u5f02\u5e38, \u5e76\u4f7f\u5f97\u95ee\u9898\u5feb\u901f\u663e\u73b0\u51fa\u6765. \u800c\u4e14, \u5e7b\u60f3\u5f53\u6587\u4ef6\u5bf9\u8c61\u6790\u6784\u65f6, \u6587\u4ef6\u548csockets\u4f1a\u81ea\u52a8\u5173\u95ed, \u8bd5\u56fe\u5c06\u6587\u4ef6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u6587\u4ef6\u7684\u72b6\u6001\u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u60f3\u6cd5, \u90fd\u662f\u4e0d\u73b0\u5b9e\u7684. \u56e0\u4e3a\u6709\u5982\u4e0b\u539f\u56e0: . \u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u8fd0\u884c\u73af\u5883\u4f1a\u771f\u6b63\u7684\u6267\u884c\u6587\u4ef6\u7684\u6790\u6784. \u4e0d\u540c\u7684Python\u5b9e\u73b0\u91c7\u7528\u4e0d\u540c\u7684\u5185\u5b58\u7ba1\u7406\u6280\u672f, \u6bd4\u5982\u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236. \u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u751f\u547d\u5468\u671f\u88ab\u4efb\u610f\u65e0\u9650\u5236\u7684\u5ef6\u957f. . \u5bf9\u4e8e\u6587\u4ef6\u610f\u5916\u7684\u5f15\u7528,\u4f1a\u5bfc\u81f4\u5bf9\u4e8e\u6587\u4ef6\u7684\u6301\u6709\u65f6\u95f4\u8d85\u51fa\u9884\u671f(\u6bd4\u5982\u5bf9\u4e8e\u5f02\u5e38\u7684\u8ddf\u8e2a, \u5305\u542b\u6709\u5168\u5c40\u53d8\u91cf\u7b49). \u63a8\u8350\u4f7f\u7528 \"with\"\u8bed\u53e5 <http://docs.python.org/reference/compound_stmts.html#the-with-statement> _ \u4ee5\u7ba1\u7406\u6587\u4ef6: .. code-block:: python with open(\"hello.txt\") as hello_file: for line in hello_file: print line \u5bf9\u4e8e\u4e0d\u652f\u6301\u4f7f\u7528\"with\"\u8bed\u53e5\u7684\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61,\u4f7f\u7528 contextlib.closing(): .. code-block:: python import contextlib with contextlib.closing(urllib.urlopen(\"http://www.python.org/\")) as front_page: for line in front_page: print line Legacy AppEngine \u4e2dPython 2.5\u7684\u4ee3\u7801\u5982\u4f7f\u7528\"with\"\u8bed\u53e5, \u9700\u8981\u6dfb\u52a0 \"from future import with_statement\". TODO\u6ce8\u91ca .. tip:: \u4e3a\u4e34\u65f6\u4ee3\u7801\u4f7f\u7528TODO\u6ce8\u91ca, \u5b83\u662f\u4e00\u79cd\u77ed\u671f\u89e3\u51b3\u65b9\u6848. \u4e0d\u7b97\u5b8c\u7f8e, \u4f46\u591f\u597d\u4e86. TODO\u6ce8\u91ca\u5e94\u8be5\u5728\u6240\u6709\u5f00\u5934\u5904\u5305\u542b\"TODO\"\u5b57\u7b26\u4e32, \u7d27\u8ddf\u7740\u662f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4f60\u7684\u540d\u5b57, email\u5730\u5740\u6216\u5176\u5b83\u6807\u8bc6\u7b26. \u7136\u540e\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u5192\u53f7. \u63a5\u7740\u5fc5\u987b\u6709\u4e00\u884c\u6ce8\u91ca, \u89e3\u91ca\u8981\u505a\u4ec0\u4e48. \u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u6709\u4e00\u4e2a\u7edf\u4e00\u7684TODO\u683c\u5f0f, \u8fd9\u6837\u6dfb\u52a0\u6ce8\u91ca\u7684\u4eba\u5c31\u53ef\u4ee5\u641c\u7d22\u5230(\u5e76\u53ef\u4ee5\u6309\u9700\u63d0\u4f9b\u66f4\u591a\u7ec6\u8282). \u5199\u4e86TODO\u6ce8\u91ca\u5e76\u4e0d\u4fdd\u8bc1\u5199\u7684\u4eba\u4f1a\u4eb2\u81ea\u89e3\u51b3\u95ee\u9898. \u5f53\u4f60\u5199\u4e86\u4e00\u4e2aTODO, \u8bf7\u6ce8\u4e0a\u4f60\u7684\u540d\u5b57. .. code-block:: python # TODO(kl@gmail.com): Use a \"*\" here for string repetition. # TODO(Zeke) Change this to use relations. \u5982\u679c\u4f60\u7684TODO\u662f\"\u5c06\u6765\u505a\u67d0\u4e8b\"\u7684\u5f62\u5f0f, \u90a3\u4e48\u8bf7\u786e\u4fdd\u4f60\u5305\u542b\u4e86\u4e00\u4e2a\u6307\u5b9a\u7684\u65e5\u671f(\"2009\u5e7411\u6708\u89e3\u51b3\")\u6216\u8005\u4e00\u4e2a\u7279\u5b9a\u7684\u4e8b\u4ef6(\"\u7b49\u5230\u6240\u6709\u7684\u5ba2\u6237\u90fd\u53ef\u4ee5\u5904\u7406XML\u8bf7\u6c42\u5c31\u79fb\u9664\u8fd9\u4e9b\u4ee3\u7801\"). \u5bfc\u5165\u683c\u5f0f .. tip:: \u6bcf\u4e2a\u5bfc\u5165\u5e94\u8be5\u72ec\u5360\u4e00\u884c .. code-block:: python Yes: import os import sys .. code-block:: python No: import os, sys \u5bfc\u5165\u603b\u5e94\u8be5\u653e\u5728\u6587\u4ef6\u9876\u90e8, \u4f4d\u4e8e\u6a21\u5757\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32\u4e4b\u540e, \u6a21\u5757\u5168\u5c40\u53d8\u91cf\u548c\u5e38\u91cf\u4e4b\u524d. \u5bfc\u5165\u5e94\u8be5\u6309\u7167\u4ece\u6700\u901a\u7528\u5230\u6700\u4e0d\u901a\u7528\u7684\u987a\u5e8f\u5206\u7ec4: . \u6807\u51c6\u5e93\u5bfc\u5165 . \u7b2c\u4e09\u65b9\u5e93\u5bfc\u5165 . \u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u5bfc\u5165 \u6bcf\u79cd\u5206\u7ec4\u4e2d, \u5e94\u8be5\u6839\u636e\u6bcf\u4e2a\u6a21\u5757\u7684\u5b8c\u6574\u5305\u8def\u5f84\u6309\u5b57\u5178\u5e8f\u6392\u5e8f, \u5ffd\u7565\u5927\u5c0f\u5199. .. code-block:: python import foo from foo import bar from foo.bar import baz from foo.bar import Quux from Foob import ar \u8bed\u53e5 .. tip:: \u901a\u5e38\u6bcf\u4e2a\u8bed\u53e5\u5e94\u8be5\u72ec\u5360\u4e00\u884c \u4e0d\u8fc7, \u5982\u679c\u6d4b\u8bd5\u7ed3\u679c\u4e0e\u6d4b\u8bd5\u8bed\u53e5\u5728\u4e00\u884c\u653e\u5f97\u4e0b, \u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u540c\u4e00\u884c. \u5982\u679c\u662fif\u8bed\u53e5, \u53ea\u6709\u5728\u6ca1\u6709else\u65f6\u624d\u80fd\u8fd9\u6837\u505a. \u7279\u522b\u5730, \u7edd\u4e0d\u8981\u5bf9 try/except \u8fd9\u6837\u505a, \u56e0\u4e3atry\u548cexcept\u4e0d\u80fd\u653e\u5728\u540c\u4e00\u884c. .. code-block:: python Yes: if foo: bar(foo) .. code-block:: python No: if foo: bar(foo) else: baz(foo) try: bar(foo) except ValueError: baz(foo) try: bar(foo) except ValueError: baz(foo) \u8bbf\u95ee\u63a7\u5236 .. tip:: \u5728Python\u4e2d, \u5bf9\u4e8e\u7410\u788e\u53c8\u4e0d\u592a\u91cd\u8981\u7684\u8bbf\u95ee\u51fd\u6570, \u4f60\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u516c\u6709\u53d8\u91cf\u6765\u53d6\u4ee3\u5b83\u4eec, \u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u51fd\u6570\u8c03\u7528\u5f00\u9500. \u5f53\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u65f6, \u4f60\u53ef\u4ee5\u7528\u5c5e\u6027(property)\u6765\u4fdd\u6301\u8bed\u6cd5\u7684\u4e00\u81f4\u6027. (\u8bd1\u8005\u6ce8: \u91cd\u89c6\u5c01\u88c5\u7684\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u5458\u770b\u5230\u8fd9\u4e2a\u53ef\u80fd\u4f1a\u5f88\u53cd\u611f, \u56e0\u4e3a\u4ed6\u4eec\u4e00\u76f4\u88ab\u6559\u80b2: \u6240\u6709\u6210\u5458\u53d8\u91cf\u90fd\u5fc5\u987b\u662f\u79c1\u6709\u7684! \u5176\u5b9e, \u90a3\u771f\u7684\u662f\u6709\u70b9\u9ebb\u70e6\u554a. \u8bd5\u7740\u53bb\u63a5\u53d7Pythonic\u54f2\u5b66\u5427) \u53e6\u4e00\u65b9\u9762, \u5982\u679c\u8bbf\u95ee\u66f4\u590d\u6742, \u6216\u8005\u53d8\u91cf\u7684\u8bbf\u95ee\u5f00\u9500\u5f88\u663e\u8457, \u90a3\u4e48\u4f60\u5e94\u8be5\u4f7f\u7528\u50cf get_foo() \u548c set_foo() \u8fd9\u6837\u7684\u51fd\u6570\u8c03\u7528. \u5982\u679c\u4e4b\u524d\u7684\u4ee3\u7801\u884c\u4e3a\u5141\u8bb8\u901a\u8fc7\u5c5e\u6027(property)\u8bbf\u95ee , \u90a3\u4e48\u5c31\u4e0d\u8981\u5c06\u65b0\u7684\u8bbf\u95ee\u51fd\u6570\u4e0e\u5c5e\u6027\u7ed1\u5b9a. \u8fd9\u6837, \u4efb\u4f55\u8bd5\u56fe\u901a\u8fc7\u8001\u65b9\u6cd5\u8bbf\u95ee\u53d8\u91cf\u7684\u4ee3\u7801\u5c31\u6ca1\u6cd5\u8fd0\u884c, \u4f7f\u7528\u8005\u4e5f\u5c31\u4f1a\u610f\u8bc6\u5230\u590d\u6742\u6027\u53d1\u751f\u4e86\u53d8\u5316. \u547d\u540d .. tip:: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name. \u5e94\u8be5\u907f\u514d\u7684\u540d\u79f0 #. \u5355\u5b57\u7b26\u540d\u79f0, \u9664\u4e86\u8ba1\u6570\u5668\u548c\u8fed\u4ee3\u5668. #. \u5305/\u6a21\u5757\u540d\u4e2d\u7684\u8fde\u5b57\u7b26(-) #. \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u5e76\u7ed3\u5c3e\u7684\u540d\u79f0(Python\u4fdd\u7559, \u4f8b\u5982__init__) \u547d\u540d\u7ea6\u5b9a #. \u6240\u8c13\"\u5185\u90e8(Internal)\"\u8868\u793a\u4ec5\u6a21\u5757\u5185\u53ef\u7528, \u6216\u8005, \u5728\u7c7b\u5185\u662f\u4fdd\u62a4\u6216\u79c1\u6709\u7684. #. \u7528\u5355\u4e0b\u5212\u7ebf(_)\u5f00\u5934\u8868\u793a\u6a21\u5757\u53d8\u91cf\u6216\u51fd\u6570\u662fprotected\u7684(\u4f7f\u7528import * from\u65f6\u4e0d\u4f1a\u5305\u542b). #. \u7528\u53cc\u4e0b\u5212\u7ebf(__)\u5f00\u5934\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u65b9\u6cd5\u8868\u793a\u7c7b\u5185\u79c1\u6709. #. \u5c06\u76f8\u5173\u7684\u7c7b\u548c\u9876\u7ea7\u51fd\u6570\u653e\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u91cc. \u4e0d\u50cfJava, \u6ca1\u5fc5\u8981\u9650\u5236\u4e00\u4e2a\u7c7b\u4e00\u4e2a\u6a21\u5757. #. \u5bf9\u7c7b\u540d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd(\u5982CapWords, \u5373Pascal\u98ce\u683c), \u4f46\u662f\u6a21\u5757\u540d\u5e94\u8be5\u7528\u5c0f\u5199\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f(\u5982lower_with_under.py). \u5c3d\u7ba1\u5df2\u7ecf\u6709\u5f88\u591a\u73b0\u5b58\u7684\u6a21\u5757\u4f7f\u7528\u7c7b\u4f3c\u4e8eCapWords.py\u8fd9\u6837\u7684\u547d\u540d, \u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a, \u56e0\u4e3a\u5982\u679c\u6a21\u5757\u540d\u78b0\u5de7\u548c\u7c7b\u540d\u4e00\u81f4, \u8fd9\u4f1a\u8ba9\u4eba\u56f0\u6270. Python\u4e4b\u7236Guido\u63a8\u8350\u7684\u89c4\u8303 =========================== ==================== ====================================================================== Type Public Internal =========================== ==================== ====================================================================== Modules lower_with_under _lower_with_under Packages lower_with_under Classes CapWords _CapWords Exceptions CapWords Functions lower_with_under() _lower_with_under() Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names lower_with_under() _lower_with_under() (protected) or __lower_with_under() (private) Function/Method Parameters lower_with_under Local Variables lower_with_under =========================== ==================== ====================================================================== .. _main: Main .. tip:: \u5373\u4f7f\u662f\u4e00\u4e2a\u6253\u7b97\u88ab\u7528\u4f5c\u811a\u672c\u7684\u6587\u4ef6, \u4e5f\u5e94\u8be5\u662f\u53ef\u5bfc\u5165\u7684. \u5e76\u4e14\u7b80\u5355\u7684\u5bfc\u5165\u4e0d\u5e94\u8be5\u5bfc\u81f4\u8fd9\u4e2a\u811a\u672c\u7684\u4e3b\u529f\u80fd(main functionality)\u88ab\u6267\u884c, \u8fd9\u662f\u4e00\u79cd\u526f\u4f5c\u7528. \u4e3b\u529f\u80fd\u5e94\u8be5\u653e\u5728\u4e00\u4e2amain()\u51fd\u6570\u4e2d. \u5728Python\u4e2d, pydoc\u4ee5\u53ca\u5355\u5143\u6d4b\u8bd5\u8981\u6c42\u6a21\u5757\u5fc5\u987b\u662f\u53ef\u5bfc\u5165\u7684. \u4f60\u7684\u4ee3\u7801\u5e94\u8be5\u5728\u6267\u884c\u4e3b\u7a0b\u5e8f\u524d\u603b\u662f\u68c0\u67e5 if __name__ == '__main__' , \u8fd9\u6837\u5f53\u6a21\u5757\u88ab\u5bfc\u5165\u65f6\u4e3b\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c. .. code-block:: python def main(): ... if __name__ == '__main__': main() \u6240\u6709\u7684\u9876\u7ea7\u4ee3\u7801\u5728\u6a21\u5757\u5bfc\u5165\u65f6\u90fd\u4f1a\u88ab\u6267\u884c. \u8981\u5c0f\u5fc3\u4e0d\u8981\u53bb\u8c03\u7528\u51fd\u6570, \u521b\u5efa\u5bf9\u8c61, \u6216\u8005\u6267\u884c\u90a3\u4e9b\u4e0d\u5e94\u8be5\u5728\u4f7f\u7528pydoc\u65f6\u6267\u884c\u7684\u64cd\u4f5c.","title":"Python\u98ce\u683c\u89c4\u8303"},{"location":"python_style_rules/#python","text":"","title":"Python\u98ce\u683c\u89c4\u8303"},{"location":"python_style_rules/#_1","text":".. tip:: \u4e0d\u8981\u5728\u884c\u5c3e\u52a0\u5206\u53f7, \u4e5f\u4e0d\u8981\u7528\u5206\u53f7\u5c06\u4e24\u6761\u547d\u4ee4\u653e\u5728\u540c\u4e00\u884c. .. _line_length:","title":"\u5206\u53f7"},{"location":"python_style_rules/#_2","text":".. tip:: \u6bcf\u884c\u4e0d\u8d85\u8fc780\u4e2a\u5b57\u7b26 \u4f8b\u5916:","title":"\u884c\u957f\u5ea6"},{"location":"python_style_rules/#_3","text":"","title":". \u957f\u7684\u5bfc\u5165\u6a21\u5757\u8bed\u53e5"},{"location":"python_style_rules/#url","text":"\u4e0d\u8981\u4f7f\u7528\u53cd\u659c\u6760\u8fde\u63a5\u884c. Python\u4f1a\u5c06 \u5706\u62ec\u53f7, \u4e2d\u62ec\u53f7\u548c\u82b1\u62ec\u53f7\u4e2d\u7684\u884c\u9690\u5f0f\u7684\u8fde\u63a5\u8d77\u6765 <http://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining> _ , \u4f60\u53ef\u4ee5\u5229\u7528\u8fd9\u4e2a\u7279\u70b9. \u5982\u679c\u9700\u8981, \u4f60\u53ef\u4ee5\u5728\u8868\u8fbe\u5f0f\u5916\u56f4\u589e\u52a0\u4e00\u5bf9\u989d\u5916\u7684\u5706\u62ec\u53f7. .. code-block:: python Yes: foo_bar(self, width, height, color='black', design=None, x='foo', emphasis=None, highlight=0) if (width == 0 and height == 0 and color == 'red' and emphasis == 'strong'): \u5982\u679c\u4e00\u4e2a\u6587\u672c\u5b57\u7b26\u4e32\u5728\u4e00\u884c\u653e\u4e0d\u4e0b, \u53ef\u4ee5\u4f7f\u7528\u5706\u62ec\u53f7\u6765\u5b9e\u73b0\u9690\u5f0f\u884c\u8fde\u63a5: .. code-block:: python x = ('This will build a very long long ' 'long long long long long long string') \u5728\u6ce8\u91ca\u4e2d\uff0c\u5982\u679c\u5fc5\u8981\uff0c\u5c06\u957f\u7684URL\u653e\u5728\u4e00\u884c\u4e0a\u3002 .. code-block:: python Yes: # See details at # http://www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html .. code-block:: python No: # See details at # http://www.example.com/us/developer/documentation/api/content/\\ # v2.0/csv_file_name_extension_full_specification.html \u6ce8\u610f\u4e0a\u9762\u4f8b\u5b50\u4e2d\u7684\u5143\u7d20\u7f29\u8fdb; \u4f60\u53ef\u4ee5\u5728\u672c\u6587\u7684 :ref: \u7f29\u8fdb <indentation> \u90e8\u5206\u627e\u5230\u89e3\u91ca.","title":". \u6ce8\u91ca\u91cc\u7684URL"},{"location":"python_style_rules/#_4","text":".. tip:: \u5b81\u7f3a\u6bcb\u6ee5\u7684\u4f7f\u7528\u62ec\u53f7 \u9664\u975e\u662f\u7528\u4e8e\u5b9e\u73b0\u884c\u8fde\u63a5, \u5426\u5219\u4e0d\u8981\u5728\u8fd4\u56de\u8bed\u53e5\u6216\u6761\u4ef6\u8bed\u53e5\u4e2d\u4f7f\u7528\u62ec\u53f7. \u4e0d\u8fc7\u5728\u5143\u7ec4\u4e24\u8fb9\u4f7f\u7528\u62ec\u53f7\u662f\u53ef\u4ee5\u7684. .. code-block:: python Yes: if foo: bar() while x: x = bar() if x and y: bar() if not x: bar() return foo for (x, y) in dict.items(): ... .. code-block:: python No: if (x): bar() if not(x): bar() return (foo) .. _indentation:","title":"\u62ec\u53f7"},{"location":"python_style_rules/#_5","text":".. tip:: \u75284\u4e2a\u7a7a\u683c\u6765\u7f29\u8fdb\u4ee3\u7801 \u7edd\u5bf9\u4e0d\u8981\u7528tab, \u4e5f\u4e0d\u8981tab\u548c\u7a7a\u683c\u6df7\u7528. \u5bf9\u4e8e\u884c\u8fde\u63a5\u7684\u60c5\u51b5, \u4f60\u5e94\u8be5\u8981\u4e48\u5782\u76f4\u5bf9\u9f50\u6362\u884c\u7684\u5143\u7d20(\u89c1 :ref: \u884c\u957f\u5ea6 <line_length> \u90e8\u5206\u7684\u793a\u4f8b), \u6216\u8005\u4f7f\u75284\u7a7a\u683c\u7684\u60ac\u6302\u5f0f\u7f29\u8fdb(\u8fd9\u65f6\u7b2c\u4e00\u884c\u4e0d\u5e94\u8be5\u6709\u53c2\u6570): .. code-block:: python Yes: # Aligned with opening delimiter foo = long_function_name(var_one, var_two, var_three, var_four) # Aligned with opening delimiter in a dictionary foo = { long_dictionary_key: value1 + value2, ... } # 4-space hanging indent; nothing on first line foo = long_function_name( var_one, var_two, var_three, var_four) # 4-space hanging indent in a dictionary foo = { long_dictionary_key: long_dictionary_value, ... } .. code-block:: python No: # Stuff on first line forbidden foo = long_function_name(var_one, var_two, var_three, var_four) # 2-space hanging indent forbidden foo = long_function_name( var_one, var_two, var_three, var_four) # No hanging indent in a dictionary foo = { long_dictionary_key: long_dictionary_value, ... }","title":"\u7f29\u8fdb"},{"location":"python_style_rules/#_6","text":".. tip:: \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c, \u65b9\u6cd5\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e00\u884c \u9876\u7ea7\u5b9a\u4e49\u4e4b\u95f4\u7a7a\u4e24\u884c, \u6bd4\u5982\u51fd\u6570\u6216\u8005\u7c7b\u5b9a\u4e49. \u65b9\u6cd5\u5b9a\u4e49, \u7c7b\u5b9a\u4e49\u4e0e\u7b2c\u4e00\u4e2a\u65b9\u6cd5\u4e4b\u95f4, \u90fd\u5e94\u8be5\u7a7a\u4e00\u884c. \u51fd\u6570\u6216\u65b9\u6cd5\u4e2d, \u67d0\u4e9b\u5730\u65b9\u8981\u662f\u4f60\u89c9\u5f97\u5408\u9002, \u5c31\u7a7a\u4e00\u884c.","title":"\u7a7a\u884c"},{"location":"python_style_rules/#_7","text":".. tip:: \u6309\u7167\u6807\u51c6\u7684\u6392\u7248\u89c4\u8303\u6765\u4f7f\u7528\u6807\u70b9\u4e24\u8fb9\u7684\u7a7a\u683c \u62ec\u53f7\u5185\u4e0d\u8981\u6709\u7a7a\u683c. .. code-block:: python Yes: spam(ham[1], {eggs: 2}, []) .. code-block:: python No: spam( ham[ 1 ], { eggs: 2 }, [ ] ) \u4e0d\u8981\u5728\u9017\u53f7, \u5206\u53f7, \u5192\u53f7\u524d\u9762\u52a0\u7a7a\u683c, \u4f46\u5e94\u8be5\u5728\u5b83\u4eec\u540e\u9762\u52a0(\u9664\u4e86\u5728\u884c\u5c3e). .. code-block:: python Yes: if x == 4: print x, y x, y = y, x .. code-block:: python No: if x == 4 : print x , y x , y = y , x \u53c2\u6570\u5217\u8868, \u7d22\u5f15\u6216\u5207\u7247\u7684\u5de6\u62ec\u53f7\u524d\u4e0d\u5e94\u52a0\u7a7a\u683c. .. code-block:: python Yes: spam(1) .. code-block:: python no: spam (1) .. code-block:: python Yes: dict['key'] = list[index] .. code-block:: python No: dict ['key'] = list [index] \u5728\u4e8c\u5143\u64cd\u4f5c\u7b26\u4e24\u8fb9\u90fd\u52a0\u4e0a\u4e00\u4e2a\u7a7a\u683c, \u6bd4\u5982\u8d4b\u503c(=), \u6bd4\u8f83(==, <, >, !=, <>, <=, >=, in, not in, is, is not), \u5e03\u5c14(and, or, not). \u81f3\u4e8e\u7b97\u672f\u64cd\u4f5c\u7b26\u4e24\u8fb9\u7684\u7a7a\u683c\u8be5\u5982\u4f55\u4f7f\u7528, \u9700\u8981\u4f60\u81ea\u5df1\u597d\u597d\u5224\u65ad. \u4e0d\u8fc7\u4e24\u4fa7\u52a1\u5fc5\u8981\u4fdd\u6301\u4e00\u81f4. .. code-block:: python Yes: x == 1 .. code-block:: python No: x<1 \u5f53'='\u7528\u4e8e\u6307\u793a\u5173\u952e\u5b57\u53c2\u6570\u6216\u9ed8\u8ba4\u53c2\u6570\u503c\u65f6, \u4e0d\u8981\u5728\u5176\u4e24\u4fa7\u4f7f\u7528\u7a7a\u683c. .. code-block:: python Yes: def complex(real, imag=0.0): return magic(r=real, i=imag) .. code-block:: python No: def complex(real, imag = 0.0): return magic(r = real, i = imag) \u4e0d\u8981\u7528\u7a7a\u683c\u6765\u5782\u76f4\u5bf9\u9f50\u591a\u884c\u95f4\u7684\u6807\u8bb0, \u56e0\u4e3a\u8fd9\u4f1a\u6210\u4e3a\u7ef4\u62a4\u7684\u8d1f\u62c5(\u9002\u7528\u4e8e:, #, =\u7b49): .. code-block:: python Yes: foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { \"foo\": 1, \"long_name\": 2, } .. code-block:: python No: foo = 1000 # comment long_name = 2 # comment that should not be aligned dictionary = { \"foo\" : 1, \"long_name\": 2, }","title":"\u7a7a\u683c"},{"location":"python_style_rules/#shebang","text":".. tip:: \u5927\u90e8\u5206.py\u6587\u4ef6\u4e0d\u5fc5\u4ee5#!\u4f5c\u4e3a\u6587\u4ef6\u7684\u5f00\u59cb. \u6839\u636e PEP-394 <http://www.python.org/dev/peps/pep-0394/> _ , \u7a0b\u5e8f\u7684main\u6587\u4ef6\u5e94\u8be5\u4ee5 #!/usr/bin/python2\u6216\u8005 #!/usr/bin/python3\u5f00\u59cb. (\u8bd1\u8005\u6ce8: \u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d, Shebang <http://en.wikipedia.org/wiki/Shebang_(Unix)> _ (\u4e5f\u79f0\u4e3aHashbang)\u662f\u4e00\u4e2a\u7531\u4e95\u53f7\u548c\u53f9\u53f7\u6784\u6210\u7684\u5b57\u7b26\u4e32\u884c(#!), \u5176\u51fa\u73b0\u5728\u6587\u672c\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\u7684\u524d\u4e24\u4e2a\u5b57\u7b26. \u5728\u6587\u4ef6\u4e2d\u5b58\u5728Shebang\u7684\u60c5\u51b5\u4e0b, \u7c7bUnix\u64cd\u4f5c\u7cfb\u7edf\u7684\u7a0b\u5e8f\u8f7d\u5165\u5668\u4f1a\u5206\u6790Shebang\u540e\u7684\u5185\u5bb9, \u5c06\u8fd9\u4e9b\u5185\u5bb9\u4f5c\u4e3a\u89e3\u91ca\u5668\u6307\u4ee4, \u5e76\u8c03\u7528\u8be5\u6307\u4ee4, \u5e76\u5c06\u8f7d\u6709Shebang\u7684\u6587\u4ef6\u8def\u5f84\u4f5c\u4e3a\u8be5\u89e3\u91ca\u5668\u7684\u53c2\u6570. \u4f8b\u5982, \u4ee5\u6307\u4ee4#!/bin/sh\u5f00\u5934\u7684\u6587\u4ef6\u5728\u6267\u884c\u65f6\u4f1a\u5b9e\u9645\u8c03\u7528/bin/sh\u7a0b\u5e8f.)","title":"Shebang"},{"location":"python_style_rules/#python_1","text":".. _comments:","title":"!\u5148\u7528\u4e8e\u5e2e\u52a9\u5185\u6838\u627e\u5230Python\u89e3\u91ca\u5668, \u4f46\u662f\u5728\u5bfc\u5165\u6a21\u5757\u65f6, \u5c06\u4f1a\u88ab\u5ffd\u7565. \u56e0\u6b64\u53ea\u6709\u88ab\u76f4\u63a5\u6267\u884c\u7684\u6587\u4ef6\u4e2d\u624d\u6709\u5fc5\u8981\u52a0\u5165#!."},{"location":"python_style_rules/#_8","text":".. tip:: \u786e\u4fdd\u5bf9\u6a21\u5757, \u51fd\u6570, \u65b9\u6cd5\u548c\u884c\u5185\u6ce8\u91ca\u4f7f\u7528\u6b63\u786e\u7684\u98ce\u683c \u6587\u6863\u5b57\u7b26\u4e32 Python\u6709\u4e00\u79cd\u72ec\u4e00\u65e0\u4e8c\u7684\u7684\u6ce8\u91ca\u65b9\u5f0f: \u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32. \u6587\u6863\u5b57\u7b26\u4e32\u662f\u5305, \u6a21\u5757, \u7c7b\u6216\u51fd\u6570\u91cc\u7684\u7b2c\u4e00\u4e2a\u8bed\u53e5. \u8fd9\u4e9b\u5b57\u7b26\u4e32\u53ef\u4ee5\u901a\u8fc7\u5bf9\u8c61\u7684__doc__\u6210\u5458\u88ab\u81ea\u52a8\u63d0\u53d6, \u5e76\u4e14\u88abpydoc\u6240\u7528. (\u4f60\u53ef\u4ee5\u5728\u4f60\u7684\u6a21\u5757\u4e0a\u8fd0\u884cpydoc\u8bd5\u4e00\u628a, \u770b\u770b\u5b83\u957f\u4ec0\u4e48\u6837). \u6211\u4eec\u5bf9\u6587\u6863\u5b57\u7b26\u4e32\u7684\u60ef\u4f8b\u662f\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7\"\"\"( `PEP-257 <http://www.python.org/dev/peps/pep-0257/>`_ ). \u4e00\u4e2a\u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u8fd9\u6837\u7ec4\u7ec7: \u9996\u5148\u662f\u4e00\u884c\u4ee5\u53e5\u53f7, \u95ee\u53f7\u6216\u60ca\u53f9\u53f7\u7ed3\u5c3e\u7684\u6982\u8ff0(\u6216\u8005\u8be5\u6587\u6863\u5b57\u7b26\u4e32\u5355\u7eaf\u53ea\u6709\u4e00\u884c). \u63a5\u7740\u662f\u4e00\u4e2a\u7a7a\u884c. \u63a5\u7740\u662f\u6587\u6863\u5b57\u7b26\u4e32\u5269\u4e0b\u7684\u90e8\u5206, \u5b83\u5e94\u8be5\u4e0e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u7b2c\u4e00\u884c\u7684\u7b2c\u4e00\u4e2a\u5f15\u53f7\u5bf9\u9f50. \u4e0b\u9762\u6709\u66f4\u591a\u6587\u6863\u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u5316\u89c4\u8303. \u6a21\u5757 \u6bcf\u4e2a\u6587\u4ef6\u5e94\u8be5\u5305\u542b\u4e00\u4e2a\u8bb8\u53ef\u6837\u677f. \u6839\u636e\u9879\u76ee\u4f7f\u7528\u7684\u8bb8\u53ef(\u4f8b\u5982, Apache 2.0, BSD, LGPL, GPL), \u9009\u62e9\u5408\u9002\u7684\u6837\u677f. \u51fd\u6570\u548c\u65b9\u6cd5 \u4e0b\u6587\u6240\u6307\u7684\u51fd\u6570,\u5305\u62ec\u51fd\u6570, \u65b9\u6cd5, \u4ee5\u53ca\u751f\u6210\u5668. \u4e00\u4e2a\u51fd\u6570\u5fc5\u987b\u8981\u6709\u6587\u6863\u5b57\u7b26\u4e32, \u9664\u975e\u5b83\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6: #. \u5916\u90e8\u4e0d\u53ef\u89c1 #. \u975e\u5e38\u77ed\u5c0f #. \u7b80\u5355\u660e\u4e86 \u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u5305\u542b\u51fd\u6570\u505a\u4ec0\u4e48, \u4ee5\u53ca\u8f93\u5165\u548c\u8f93\u51fa\u7684\u8be6\u7ec6\u63cf\u8ff0. \u901a\u5e38, \u4e0d\u5e94\u8be5\u63cf\u8ff0\"\u600e\u4e48\u505a\", \u9664\u975e\u662f\u4e00\u4e9b\u590d\u6742\u7684\u7b97\u6cd5. \u6587\u6863\u5b57\u7b26\u4e32\u5e94\u8be5\u63d0\u4f9b\u8db3\u591f\u7684\u4fe1\u606f, \u5f53\u522b\u4eba\u7f16\u5199\u4ee3\u7801\u8c03\u7528\u8be5\u51fd\u6570\u65f6, \u4ed6\u4e0d\u9700\u8981\u770b\u4e00\u884c\u4ee3\u7801, \u53ea\u8981\u770b\u6587\u6863\u5b57\u7b26\u4e32\u5c31\u53ef\u4ee5\u4e86. \u5bf9\u4e8e\u590d\u6742\u7684\u4ee3\u7801, \u5728\u4ee3\u7801\u65c1\u8fb9\u52a0\u6ce8\u91ca\u4f1a\u6bd4\u4f7f\u7528\u6587\u6863\u5b57\u7b26\u4e32\u66f4\u6709\u610f\u4e49. \u5173\u4e8e\u51fd\u6570\u7684\u51e0\u4e2a\u65b9\u9762\u5e94\u8be5\u5728\u7279\u5b9a\u7684\u5c0f\u8282\u4e2d\u8fdb\u884c\u63cf\u8ff0\u8bb0\u5f55\uff0c \u8fd9\u51e0\u4e2a\u65b9\u9762\u5982\u4e0b\u6587\u6240\u8ff0. \u6bcf\u8282\u5e94\u8be5\u4ee5\u4e00\u4e2a\u6807\u9898\u884c\u5f00\u59cb. \u6807\u9898\u884c\u4ee5\u5192\u53f7\u7ed3\u5c3e. \u9664\u6807\u9898\u884c\u5916, \u8282\u7684\u5176\u4ed6\u5185\u5bb9\u5e94\u88ab\u7f29\u8fdb2\u4e2a\u7a7a\u683c. Args: \u5217\u51fa\u6bcf\u4e2a\u53c2\u6570\u7684\u540d\u5b57, \u5e76\u5728\u540d\u5b57\u540e\u4f7f\u7528\u4e00\u4e2a\u5192\u53f7\u548c\u4e00\u4e2a\u7a7a\u683c, \u5206\u9694\u5bf9\u8be5\u53c2\u6570\u7684\u63cf\u8ff0.\u5982\u679c\u63cf\u8ff0\u592a\u957f\u8d85\u8fc7\u4e86\u5355\u884c80\u5b57\u7b26,\u4f7f\u75282\u6216\u80054\u4e2a\u7a7a\u683c\u7684\u60ac\u6302\u7f29\u8fdb(\u4e0e\u6587\u4ef6\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u4e00\u81f4). \u63cf\u8ff0\u5e94\u8be5\u5305\u62ec\u6240\u9700\u7684\u7c7b\u578b\u548c\u542b\u4e49. \u5982\u679c\u4e00\u4e2a\u51fd\u6570\u63a5\u53d7*foo(\u53ef\u53d8\u957f\u5ea6\u53c2\u6570\u5217\u8868)\u6216\u8005**bar (\u4efb\u610f\u5173\u952e\u5b57\u53c2\u6570), \u5e94\u8be5\u8be6\u7ec6\u5217\u51fa*foo\u548c**bar. Returns: (\u6216\u8005 Yields: \u7528\u4e8e\u751f\u6210\u5668) \u63cf\u8ff0\u8fd4\u56de\u503c\u7684\u7c7b\u578b\u548c\u8bed\u4e49. \u5982\u679c\u51fd\u6570\u8fd4\u56deNone, \u8fd9\u4e00\u90e8\u5206\u53ef\u4ee5\u7701\u7565. Raises: \u5217\u51fa\u4e0e\u63a5\u53e3\u6709\u5173\u7684\u6240\u6709\u5f02\u5e38. .. code-block:: python def fetch_bigtable_rows(big_table, keys, other_silly_variable=None): \"\"\"Fetches rows from a Bigtable. Retrieves rows pertaining to the given keys from the Table instance represented by big_table. Silly things may happen if other_silly_variable is not None. Args: big_table: An open Bigtable Table instance. keys: A sequence of strings representing the key of each table row to fetch. other_silly_variable: Another optional variable, that has a much longer name than the other args, and which does nothing. Returns: A dict mapping keys to the corresponding table row data fetched. Each row is represented as a tuple of strings. For example: {'Serak': ('Rigel VII', 'Preparer'), 'Zim': ('Irk', 'Invader'), 'Lrrr': ('Omicron Persei 8', 'Emperor')} If a key from the keys argument is missing from the dictionary, then that row was not found in the table. Raises: IOError: An error occurred accessing the bigtable.Table object. \"\"\" pass \u7c7b \u7c7b\u5e94\u8be5\u5728\u5176\u5b9a\u4e49\u4e0b\u6709\u4e00\u4e2a\u7528\u4e8e\u63cf\u8ff0\u8be5\u7c7b\u7684\u6587\u6863\u5b57\u7b26\u4e32. \u5982\u679c\u4f60\u7684\u7c7b\u6709\u516c\u5171\u5c5e\u6027(Attributes), \u90a3\u4e48\u6587\u6863\u4e2d\u5e94\u8be5\u6709\u4e00\u4e2a\u5c5e\u6027(Attributes)\u6bb5. \u5e76\u4e14\u5e94\u8be5\u9075\u5b88\u548c\u51fd\u6570\u53c2\u6570\u76f8\u540c\u7684\u683c\u5f0f. .. code-block:: python class SampleClass(object): \"\"\"Summary of class here. Longer class information.... Longer class information.... Attributes: likes_spam: A boolean indicating if we like SPAM or not. eggs: An integer count of the eggs we have laid. \"\"\" def __init__(self, likes_spam=False): \"\"\"Inits SampleClass with blah.\"\"\" self.likes_spam = likes_spam self.eggs = 0 def public_method(self): \"\"\"Performs operation blah.\"\"\" \u5757\u6ce8\u91ca\u548c\u884c\u6ce8\u91ca \u6700\u9700\u8981\u5199\u6ce8\u91ca\u7684\u662f\u4ee3\u7801\u4e2d\u90a3\u4e9b\u6280\u5de7\u6027\u7684\u90e8\u5206. \u5982\u679c\u4f60\u5728\u4e0b\u6b21 `\u4ee3\u7801\u5ba1\u67e5 <http://en.wikipedia.org/wiki/Code_review>`_ \u7684\u65f6\u5019\u5fc5\u987b\u89e3\u91ca\u4e00\u4e0b, \u90a3\u4e48\u4f60\u5e94\u8be5\u73b0\u5728\u5c31\u7ed9\u5b83\u5199\u6ce8\u91ca. \u5bf9\u4e8e\u590d\u6742\u7684\u64cd\u4f5c, \u5e94\u8be5\u5728\u5176\u64cd\u4f5c\u5f00\u59cb\u524d\u5199\u4e0a\u82e5\u5e72\u884c\u6ce8\u91ca. \u5bf9\u4e8e\u4e0d\u662f\u4e00\u76ee\u4e86\u7136\u7684\u4ee3\u7801, \u5e94\u5728\u5176\u884c\u5c3e\u6dfb\u52a0\u6ce8\u91ca. .. code-block:: python # We use a weighted dictionary search to find out where i is in # the array. We extrapolate position based on the largest num # in the array and the array size and then do binary search to # get the exact number. if i & (i-1) == 0: # true iff i is a power of 2 \u4e3a\u4e86\u63d0\u9ad8\u53ef\u8bfb\u6027, \u6ce8\u91ca\u5e94\u8be5\u81f3\u5c11\u79bb\u5f00\u4ee3\u78012\u4e2a\u7a7a\u683c. \u53e6\u4e00\u65b9\u9762, \u7edd\u4e0d\u8981\u63cf\u8ff0\u4ee3\u7801. \u5047\u8bbe\u9605\u8bfb\u4ee3\u7801\u7684\u4eba\u6bd4\u4f60\u66f4\u61c2Python, \u4ed6\u53ea\u662f\u4e0d\u77e5\u9053\u4f60\u7684\u4ee3\u7801\u8981\u505a\u4ec0\u4e48. .. code-block:: python # BAD COMMENT: Now go through the b array and make sure whenever i occurs # the next element is i+1","title":"\u6ce8\u91ca"},{"location":"python_style_rules/#_9","text":".. tip:: \u5982\u679c\u4e00\u4e2a\u7c7b\u4e0d\u7ee7\u627f\u81ea\u5176\u5b83\u7c7b, \u5c31\u663e\u5f0f\u7684\u4eceobject\u7ee7\u627f. \u5d4c\u5957\u7c7b\u4e5f\u4e00\u6837. .. code-block:: python Yes: class SampleClass(object): pass class OuterClass(object): class InnerClass(object): pass class ChildClass(ParentClass): \"\"\"Explicitly inherits from another class already.\"\"\" .. code-block:: python No: class SampleClass: pass class OuterClass: class InnerClass: pass \u7ee7\u627f\u81ea object \u662f\u4e3a\u4e86\u4f7f\u5c5e\u6027(properties)\u6b63\u5e38\u5de5\u4f5c, \u5e76\u4e14\u8fd9\u6837\u53ef\u4ee5\u4fdd\u62a4\u4f60\u7684\u4ee3\u7801, \u4f7f\u5176\u4e0d\u53d7 PEP-3000 <http://www.python.org/dev/peps/pep-3000/> _ \u7684\u4e00\u4e2a\u7279\u6b8a\u7684\u6f5c\u5728\u4e0d\u517c\u5bb9\u6027\u5f71\u54cd. \u8fd9\u6837\u505a\u4e5f\u5b9a\u4e49\u4e86\u4e00\u4e9b\u7279\u6b8a\u7684\u65b9\u6cd5, \u8fd9\u4e9b\u65b9\u6cd5\u5b9e\u73b0\u4e86\u5bf9\u8c61\u7684\u9ed8\u8ba4\u8bed\u4e49, \u5305\u62ec __new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__ .","title":"\u7c7b"},{"location":"python_style_rules/#_10","text":".. tip:: \u5373\u4f7f\u53c2\u6570\u90fd\u662f\u5b57\u7b26\u4e32, \u4f7f\u7528%\u64cd\u4f5c\u7b26\u6216\u8005\u683c\u5f0f\u5316\u65b9\u6cd5\u683c\u5f0f\u5316\u5b57\u7b26\u4e32. \u4e0d\u8fc7\u4e5f\u4e0d\u80fd\u4e00\u6982\u800c\u8bba, \u4f60\u9700\u8981\u5728+\u548c%\u4e4b\u95f4\u597d\u597d\u5224\u5b9a. .. code-block:: python Yes: x = a + b x = '%s, %s!' % (imperative, expletive) x = '{}, {}!'.format(imperative, expletive) x = 'name: %s; score: %d' % (name, n) x = 'name: {}; score: {}'.format(name, n) .. code-block:: python No: x = '%s%s' % (a, b) # use + in this case x = '{}{}'.format(a, b) # use + in this case x = imperative + ', ' + expletive + '!' x = 'name: ' + name + '; score: ' + str(n) \u907f\u514d\u5728\u5faa\u73af\u4e2d\u7528+\u548c+=\u64cd\u4f5c\u7b26\u6765\u7d2f\u52a0\u5b57\u7b26\u4e32. \u7531\u4e8e\u5b57\u7b26\u4e32\u662f\u4e0d\u53ef\u53d8\u7684, \u8fd9\u6837\u505a\u4f1a\u521b\u5efa\u4e0d\u5fc5\u8981\u7684\u4e34\u65f6\u5bf9\u8c61, \u5e76\u4e14\u5bfc\u81f4\u4e8c\u6b21\u65b9\u800c\u4e0d\u662f\u7ebf\u6027\u7684\u8fd0\u884c\u65f6\u95f4. \u4f5c\u4e3a\u66ff\u4ee3\u65b9\u6848, \u4f60\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u52a0\u5165\u5217\u8868, \u7136\u540e\u5728\u5faa\u73af\u7ed3\u675f\u540e\u7528 .join \u8fde\u63a5\u5217\u8868. (\u4e5f\u53ef\u4ee5\u5c06\u6bcf\u4e2a\u5b50\u4e32\u5199\u5165\u4e00\u4e2a cStringIO.StringIO \u7f13\u5b58\u4e2d.) .. code-block:: python Yes: items = ['<table>'] for last_name, first_name in employee_list: items.append('<tr><td>%s, %s</td></tr>' % (last_name, first_name)) items.append('</table>') employee_table = ''.join(items) .. code-block:: python No: employee_table = '<table>' for last_name, first_name in employee_list: employee_table += '<tr><td>%s, %s</td></tr>' % (last_name, first_name) employee_table += '</table>' \u5728\u540c\u4e00\u4e2a\u6587\u4ef6\u4e2d, \u4fdd\u6301\u4f7f\u7528\u5b57\u7b26\u4e32\u5f15\u53f7\u7684\u4e00\u81f4\u6027. \u4f7f\u7528\u5355\u5f15\u53f7'\u6216\u8005\u53cc\u5f15\u53f7\"\u4e4b\u4e00\u7528\u4ee5\u5f15\u7528\u5b57\u7b26\u4e32, \u5e76\u5728\u540c\u4e00\u6587\u4ef6\u4e2d\u6cbf\u7528. \u5728\u5b57\u7b26\u4e32\u5185\u53ef\u4ee5\u4f7f\u7528\u53e6\u5916\u4e00\u79cd\u5f15\u53f7, \u4ee5\u907f\u514d\u5728\u5b57\u7b26\u4e32\u4e2d\u4f7f\u7528. GPyLint\u5df2\u7ecf\u52a0\u5165\u4e86\u8fd9\u4e00\u68c0\u67e5. (\u8bd1\u8005\u6ce8:GPyLint\u7591\u4e3a\u7b14\u8bef, \u5e94\u4e3aPyLint.) .. code-block:: python Yes: Python('Why are you hiding your eyes?') Gollum(\"I'm scared of lint errors.\") Narrator('\"Good!\" thought a happy Python reviewer.') .. code-block:: python No: Python(\"Why are you hiding your eyes?\") Gollum('The lint. It burns. It burns us.') Gollum(\"Always the great lint. Watching. Watching.\") \u4e3a\u591a\u884c\u5b57\u7b26\u4e32\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7\"\"\"\u800c\u975e\u4e09\u91cd\u5355\u5f15\u53f7'''. \u5f53\u4e14\u4ec5\u5f53\u9879\u76ee\u4e2d\u4f7f\u7528\u5355\u5f15\u53f7'\u6765\u5f15\u7528\u5b57\u7b26\u4e32\u65f6, \u624d\u53ef\u80fd\u4f1a\u4f7f\u7528\u4e09\u91cd'''\u4e3a\u975e\u6587\u6863\u5b57\u7b26\u4e32\u7684\u591a\u884c\u5b57\u7b26\u4e32\u6765\u6807\u8bc6\u5f15\u7528. \u6587\u6863\u5b57\u7b26\u4e32\u5fc5\u987b\u4f7f\u7528\u4e09\u91cd\u53cc\u5f15\u53f7\"\"\". \u4e0d\u8fc7\u8981\u6ce8\u610f, \u901a\u5e38\u7528\u9690\u5f0f\u884c\u8fde\u63a5\u66f4\u6e05\u6670, \u56e0\u4e3a\u591a\u884c\u5b57\u7b26\u4e32\u4e0e\u7a0b\u5e8f\u5176\u4ed6\u90e8\u5206\u7684\u7f29\u8fdb\u65b9\u5f0f\u4e0d\u4e00\u81f4. .. code-block:: python Yes: print (\"This is much nicer.\\n\" \"Do it this way.\\n\") .. code-block:: python No: print \"\"\"This is pretty ugly. Don't do this. \"\"\"","title":"\u5b57\u7b26\u4e32"},{"location":"python_style_rules/#sockets","text":".. tip:: \u5728\u6587\u4ef6\u548csockets\u7ed3\u675f\u65f6, \u663e\u5f0f\u7684\u5173\u95ed\u5b83. \u9664\u6587\u4ef6\u5916, sockets\u6216\u5176\u4ed6\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61\u5728\u6ca1\u6709\u5fc5\u8981\u7684\u60c5\u51b5\u4e0b\u6253\u5f00, \u4f1a\u6709\u8bb8\u591a\u526f\u4f5c\u7528, \u4f8b\u5982:","title":"\u6587\u4ef6\u548csockets"},{"location":"python_style_rules/#_11","text":"","title":". \u5b83\u4eec\u53ef\u80fd\u4f1a\u6d88\u8017\u6709\u9650\u7684\u7cfb\u7edf\u8d44\u6e90, \u5982\u6587\u4ef6\u63cf\u8ff0\u7b26. \u5982\u679c\u8fd9\u4e9b\u8d44\u6e90\u5728\u4f7f\u7528\u540e\u6ca1\u6709\u53ca\u65f6\u5f52\u8fd8\u7cfb\u7edf, \u90a3\u4e48\u7528\u4e8e\u5904\u7406\u8fd9\u4e9b\u5bf9\u8c61\u7684\u4ee3\u7801\u4f1a\u5c06\u8d44\u6e90\u6d88\u8017\u6b86\u5c3d."},{"location":"python_style_rules/#_12","text":"","title":". \u6301\u6709\u6587\u4ef6\u5c06\u4f1a\u963b\u6b62\u5bf9\u4e8e\u6587\u4ef6\u7684\u5176\u4ed6\u8bf8\u5982\u79fb\u52a8\u3001\u5220\u9664\u4e4b\u7c7b\u7684\u64cd\u4f5c."},{"location":"python_style_rules/#sockets_1","text":"\u800c\u4e14, \u5e7b\u60f3\u5f53\u6587\u4ef6\u5bf9\u8c61\u6790\u6784\u65f6, \u6587\u4ef6\u548csockets\u4f1a\u81ea\u52a8\u5173\u95ed, \u8bd5\u56fe\u5c06\u6587\u4ef6\u5bf9\u8c61\u7684\u751f\u547d\u5468\u671f\u548c\u6587\u4ef6\u7684\u72b6\u6001\u7ed1\u5b9a\u5728\u4e00\u8d77\u7684\u60f3\u6cd5, \u90fd\u662f\u4e0d\u73b0\u5b9e\u7684. \u56e0\u4e3a\u6709\u5982\u4e0b\u539f\u56e0:","title":". \u4ec5\u4ec5\u662f\u4ece\u903b\u8f91\u4e0a\u5173\u95ed\u6587\u4ef6\u548csockets, \u90a3\u4e48\u5b83\u4eec\u4ecd\u7136\u53ef\u80fd\u4f1a\u88ab\u5176\u5171\u4eab\u7684\u7a0b\u5e8f\u5728\u65e0\u610f\u4e2d\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c. \u53ea\u6709\u5f53\u5b83\u4eec\u771f\u6b63\u88ab\u5173\u95ed\u540e, \u5bf9\u4e8e\u5b83\u4eec\u5c1d\u8bd5\u8fdb\u884c\u8bfb\u6216\u8005\u5199\u64cd\u4f5c\u5c06\u4f1a\u8dd1\u51fa\u5f02\u5e38, \u5e76\u4f7f\u5f97\u95ee\u9898\u5feb\u901f\u663e\u73b0\u51fa\u6765."},{"location":"python_style_rules/#python_2","text":"","title":". \u6ca1\u6709\u4efb\u4f55\u65b9\u6cd5\u53ef\u4ee5\u786e\u4fdd\u8fd0\u884c\u73af\u5883\u4f1a\u771f\u6b63\u7684\u6267\u884c\u6587\u4ef6\u7684\u6790\u6784. \u4e0d\u540c\u7684Python\u5b9e\u73b0\u91c7\u7528\u4e0d\u540c\u7684\u5185\u5b58\u7ba1\u7406\u6280\u672f, \u6bd4\u5982\u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236. \u5ef6\u65f6\u5783\u573e\u5904\u7406\u673a\u5236\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5bf9\u8c61\u751f\u547d\u5468\u671f\u88ab\u4efb\u610f\u65e0\u9650\u5236\u7684\u5ef6\u957f."},{"location":"python_style_rules/#_13","text":"\u63a8\u8350\u4f7f\u7528 \"with\"\u8bed\u53e5 <http://docs.python.org/reference/compound_stmts.html#the-with-statement> _ \u4ee5\u7ba1\u7406\u6587\u4ef6: .. code-block:: python with open(\"hello.txt\") as hello_file: for line in hello_file: print line \u5bf9\u4e8e\u4e0d\u652f\u6301\u4f7f\u7528\"with\"\u8bed\u53e5\u7684\u7c7b\u4f3c\u6587\u4ef6\u7684\u5bf9\u8c61,\u4f7f\u7528 contextlib.closing(): .. code-block:: python import contextlib with contextlib.closing(urllib.urlopen(\"http://www.python.org/\")) as front_page: for line in front_page: print line Legacy AppEngine \u4e2dPython 2.5\u7684\u4ee3\u7801\u5982\u4f7f\u7528\"with\"\u8bed\u53e5, \u9700\u8981\u6dfb\u52a0 \"from future import with_statement\".","title":". \u5bf9\u4e8e\u6587\u4ef6\u610f\u5916\u7684\u5f15\u7528,\u4f1a\u5bfc\u81f4\u5bf9\u4e8e\u6587\u4ef6\u7684\u6301\u6709\u65f6\u95f4\u8d85\u51fa\u9884\u671f(\u6bd4\u5982\u5bf9\u4e8e\u5f02\u5e38\u7684\u8ddf\u8e2a, \u5305\u542b\u6709\u5168\u5c40\u53d8\u91cf\u7b49)."},{"location":"python_style_rules/#todo","text":".. tip:: \u4e3a\u4e34\u65f6\u4ee3\u7801\u4f7f\u7528TODO\u6ce8\u91ca, \u5b83\u662f\u4e00\u79cd\u77ed\u671f\u89e3\u51b3\u65b9\u6848. \u4e0d\u7b97\u5b8c\u7f8e, \u4f46\u591f\u597d\u4e86. TODO\u6ce8\u91ca\u5e94\u8be5\u5728\u6240\u6709\u5f00\u5934\u5904\u5305\u542b\"TODO\"\u5b57\u7b26\u4e32, \u7d27\u8ddf\u7740\u662f\u7528\u62ec\u53f7\u62ec\u8d77\u6765\u7684\u4f60\u7684\u540d\u5b57, email\u5730\u5740\u6216\u5176\u5b83\u6807\u8bc6\u7b26. \u7136\u540e\u662f\u4e00\u4e2a\u53ef\u9009\u7684\u5192\u53f7. \u63a5\u7740\u5fc5\u987b\u6709\u4e00\u884c\u6ce8\u91ca, \u89e3\u91ca\u8981\u505a\u4ec0\u4e48. \u4e3b\u8981\u76ee\u7684\u662f\u4e3a\u4e86\u6709\u4e00\u4e2a\u7edf\u4e00\u7684TODO\u683c\u5f0f, \u8fd9\u6837\u6dfb\u52a0\u6ce8\u91ca\u7684\u4eba\u5c31\u53ef\u4ee5\u641c\u7d22\u5230(\u5e76\u53ef\u4ee5\u6309\u9700\u63d0\u4f9b\u66f4\u591a\u7ec6\u8282). \u5199\u4e86TODO\u6ce8\u91ca\u5e76\u4e0d\u4fdd\u8bc1\u5199\u7684\u4eba\u4f1a\u4eb2\u81ea\u89e3\u51b3\u95ee\u9898. \u5f53\u4f60\u5199\u4e86\u4e00\u4e2aTODO, \u8bf7\u6ce8\u4e0a\u4f60\u7684\u540d\u5b57. .. code-block:: python # TODO(kl@gmail.com): Use a \"*\" here for string repetition. # TODO(Zeke) Change this to use relations. \u5982\u679c\u4f60\u7684TODO\u662f\"\u5c06\u6765\u505a\u67d0\u4e8b\"\u7684\u5f62\u5f0f, \u90a3\u4e48\u8bf7\u786e\u4fdd\u4f60\u5305\u542b\u4e86\u4e00\u4e2a\u6307\u5b9a\u7684\u65e5\u671f(\"2009\u5e7411\u6708\u89e3\u51b3\")\u6216\u8005\u4e00\u4e2a\u7279\u5b9a\u7684\u4e8b\u4ef6(\"\u7b49\u5230\u6240\u6709\u7684\u5ba2\u6237\u90fd\u53ef\u4ee5\u5904\u7406XML\u8bf7\u6c42\u5c31\u79fb\u9664\u8fd9\u4e9b\u4ee3\u7801\").","title":"TODO\u6ce8\u91ca"},{"location":"python_style_rules/#_14","text":".. tip:: \u6bcf\u4e2a\u5bfc\u5165\u5e94\u8be5\u72ec\u5360\u4e00\u884c .. code-block:: python Yes: import os import sys .. code-block:: python No: import os, sys \u5bfc\u5165\u603b\u5e94\u8be5\u653e\u5728\u6587\u4ef6\u9876\u90e8, \u4f4d\u4e8e\u6a21\u5757\u6ce8\u91ca\u548c\u6587\u6863\u5b57\u7b26\u4e32\u4e4b\u540e, \u6a21\u5757\u5168\u5c40\u53d8\u91cf\u548c\u5e38\u91cf\u4e4b\u524d. \u5bfc\u5165\u5e94\u8be5\u6309\u7167\u4ece\u6700\u901a\u7528\u5230\u6700\u4e0d\u901a\u7528\u7684\u987a\u5e8f\u5206\u7ec4:","title":"\u5bfc\u5165\u683c\u5f0f"},{"location":"python_style_rules/#_15","text":"","title":". \u6807\u51c6\u5e93\u5bfc\u5165"},{"location":"python_style_rules/#_16","text":"","title":". \u7b2c\u4e09\u65b9\u5e93\u5bfc\u5165"},{"location":"python_style_rules/#_17","text":"\u6bcf\u79cd\u5206\u7ec4\u4e2d, \u5e94\u8be5\u6839\u636e\u6bcf\u4e2a\u6a21\u5757\u7684\u5b8c\u6574\u5305\u8def\u5f84\u6309\u5b57\u5178\u5e8f\u6392\u5e8f, \u5ffd\u7565\u5927\u5c0f\u5199. .. code-block:: python import foo from foo import bar from foo.bar import baz from foo.bar import Quux from Foob import ar","title":". \u5e94\u7528\u7a0b\u5e8f\u6307\u5b9a\u5bfc\u5165"},{"location":"python_style_rules/#_18","text":".. tip:: \u901a\u5e38\u6bcf\u4e2a\u8bed\u53e5\u5e94\u8be5\u72ec\u5360\u4e00\u884c \u4e0d\u8fc7, \u5982\u679c\u6d4b\u8bd5\u7ed3\u679c\u4e0e\u6d4b\u8bd5\u8bed\u53e5\u5728\u4e00\u884c\u653e\u5f97\u4e0b, \u4f60\u4e5f\u53ef\u4ee5\u5c06\u5b83\u4eec\u653e\u5728\u540c\u4e00\u884c. \u5982\u679c\u662fif\u8bed\u53e5, \u53ea\u6709\u5728\u6ca1\u6709else\u65f6\u624d\u80fd\u8fd9\u6837\u505a. \u7279\u522b\u5730, \u7edd\u4e0d\u8981\u5bf9 try/except \u8fd9\u6837\u505a, \u56e0\u4e3atry\u548cexcept\u4e0d\u80fd\u653e\u5728\u540c\u4e00\u884c. .. code-block:: python Yes: if foo: bar(foo) .. code-block:: python No: if foo: bar(foo) else: baz(foo) try: bar(foo) except ValueError: baz(foo) try: bar(foo) except ValueError: baz(foo)","title":"\u8bed\u53e5"},{"location":"python_style_rules/#_19","text":".. tip:: \u5728Python\u4e2d, \u5bf9\u4e8e\u7410\u788e\u53c8\u4e0d\u592a\u91cd\u8981\u7684\u8bbf\u95ee\u51fd\u6570, \u4f60\u5e94\u8be5\u76f4\u63a5\u4f7f\u7528\u516c\u6709\u53d8\u91cf\u6765\u53d6\u4ee3\u5b83\u4eec, \u8fd9\u6837\u53ef\u4ee5\u907f\u514d\u989d\u5916\u7684\u51fd\u6570\u8c03\u7528\u5f00\u9500. \u5f53\u6dfb\u52a0\u66f4\u591a\u529f\u80fd\u65f6, \u4f60\u53ef\u4ee5\u7528\u5c5e\u6027(property)\u6765\u4fdd\u6301\u8bed\u6cd5\u7684\u4e00\u81f4\u6027. (\u8bd1\u8005\u6ce8: \u91cd\u89c6\u5c01\u88c5\u7684\u9762\u5411\u5bf9\u8c61\u7a0b\u5e8f\u5458\u770b\u5230\u8fd9\u4e2a\u53ef\u80fd\u4f1a\u5f88\u53cd\u611f, \u56e0\u4e3a\u4ed6\u4eec\u4e00\u76f4\u88ab\u6559\u80b2: \u6240\u6709\u6210\u5458\u53d8\u91cf\u90fd\u5fc5\u987b\u662f\u79c1\u6709\u7684! \u5176\u5b9e, \u90a3\u771f\u7684\u662f\u6709\u70b9\u9ebb\u70e6\u554a. \u8bd5\u7740\u53bb\u63a5\u53d7Pythonic\u54f2\u5b66\u5427) \u53e6\u4e00\u65b9\u9762, \u5982\u679c\u8bbf\u95ee\u66f4\u590d\u6742, \u6216\u8005\u53d8\u91cf\u7684\u8bbf\u95ee\u5f00\u9500\u5f88\u663e\u8457, \u90a3\u4e48\u4f60\u5e94\u8be5\u4f7f\u7528\u50cf get_foo() \u548c set_foo() \u8fd9\u6837\u7684\u51fd\u6570\u8c03\u7528. \u5982\u679c\u4e4b\u524d\u7684\u4ee3\u7801\u884c\u4e3a\u5141\u8bb8\u901a\u8fc7\u5c5e\u6027(property)\u8bbf\u95ee , \u90a3\u4e48\u5c31\u4e0d\u8981\u5c06\u65b0\u7684\u8bbf\u95ee\u51fd\u6570\u4e0e\u5c5e\u6027\u7ed1\u5b9a. \u8fd9\u6837, \u4efb\u4f55\u8bd5\u56fe\u901a\u8fc7\u8001\u65b9\u6cd5\u8bbf\u95ee\u53d8\u91cf\u7684\u4ee3\u7801\u5c31\u6ca1\u6cd5\u8fd0\u884c, \u4f7f\u7528\u8005\u4e5f\u5c31\u4f1a\u610f\u8bc6\u5230\u590d\u6742\u6027\u53d1\u751f\u4e86\u53d8\u5316.","title":"\u8bbf\u95ee\u63a7\u5236"},{"location":"python_style_rules/#_20","text":".. tip:: module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name. \u5e94\u8be5\u907f\u514d\u7684\u540d\u79f0 #. \u5355\u5b57\u7b26\u540d\u79f0, \u9664\u4e86\u8ba1\u6570\u5668\u548c\u8fed\u4ee3\u5668. #. \u5305/\u6a21\u5757\u540d\u4e2d\u7684\u8fde\u5b57\u7b26(-) #. \u53cc\u4e0b\u5212\u7ebf\u5f00\u5934\u5e76\u7ed3\u5c3e\u7684\u540d\u79f0(Python\u4fdd\u7559, \u4f8b\u5982__init__) \u547d\u540d\u7ea6\u5b9a #. \u6240\u8c13\"\u5185\u90e8(Internal)\"\u8868\u793a\u4ec5\u6a21\u5757\u5185\u53ef\u7528, \u6216\u8005, \u5728\u7c7b\u5185\u662f\u4fdd\u62a4\u6216\u79c1\u6709\u7684. #. \u7528\u5355\u4e0b\u5212\u7ebf(_)\u5f00\u5934\u8868\u793a\u6a21\u5757\u53d8\u91cf\u6216\u51fd\u6570\u662fprotected\u7684(\u4f7f\u7528import * from\u65f6\u4e0d\u4f1a\u5305\u542b). #. \u7528\u53cc\u4e0b\u5212\u7ebf(__)\u5f00\u5934\u7684\u5b9e\u4f8b\u53d8\u91cf\u6216\u65b9\u6cd5\u8868\u793a\u7c7b\u5185\u79c1\u6709. #. \u5c06\u76f8\u5173\u7684\u7c7b\u548c\u9876\u7ea7\u51fd\u6570\u653e\u5728\u540c\u4e00\u4e2a\u6a21\u5757\u91cc. \u4e0d\u50cfJava, \u6ca1\u5fc5\u8981\u9650\u5236\u4e00\u4e2a\u7c7b\u4e00\u4e2a\u6a21\u5757. #. \u5bf9\u7c7b\u540d\u4f7f\u7528\u5927\u5199\u5b57\u6bcd\u5f00\u5934\u7684\u5355\u8bcd(\u5982CapWords, \u5373Pascal\u98ce\u683c), \u4f46\u662f\u6a21\u5757\u540d\u5e94\u8be5\u7528\u5c0f\u5199\u52a0\u4e0b\u5212\u7ebf\u7684\u65b9\u5f0f(\u5982lower_with_under.py). \u5c3d\u7ba1\u5df2\u7ecf\u6709\u5f88\u591a\u73b0\u5b58\u7684\u6a21\u5757\u4f7f\u7528\u7c7b\u4f3c\u4e8eCapWords.py\u8fd9\u6837\u7684\u547d\u540d, \u4f46\u73b0\u5728\u5df2\u7ecf\u4e0d\u9f13\u52b1\u8fd9\u6837\u505a, \u56e0\u4e3a\u5982\u679c\u6a21\u5757\u540d\u78b0\u5de7\u548c\u7c7b\u540d\u4e00\u81f4, \u8fd9\u4f1a\u8ba9\u4eba\u56f0\u6270. Python\u4e4b\u7236Guido\u63a8\u8350\u7684\u89c4\u8303 =========================== ==================== ====================================================================== Type Public Internal =========================== ==================== ====================================================================== Modules lower_with_under _lower_with_under Packages lower_with_under Classes CapWords _CapWords Exceptions CapWords Functions lower_with_under() _lower_with_under() Global/Class Constants CAPS_WITH_UNDER _CAPS_WITH_UNDER Global/Class Variables lower_with_under _lower_with_under Instance Variables lower_with_under _lower_with_under (protected) or __lower_with_under (private) Method Names lower_with_under() _lower_with_under() (protected) or __lower_with_under() (private) Function/Method Parameters lower_with_under Local Variables lower_with_under =========================== ==================== ====================================================================== .. _main:","title":"\u547d\u540d"},{"location":"python_style_rules/#main","text":".. tip:: \u5373\u4f7f\u662f\u4e00\u4e2a\u6253\u7b97\u88ab\u7528\u4f5c\u811a\u672c\u7684\u6587\u4ef6, \u4e5f\u5e94\u8be5\u662f\u53ef\u5bfc\u5165\u7684. \u5e76\u4e14\u7b80\u5355\u7684\u5bfc\u5165\u4e0d\u5e94\u8be5\u5bfc\u81f4\u8fd9\u4e2a\u811a\u672c\u7684\u4e3b\u529f\u80fd(main functionality)\u88ab\u6267\u884c, \u8fd9\u662f\u4e00\u79cd\u526f\u4f5c\u7528. \u4e3b\u529f\u80fd\u5e94\u8be5\u653e\u5728\u4e00\u4e2amain()\u51fd\u6570\u4e2d. \u5728Python\u4e2d, pydoc\u4ee5\u53ca\u5355\u5143\u6d4b\u8bd5\u8981\u6c42\u6a21\u5757\u5fc5\u987b\u662f\u53ef\u5bfc\u5165\u7684. \u4f60\u7684\u4ee3\u7801\u5e94\u8be5\u5728\u6267\u884c\u4e3b\u7a0b\u5e8f\u524d\u603b\u662f\u68c0\u67e5 if __name__ == '__main__' , \u8fd9\u6837\u5f53\u6a21\u5757\u88ab\u5bfc\u5165\u65f6\u4e3b\u7a0b\u5e8f\u5c31\u4e0d\u4f1a\u88ab\u6267\u884c. .. code-block:: python def main(): ... if __name__ == '__main__': main() \u6240\u6709\u7684\u9876\u7ea7\u4ee3\u7801\u5728\u6a21\u5757\u5bfc\u5165\u65f6\u90fd\u4f1a\u88ab\u6267\u884c. \u8981\u5c0f\u5fc3\u4e0d\u8981\u53bb\u8c03\u7528\u51fd\u6570, \u521b\u5efa\u5bf9\u8c61, \u6216\u8005\u6267\u884c\u90a3\u4e9b\u4e0d\u5e94\u8be5\u5728\u4f7f\u7528pydoc\u65f6\u6267\u884c\u7684\u64cd\u4f5c.","title":"Main"}]}