#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:nil arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: NaturalLanguageProcessing
#+DATE: <2017-07-25 Tue>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../../configOrg/level2.org

* Overview
[[file:./nlp/NLP.html][Stanford NLP CS224n notes]]
- Document level:
The task at this level is to classify whether a whole opinion document expresses a positive or negative sentiment.
- Sentence level:
The task at this level goes to the sentences and determines whether each sentence expressed a positive, negative, or neutral opinion.

This level of analysis is closely related to subjectivity classification (Wiebe, Bruce and O'Hara, 1999), which distinguishes sentences (called objective sentences) that express factual information from sentences (called subjective sentences) that express subjective views and opinions.

- Entity and Aspect level:
It is based on the idea that an opinion consists of a sentiment (positive or negative) and a target (of opinion).

- regular opinions and comparative opinions
A regular opinion expresses a sentiment only on an particular entity or an aspect of the entity, e.g., “Coke tastes very good,” which expresses a positive sentiment on the aspect taste of Coke. A comparative opinion compares multiple entities based on some of their shared aspects, e.g., “Coke tastes better than Pepsi,” which compares Coke and Pepsi based on their tastes (an aspect) and expresses a preference for Coke.

** Sentiment Lexicon and Its Issues
- lexicon
opinions, positive and negative.
- issue
spam review
- language structure:
words -> sentences -> paragraphs -> documents.
is your input a string text, or a list of strings, or a list of lists composing by string.
** Neural Network Architectures
Feed-forward networks and Recurrent Recursive networks.
** Feature Representation
- Input X:
When dealing with natural language, the input x encodes features such as words, part-of-speech tags or other linguistic information. Perhaps the biggest jump when moving from sparse-input linear models to neural-network based models is to stop representing each feature as a unique dimension (the so called one-hot representation) and representing them instead as dense vectors. That is, each core feature is embedded into a d dimensional space, and represented as a vector in that space. The embeddings (the vector representation of each core feature) can then be trained like the other parameter of the function NN.

The main benefit of the dense representations is in generalization power: if we believe
some features may provide similar clues, it is worthwhile to provide a representation that
is able to capture these similarities.

Probabilities: Dog(10 times) vs Cat(several times), almost no connection from probability. But very similar from dense vectors.


** Word Embedding
- Similarity:
We represent word meaning similarity using the meaning of the context words.
*** Increamental training with Gensim.
#+BEGIN_SRC python
model = gensim.models.Word2Vec.load('/tmp/model/path')
model.train(more_sentences)
#+END_SRC
*** Several factors influence the quality of the word vectors:
**** amount and quality of the training data
**** size of the vectors
**** training algorithm
**** glossary:
- Resource Description Framework
metadata data model. It has come to be used as a general method for conceptual description or modeling of information that is implemented in web resources, using a variety of syntax notations and data serialization formats. It is also used in knowledge management applications.

- Lemmatization is the process of identifying the base, non-inflected form of a word.
词干化是确定一个单词的固定的基本部分的过程。
- Sentence Tokenize Test or Sentence Segmentation Test.
断句。
- Syntactic Parsing
比如在opinion extraction中我们常常要抽取评价对象（aspect）：
例：“知乎的内容质量很好”
这里 “很好” 形容的是 “内容质量”。通过依存句法分析，就可以抽取出对应的搭配。

再说说IR，以百度框计算为例。对于以下两个query：Query 1: 谢霆锋的儿子是谁？Query 2: 谢霆锋是谁的儿子？这两个Query的bag-of-words完全一致，如果不考虑其语法结构，很难直接给用户返回正确的结果。类似的例子还有很多。在这种情况下，通过句法分析，我们就能够知道用户询问的真正对象是什么。

Tree-LSTM是基于句法结构之上的LSTM，Bi-LSTM则是简单的双向（left<->right）LSTM。在很多任务上，Bi-LSTM都表现得比Tree-LSTM更好。
- Part of Speech Tagging
#+BEGIN_SRC python
>>> import jieba.posseg as pseg
>>> words = pseg.cut("我爱北京天安门")
>>> for w in words:
...    print('%s %s' % (w.word, w.flag))
...
我 r
爱 v
北京 ns
天安门 ns
#+END_SRC
- Pos Tagging Test:
#+BEGIN_SRC python
In [40]: doc4 = nlp(u"This is pos tagger test for spacy pos tagger")

In [41]: for token in doc4:
print token, token.pos, token.pos_
....:
This 87 DET
is 97 VERB
pos 82 ADJ
tagger 89 NOUN
test 89 NOUN
for 83 ADP
spacy 89 NOUN
pos 89 NOUN
tagger 89 NOUN
#+END_SRC
- Named Entity Recognizer (NER) Test:
#+BEGIN_SRC python
In [51]: doc5 = nlp(u"Rami Eid is studying at Stony Brook University in New York")

In [52]: for ent in doc5.ents:
print ent, ent.label, ent.label_
....:
Rami Eid 346 PERSON
Stony Brook University 349 ORG
New York 350 GPE
#+END_SRC
- Keyword Extraction(Terms Frequency - Inverse Document Frequency)
#+BEGIN_SRC python
import jieba
import jieba.analyse
from optparse import OptionParser

topK = 10

content = open(file_name, 'rb').read()

tags = jieba.analyse.extract_tags(content, topK=topK)

print(",".join(tags))

#+END_SRC


* Knowledge-based Q&A
** Introduction
#+CAPTION: introduction
[[./nlp/kbqa_intro.jpg]]
** 基于意图的结构化问答系统
银江股份的市盈率

首先识别出其中的实体是银江股份（300020），意图是查询财务指标，目标参数是市盈率，隐藏时间是当前日期，然后只需要把这个问题对应到财务的微服务API就可以了，拿到API的返回结果，调用响应模板做填充。
** 基于检索的问答系统
对于像新闻、研究报告类的文档内容的搜索和观点挖掘，是一种精细化的搜索方式，不是直接对文档的全文进行检索，而是首先提取分析出文档的重要成分，比如：公司事件、摘要、情感、评级、作者正负面观点等，建立到搜索引擎中，基于启发式方法根据输入的内容进行匹配回复。比如：“航天信息可以买吗？”，不一定能准确的告诉用户可以或不可以，但是可以告诉他航天信息在当前的技术指标（金叉、死叉等），资金流量，研究员的正负面观点以及年报对2017年的管理层意见摘要等等。
** 基于知识图谱的问答系统
比如：“和苹果手机有关系的股票有哪些？”，“治理雾霾对哪些上市公司会产生影响？”，“钴价上升对哪些股票产生影响最大？”等，当然这些问题通过搜索的方式也能得到答案，但它们有一些共同点，问题的本身都描述着实体和实体之间的关系或者相关性，而这正是知识图谱能够解决的问题，知识图谱将搜索引擎从字符串匹配推进到实体关系查询推理层面.

* Definition of Sentiment Analysis
** Structure
Due to a large collection of opinions on the Web, some form of summary of opinions is needed (Hu and Liu, 2004).
** Opinion Defintion
- Observation: An opinion consists of two key components: a target g and a sentiment s on the target.

- Definition (Opinion): An opinion is a quadruple, (g, s, h, t), where g is the opinion (or sentiment) target, s is the sentiment about the target, h is the opinion holder and t is the time when the opinion was expressed.

- Definition (entity): An entity e is a product, service, topic, issue, person, organization, or event. It is described with a pair, e: (T, W), where T is a hierarchy of parts, sub-parts, and so on, and W is a set of attributes of e.

- Definition (opinion): An opinion is a quintuple, (ei, aij, sijkl, hk, tl), where ei is the name of an entity, aij is an aspect of ei, sijkl is the sentiment on aspect aij of entity ei, hk is the opinion holder, and tl is the time when the opinion is expressed by hk. The sentiment sijkl is positive, negative, or neutral, or expressed with different strength/intensity levels, e.g., 1 to 5 stars as used by most review sits on the Web.
* Language Technology Processing
[http://ltp.ai/docs/index.html]
** features:
- 针对单一自然语言处理任务，生成统计机器学习模型的工具
- 针对单一自然语言处理任务，调用模型进行分析的编程接口
- 使用流水线方式将各个分析工具结合起来，形成一套统一的中文自然语言处理系统
- 系统可调用的，用于中文语言处理的模型文件
- 针对单一自然语言处理任务，基于云端的编程接口
* Building the Wikipedia Knowledge Graph in Neo4j
- guide:
[[http://guides.neo4j.com/wiki]]

- main topic classification:
[[https://en.wikipedia.org/wiki/Category:Main_topic_classifications]]

- database reports/list of properties
https://www.wikidata.org/wiki/Wikidata:Database_reports/List_of_properties/all

** Login
#+BEGIN_SRC neo4j
:server connect
#+END_SRC
#+BEGIN_SRC text
host:
bolt://ws-10-0-1-111-33640.neo4jsandbox.com:443

username:
neo4j

pwd:
darts-quota-alternation

#+END_SRC

** baike triples
subjects, predicates, and objects

|   Entity | Relationships | Semantic Descriptions |
| 65001293 |        374311 |               9284910 |

** SPARQL: RDF Query Language
W3C standard that underlies the Web's knowledge representation formalism: the Web Ontology Language (OWL).
** Visualization tool: Graphviz, networkx, Gephi
** Graph database: GraphDB, Neo4j.

** Approach 1: Loading a reduced subset incrementally through the MediaWiki API
- wiki dumps:

[[https://jesusbarrasa.wordpress.com/2016/08/03/quickgraph2-how-is-wikipedias-knowledge-organised/]]

[[https://jesusbarrasa.wordpress.com/2017/04/26/quickgraph6-building-the-wikipedia-knowledge-graph-in-neo4j-qg2-revisited/]]

https://github.com/jbarrasa/datasets/blob/master/wikipedia/wiki-guide.adoc

- Wiki API JSON format:
[[https://www.mediawiki.org/wiki/API:Categorymembers]]
#+BEGIN_SRC json
{
    "batchcomplete": "",
    "continue": {
        "cmcontinue": "page|2b273f2f3d29272b3b0445434d2f414d37273d0117018f16|55503653",
        "continue": "-||"
    },
    "query": {
        "categorymembers": [
            {
                "pageid": 22939,
                "ns": 0,
                "title": "Physics"
            },
            {
                "pageid": 3445246,
                "ns": 0,
                "title": "Glossary of classical physics"
            },
            {
                "pageid": 24489,
                "ns": 0,
                "title": "Outline of physics"
            },
            {
                "pageid": 1653925,
                "ns": 100,
                "title": "Portal:Physics"
            },
            {
                "pageid": 50926902,
                "ns": 0,
                "title": "Action angle coordinates"
            },
            {
                "pageid": 9079863,
                "ns": 0,
                "title": "Aerometer"
            },
            {
                "pageid": 52657328,
                "ns": 0,
                "title": "Bayesian model of computational anatomy"
            },
            {
                "pageid": 49342572,
                "ns": 0,
                "title": "Group actions in computational anatomy"
            },
            {
                "pageid": 50724262,
                "ns": 0,
                "title": "Blasius\u2013Chaplygin formula"
            },
            {
                "pageid": 33327002,
                "ns": 0,
                "title": "Cabbeling"
            }
        ]
    }
}
#+END_SRC

- Clause of building wikipedia graph
#+BEGIN_SRC neo4j
//Loading the data into Neo4j
//prepare the DB with a few indexes to accelerate the ingestion and querying of the data:
CREATE INDEX ON :Category(catId)
CREATE INDEX ON :Category(catName)
CREATE INDEX ON :Page(pageTitle)

//Loading a reduced subset incrementally through the MediaWiki API
//create the Wikipedia Knowledge Graph about Databases.
//create the root category: Databases.
CREATE (c:Category:RootCategory {catId: 0, catName: 'Databases', subcatsFetched : false, pagesFetched : false, level: 0 })

//iteratively load the next level of subcategories to a depth of our choice.
UNWIND range(0,3) as level
CALL apoc.cypher.doIt("
MATCH (c:Category { subcatsFetched: false, level: $level})
CALL apoc.load.json('https://en.wikipedia.org/w/api.php?format=json&action=query&list=categorymembers&cmtype=subcat&cmtitle=Category apoc.text.urlencode(c.catName) + '&cmprop=ids%7Ctitle&cmlimit=500')
YIELD value as results
UNWIND results.query.categorymembers AS subcat
MERGE (sc:Category {catId: subcat.pageid})
ON CREATE SET sc.catName = substring(subcat.title,9),
 sc.subcatsFetched = false,
 sc.pagesFetched = false,
 sc.level = $level + 1
WITH sc,c
CALL apoc.create.addLabels(sc,['Level' + ($level + 1) + 'Category']) YIELD node
MERGE (sc)-[:SUBCAT_OF]->(c)
WITH DISTINCT c
SET c.subcatsFetched = true", { level: level }) YIELD value
RETURN value
//load the pages in a similar way
UNWIND range(0,4) as level
CALL apoc.cypher.doIt("
MATCH (c:Category { pagesFetched: false, level: $level })
CALL apoc.load.json('https://en.wikipedia.org/w/api.php?format=json&action=query&list=categorymembers&cmtype=page&cmtitle=Category apoc.text.urlencode(c.catName) + '&cmprop=ids%7Ctitle&cmlimit=500')
YIELD value as results
UNWIND results.query.categorymembers AS page
MERGE (p:Page {pageId: page.pageid})
ON CREATE SET p.pageTitle = page.title, p.pageUrl = 'http://en.wikipedia.org/wiki/' + apoc.text.urlencode(replace(page.title, ' ', '_'))
WITH p,c
MERGE (p)-[:IN_CATEGORY]->(c)
WITH DISTINCT c
SET c.pagesFetched = true", { level: level }) yield value
return value

#+END_SRC
** Approach 2: Batch loading the data with LOAD CSV from an SQL dump
- basics
- wiki page structure example:
[[https://en.wikipedia.org/wiki/Category:Graph_databases]]

Category:Graph databases
From Wikipedia, the free encyclopedia

Subcategories
This category has only the following subcategory.

► Resource Description Framework(RDF)

Pages in category "Graph databases"
The following 15 pages are in this category, out of 15 total. This list may not reflect recent changes (learn more).

Graph database
A
AllegroGraph
ArangoDB
C
Cypher Query Language
D
DataStax
Sparksee (graph database)
F
FlockDB
G
GRAKN.AI
I
InfiniteGraph
L
Linkurious
M
Mulgara (software)
N
Neo4j
O
Oracle Spatial and Graph
OrientDB
S
Sones GraphDB

Categories: Types of databasesGraph theory

- category content sample:
| category id | auto incremental index | category name               | page count | sub-category count |
| "895945",   | "3",                   | "Computer_storage_devices", | "86",      | "10"               |

- relation sample:
| from category | to category(supercategory) |
| "28169972",   | "51326333"                 |

- import csv to neo4j
#+BEGIN_SRC cypher
USING PERIODIC COMMIT 10000
LOAD CSV FROM "https://github.com/jbarrasa/datasets/blob/master/wikipedia/data/cats.csv?raw=true" as row
CREATE (c:Category { catId: row[0]})
SET c.catName = row[2], c.pageCount = toInt(row[3]), c.subcatCount = toInt(row[4])

USING PERIODIC COMMIT 10000
LOAD CSV FROM "https://github.com/jbarrasa/datasets/blob/master/wikipedia/data/rels.csv?raw=true" as row
MATCH (from:Category { catId: row[0]})
MATCH (to:Category { catId: row[1]})
CREATE (from)-[:SUBCAT_OF]->(to)
#+END_SRC

- regenerating fresh csv files:
1. Start by downloading the latest DB dumps from the Wikipedia downloads page.
2. For the category hierarchy, you’ll only need the following tables: category, categorylinks and page.
3. Load them in your DBMS.
4. Generate the categories CSV file by running the following SQL.
#+BEGIN_SRC sql
select p.page_id as PAGE_ID, c.cat_id as CAT_ID, cast(c.cat_title as nCHAR) as CAT_TITLE , c.cat_pages as CAT_PAGES_COUNT, c.cat_subcats as CAT_SUBCAT_COUNT
into outfile '/Users/jbarrasa/Applications/neo4j-enterprise-3.1.2/import/wiki/cats.csv' fields terminated by ',' enclosed by '"' escaped by '\\' lines terminated by '\n'
from test.category c, test.page p
where c.cat_title = p.page_title
and p.page_namespace = 14
#+END_SRC
5. Generate the relationships file by running the following SQL
#+BEGIN_SRC sql
select p.page_id as FROM_PAGE_ID, p2.page_id as TO_PAGE_ID
into outfile '/Users/jbarrasa/Applications/neo4j-enterprise-3.1.2/import/wiki/rels.csv' fields terminated by ',' enclosed by '"' escaped by '\\' lines terminated by '\n'
from test.category c, test.page p , test.categorylinks l, test.category c2, test.page p2
where l.cl_type = 'subcat'
and c.cat_title = p.page_title
and p.page_namespace = 14
and l.cl_from = p.page_id
and l.cl_to = c2.cat_title
and c2.cat_title = p2.cat_title
and p2.page_namespace = 14
#+END_SRC

*** Data dumps/Import
**** structure:
https://phabricator.wikimedia.org/source/mediawiki/browse/master/maintenance/tables.sql
- category:
| cat_id | cat_title                  | cat_pages | cat_subcats | cat_files |
|      3 | 'Computer_storage_devices' |        88 |          10 |         0 |

- category links:
|  cl_from | cl_to                                    | cl_sortke                                                      | cl_timestamp          | cl_sortkey_prefix  | cl_collation       | cl_type('page','subcat','file') |
| 55706942 | 'NA-importance_NA-Class_Russia_articles' | '^R<82>,<BF>^DIOKK7\'A^D+CAKM7MOM7CA\'=^D+I7K7K^A#^A<84><8F> ' | '2017-11-04 07:25:01' | 'Adonis, Rochelle' | 'uca-default-u-kn' | 'page'                          |

- pages:
| page_id | page_namespace | page_title            | page_restrictions | page_counter | page_is_redirect | page_is_new | page_random           | page_touched     | page_links_updated | page_latest | page_len | page_content_model | page_lang |
| '10'    | '0'            | 'AccessibleComputing' | ?                 | '0'          | '1'              | '0'         | '0.33167112649574004' | '20171002144257' | '20171003005845'   | '767284433' | '124'    | 'wikitext'         | NULL      |

- page links:
|  pl_from | pl_namespace | pl_title                | pl_from_namespace |
| 42886934 |            0 | '!Women_Art_Revolution' |                 0 |

**** methods
[[https://meta.wikimedia.org/wiki/Data_dumps]]

[[https://meta.wikimedia.org/wiki/Data_dumps/Import_examples]]

[[https://phabricator.wikimedia.org/source/operations-dumps-import-tools/browse/master/xmlfileutils/]]
- tools
[[http://wikipapers.referata.com/wiki/List_of_visualization_tools]]

- Import into an empty wiki of el wiktionary on Linux with MySQL[edit]
MediaWiki version: 1.20

This wiki was chosen because it uses a non-latin1 character set, has a reasonable number of articles but isn't huge, and relies on only a small number of extensions.

I chose to import only the current pages, with User or Talk pages, because most folks who set up local mirrors want the article content and not the revision history or the discussion pages.

Before the import[edit]
I downloaded the dumps for a given day. I got all the sql.gz files, the stub-articles.xml.gz file, and the pages-articles.xml.bz2 file from http://download.wikimedia.org/elwiktionary/ even though I knew there would be a few of those sql files I wouldn't need.
I installed the prerequisites for MediaWiki, including MySQL, PHP 5, Apache, php-mysql, php-intl, ImageMagick and rsvg (see the manual).
I downloaded MediaWiki 1.20 and unpacked it into /var/www/html/elwikt (your location may vary).
I installed MediaWiki 1.20 on my laptop, with the following settings:
el for my language and the wiki language
MySQL database type
localhost for hostname (hey, it's a local install on my laptop :-P)
elwikt for database name
no database table prefix
root db username and password for the database username and password for install
a different user name and password for the database account for web access, with 'create if it does not exist' checked
InnoDB table format
Binary character set
Disable media uploads
use InstantCommons
I selected the extensions I wanted installed via the installer, some of them not being necessary but I thought they would be useful to have if I did decide to locally edit:
ConfirmEdit
Gadgets
Nuke
ParserFunctions
RenameUser
Vector
WikiEditor
I generated page, revision and text sql files from the stub and page content XML files, using mwxml2sql via the command mwxml2sql -s elwiktionary-blahblah-stub-articles.xml.gz -t elwiktionary-blahblah-pages-articles.xml.bz2 -f elwikt-pages-current-sql.gz -m 1.20
I converted all the sql files to tab delimited files using sql2txt (same repo as previous step) via the command zcat elwiktionary-blahdate-blahtable.sql.gz | sql2txt | gzip > elwiktionary-blahdate-blahtable.tabs.gz. Actually that's a lie, I wrote a tiny bash script to do them all for me. I skipped the following downloaded files:
site_stats - I didn't want or need these, the numbers would be wrong anyways
user_groups - Not needed for displaying page content
old_image and image - using InstantCommons
page - generated from XML files instead
I converted the page, revision and text table files that were generated from the XML files, to tab delimited, using a command similar to the above step
The actual import[edit]
Note: maybe using charset 'binary' here would be better!

I imported all of the above files into MySQL, doing the following:
#+BEGIN_SRC sql
mysql -u root -p
mysql>use elwikt
mysql>SET autocommit=0;
mysql>SET foreign_key_checks=0;
mysql>SET unique_checks=0;
mysql>SET character_set_client = utf8;
# unpacked the tab delimited file
mysql>TRUNCATE TABLE tablenamehere;
mysql>LOAD DATA INFILE path-to-tab-delim-file-for-table-here FIELDS OPTIONALLY ENCLOSED BY '\'';
repeated this for all tab delim files
mysql>exit;

# or https://meta.wikimedia.org/wiki/Data_dumps/Import_examples/catswiki_bash_script
echo "TRUNCATE TABLE $table ; " | mysql -u root -pnotverysecure enwiki
mysql -u root -pnotverysecure enwiki
#+END_SRC
After the import[edit]
Since this is a wiktionary, I updated the LocalSettings.php file so that page titles need not start with a capital letter, adding $wgCapitalLinks = false; to the file
Since this wiki has extra namespaces beyond the standard ones defined by MediaWiki, I added those to LocalSettings.php. You can find such namespaces by looking at the first few lines of the stubs XML file. Lines added: $wgExtraNamespaces = 'Παράρτημα'; and $wgExtraNamespaces = 'Συζήτηση_παραρτήματος';.
The namespace for the project and for project discussion are typically special localized names. I added those to LocalSettings.php, finding the names in the stub XML file at the beginning: $wgMetaNamespace = 'Βικιλεξικό'; and $wgMetaNamespaceTalk = 'Συζήτηση_βικιλεξικού';
I installed tidy and added the following lines to LocalSettings.php to reflect that: $wgUseTidy = true; and $wgTidyBin = '/usr/bin/tidy';. No configuration file was necessary; one is provided as part of MediaWiki and used by default.
I set up the interwiki cache cdb file, by using fixup-interwikis.py via the command python fixup-interwikis.py --localsettings /var/www/html/elwikt/LocalSettings.php --sitetype wiktionary and then added $wgInterwikiCache = "$IP/cache/interwiki.cdb" to the LocalSettings.php file. (See mw:Interwiki_cache/Setup_for_your_own_wiki for info.)
That was it. This was enough to let me view (most) pages without errors.

* NLP模块对比:jieba, THULAC, SnowNLP, pynlpir, CoreNLP, pyLTP, spaCy, gensim
|      | jieba | THULAC | SnowNLP | pynlpir | CoreNLP | pyLTP | spaCy | gensim |
| star | 11859 |    487 |    2159 |     941 |    4262 |   398 |  7985 |   6092 |

* Position Of Tagging
** 词性解释
| CC   | conjunction, coordinatin 表示连词                        |
| CD   | numeral, cardinal 表示基数词                             |
| DT   | determiner 表示限定词                                    |
| EX   | existential there 存在句                                 |
| FW   | foreign word 外来词                                      |
| IN   | preposition or conjunction, subordinating 介词或从属连词 |
| JJ   | adjective or numeral, ordinal 形容词或序数词             |
| JJR  | adjective, comparative 形容词比较级                      |
| JJS  | adjective, superlative 形容词最高级                      |
| LS   | list item marker 列表标识                                |
| MD   | modal auxiliary 情态助动词                               |
| NN   | noun, common, singular or mass                           |
| NNS  | noun, common, plural                                     |
| NNP  | noun, proper, singular                                   |
| NNPS | noun, proper, plural                                     |
| PDT  | pre-determiner 前位限定词                                |
| POS  | genitive marker 所有格标记                               |
| PRP  | pronoun, personal 人称代词                               |
| PRP  | pronoun,possessive所有格代词                             |
| RB   | adverb副词                                               |
| RBR  | adverb,comparative副词比较级                             |
| RBS  | adverb,superlative副词最高级                             |
| RP   | particle小品词                                           |
| SYM  | symbol符号                                               |
| TO   | ”to”asprepositionorinfinitivemarker作为介词或不定式标记  |
| UH   | interjection插入语                                       |
| VB   | verb,baseform                                            |
| VBD  | verb,pasttense                                           |
| VBG  | verb,presentparticipleorgerund                           |
| VBN  | verb,pastparticiple                                      |
| VBP  | verb,presenttense,not3rdpersonsingular                   |
| VBZ  | verb,presenttense,3rdpersonsingular                      |
| WDT  | WH−determiner                                            |
| WH   | 限定词                                                   |
| WP   | WH−pronoun                                               |
| WH   | 代词                                                     |
| WP   | WH-pronoun, possessive                                   |
| WH   | 所有格代词                                               |
| WRB  | Wh-adverb                                                |
| WH   | 副词                                                     |
** 句法分析（句法树）
| ROOT | 要处理文本的语句                                                                            |
| IP   | 简单从句                                                                                    |
| NP   | 名词短语                                                                                    |
| VP   | 动词短语                                                                                    |
| PU   | 断句符，通常是句号、问号、感叹号等标点符号                                                  |
| LCP  | 方位词短语                                                                                  |
| PP   | 介词短语                                                                                    |
| CP   | 由‘的’构成的表示修饰性关系的短语                                                            |
| DNP  | 由‘的’构成的表示所属关系的短语                                                              |
| ADVP | 副词短语                                                                                    |
| ADJP | 形容词短语                                                                                  |
| DP   | 限定词短语                                                                                  |
| QP   | 量词短语                                                                                    |
| NN   | 常用名词                                                                                    |
| NR   | 固有名词,表示仅适用于该项事物的名词，含地名，人名，国名，书名，团体名称以及一事件的名称等。 |
| NT   | 时间名词                                                                                    |
| PN   | 代词                                                                                        |
| VV   | 动词                                                                                        |
| VC   | 是                                                                                          |
| CC   | 表示连词                                                                                    |
| VE   | 有                                                                                          |
| VA   | 表语形容词                                                                                  |
| AS   | 内容标记（如:了）                                                                           |
| VRD  | 动补复合词                                                                                  |
| CD   | 表示基数词                                                                                  |
| DT   | determiner 表示限定词                                                                       |
| EX   | existential there 存在句                                                                    |
| FW   | foreign word 外来词                                                                         |
| IN   | preposition or conjunction, subordinating,介词或从属连词                                    |
| JJ   | adjective or numeral, ordinal 形容词或序数词                                                |
| JJR  | adjective, comparative 形容词比较级                                                         |
| JJS  | adjective, superlative 形容词最高级                                                         |
| LS   | list item marker 列表标识                                                                   |
| MD   | modal auxiliary 情态助动词                                                                  |
| PDT  | pre-determiner 前位限定词                                                                   |
| POS  | genitive marker 所有格标记                                                                  |
| PRP  | pronoun, personal 人称代词                                                                  |
| RB   | adverb 副词                                                                                 |
| RBR  | adverb, comparative 副词比较级                                                              |
| RBS  | adverb, superlative 副词最高级                                                              |
| RP   | particle 小品词                                                                             |
| SYM  | symbol 符号                                                                                 |
| TO   | ”to” as preposition or infinitive marker,作为介词或不定式标记                               |
| WDT  | WH-determiner WH限定词                                                                      |
| WP   | WH-pronoun                                                                                  |
| WH   | 代词                                                                                        |
| WP$  | WH-pronoun, possessive                                                                      |
| WH   | 所有格代词                                                                                  |
| WRB  | Wh-adverb,WH副词                                                                            |
** 关系表示
| abbrev     | abbreviation modifier，缩写                                      |
| acomp      | adjectival complement，形容词的补充                              |
| advcl      | adverbial clause modifier，状语从句修饰词                        |
| advmod     | adverbial modifier状语                                           |
| agent      | agent，代理，一般有by的时候会出现这个                            |
| amod       | adjectival modifier形容词                                        |
| appos      | appositional modifier,同位词                                     |
| attr       | attributive，属性                                                |
| aux        | auxiliary，非主要动词和助词，如BE,HAVE SHOULD/COULD等到          |
| auxpass    | passive auxiliary 被动词                                         |
| cc         | coordination，并列关系，一般取第一个词                           |
| ccomp      | clausal complement从句补充                                       |
| complm     | complementizer，引导从句的词好重聚中的主要动词                   |
| conj       | conjunct，连接两个并列的词。                                     |
| cop        | copula。系动词（如be,seem,appear等），（命题主词与谓词间的）连系 |
| csubj      | clausal subject，从主关系                                        |
| csubjpass  | clausal passive subject 主从被动关系                             |
| dep        | dependent依赖关系                                                |
| det        | determiner决定词，如冠词等                                       |
| dobj       | direct object直接宾语                                            |
| expl       | expletive，主要是抓取there                                       |
| infmod     | infinitival modifier，动词不定式                                 |
| iobj       | indirect object，非直接宾语，也就是所以的间接宾语；              |
| mark       | marker，主要出现在有“that” or “whether”“because”, “when”,        |
| mwe        | multi-word expression，多个词的表示                              |
| neg        | negation modifier否定词                                          |
| nn         | noun compound modifier名词组合形式                               |
| npadvmod   | noun phrase as adverbial modifier名词作状语                      |
| nsubj      | nominal subject，名词主语                                        |
| nsubjpass  | passive nominal subject，被动的名词主语                          |
| num        | numeric modifier，数值修饰                                       |
| number     | element of compound number，组合数字                             |
| parataxis  | parataxis,parataxis，并列关系                                    |
| partmod    | participial modifier动词形式的修饰                               |
| pcomp      | prepositional complement，介词补充                               |
| pobj       | object of a preposition，介词的宾语                              |
| poss       | possession modifier，所有形式，所有格，所属                      |
| possessive | possessive modifier，这个表示所有者和那个’S的关系                |
| preconj    | preconjunct，常常是出现在 “either”, “both”, “neither”的情况下    |
| predet     | predeterminer，前缀决定，常常是表示所有                          |
| prep       | prepositional modifier                                           |
| prepc      | prepositional clausal modifier                                   |
| prt        | phrasal verb particle，动词短语                                  |
| punct      | punctuation，这个很少见，但是保留下来了，结果当中不会出现这个    |
| purpcl     | purpose clause modifier，目的从句                                |
| quantmod   | quantifier phrase modifier，数量短语                             |
| rcmod      | relative clause modifier相关关系                                 |
| ref        | referent，指示物，指代                                           |
| rel        | relative                                                         |
| root       | root，最重要的词，从它开始，根节点                               |
| tmod       | temporal modifier                                                |
| xcomp      | open clausal complement                                          |
| xsubj      | controlling subject 掌控者                                       |
