#+SETUPFILE: ../../configOrg/level2.org
#+OPTIONS: H:2 toc:2 num:3 ^:nil
#+TITLES: C++
#+AUTHORs: weiwu
#+begin_src c++

#+end_src


*C++ Premier Plus*

* C++ Basics


** Variables, Operators and Expressions

*** naming


*** logic operation
- --i and i--.
//--i will decrements the value of i, and then return the decremented value.
//i-- will return the value of i, then decrements the value of i.
- logical and arithmetic shift.

*** scientific output expression
- use “%10.1f” as format specifier.
*** A global variable is declared at file scope.
*** External Variables
To declare the variable but don’t allocate memory for it (just a placeholder) we have to use the keyword extern which specifies that the variable is defined in another source file.
*** static global variables
It is often preferable to have a global variable in one source file but this global variable should not be accessible by any other source file. Use the static specifier to bound its use to the current source file.

*** register variables
- Request for variable to be placed in register
  - register int a;
- Access to register variable is faster
- Not always granted

** preprocessor
*** l Preprocessor directives start with ‘#’ e.g.:
#+BEGIN_SRC c
#include
#define
#+END_SRC
- The directive:
#include "filename"

causes the file to be searched first in the directory of the original source file. The include directive
can be used to handle compiler dependencies.

#include <filename>

causes the preprocessor to search for a file in a defined sequence of standard places (the include
directory).
*** Preprocessor looks for ‘#’
** Typedef
- Use typedef for substitution
#+BEGIN_SRC c
typedef long int INT32;

#+END_SRC
** Macros
- For global magic numbers
#+BEGIN_SRC c
#define MAX 256

#+END_SRC
- Macros with arguments (not a function)
#+BEGIN_SRC c
#define sqr(x) ((x) * (x))

#+END_SRC
* GETTING STARTED
** Learning C++: What Lies Before You
** The Origins of C++: A Little History
** Portability and Standards
** The Mechanics of Creating a Program

* SETTING OUT TO C++
** C++ Initiation
** C++ Statements
*** Comments
- //
- /* */
** More C++ Statements
** Functions



* DEALING WITH DATA
** Simple Variables
*** Variables:

**** common variables names
#+begin_src c++
int price_count_reader;    // No abbreviation.
int num_errors;            // "num" is a widespread convention.
int num_dns_connections;   // Most people know what "DNS" stands for.
#+end_src

**** Class Data Members
Data members of classes, both static and non-static, are named like ordinary nonmember variables, but with a trailing underscore.
#+begin_src c++
class TableInfo {
  ...
 private:
  string table_name_;  // OK - underscore at end.
  string tablename_;   // OK.
  static Pool<TableInfo>* pool_;  // OK.
};
#+end_src

*** Constant Names
Variables declared constexpr or const, and whose value is fixed for the duration of the program, are named with a leading "k" followed by mixed case. For example:
#+begin_src c++
const int kDaysInAWeek = 7;
#+end_src

*** Function Names
#+begin_src c++ :tangle yes
AddTableEntry()
DeleteUrl()
OpenFileOrDie()
#+end_src

*** File Names
- my_useful_class.cc
- my-useful-class.cc
- myusefulclass.cc
- myusefulclass_test.cc // _unittest and _regtest are deprecated.
** The const Qualifier
** Floating-Point Numbers
** C++ Arithmetic Operators



* COMPOUND TYPES
** Introducing Arrays
#+BEGIN_SRC c++
#include <iostream>

int main()
{
    int prime[5]; // hold the first 5 prime numbers
    prime[0] = 2; // The first element has index 0
    std::cout << "The lowest prime number is: " << prime[0] << "\n";
    std::cout << "The sum of the first 5 primes is: " << prime[0] + prime[1] + prime[2] + prime[3] + prime[4] << "\n";

    return 0;
}
int array[3][5] =
{
{ 1, 2, 3, 4, 5 }, // row 0
{ 6, 7, 8, 9, 10 }, // row 1
{ 11, 12, 13, 14, 15 } // row 2
};
for (int row = 0; row < numRows; ++row) // step through the rows in the array
    for (int col = 0; col < numCols; ++col) // step through each element in the row
        std::cout << array[row][col];
#+END_SRC
** Strings
- A string is an array of characters
- Declare using array notation
#+BEGIN_SRC c
char string[80];
/* A string of 80 characters */

#+END_SRC
- Last character of string should be ‘\0’
- Use functions declared in <string.h>
#+BEGIN_SRC c
void main()
{
char s1[] = {'C', ' ', 'l', 'a', 'n', 'g', 'u', 'a', 'g', 'e', '\0'};
char s2[] = "C language"; /* Adds the ‘\0’ for us */
char s3[80];
s3 = "Hello"; /* NOT POSSIBLE! We have to use strcpy() */
strcpy(s3, "Hello");
}
#+END_SRC
** Introducing the string Class
** Introducing Structures
The struct declaration is nothing more than a type definition. The members defined in the structure become concrete members when we create a variable of this struct type.
- Structure creates new type
#+BEGIN_SRC c
struct <name> { [members] };

#+END_SRC
- Example a new type representing a point
#+BEGIN_SRC C
struct point
{
int x;
int y;
};

#+END_SRC
*** Arrays of Structures
- Can initialise the elements upon declaring using {}
#+BEGIN_SRC c
struct point arr[2] = {{10, 11}, {11, 24}};

#+END_SRC
*** Structures and Pointers
- Access members of structures using dot (.)
#+BEGIN_SRC c
struct point pt;
pt.x = 10.0;

#+END_SRC
- When using pointers to structures use a -> to access struct members
#+BEGIN_SRC c
struct point* pp = &pt;
pt->x=20.0; /* Use -> to access members */
(*pt).y=30.0; /* Use dereference and . */

#+END_SRC
** Unions
- Or relation: variables contain value of one of the union field types
- Same syntax as struct only type union
union u_tag
{
int ival;
float fval;
};
- Size equal to size of largest member
** Enumerations
** Pointers and the Free Store
*** Pointers as Function Arguments
- Normally function arguments are copied on the stack
- If you don’t want a copy use pointers
#+BEGIN_SRC c
sqr(int* a);

#+END_SRC
- Pass argument address upon function call, 指针是地址，所以传参时应该给一个地址.
#+BEGIN_SRC c
int var = 10;
sqr(&var);

#+END_SRC
** Pointers, Arrays, and Pointer Arithmetic
*** arrays and pointers
- Array name is the address of the first element of the array
#+BEGIN_SRC c
int array[3];
/* array is address of first element
array == &array[0]*/

#+END_SRC
- Pointer also contains address of some element
- Can assign pointers to arrays
- Can use array indexing with pointers
*** swap value of two variables using pointers
#+begin_src c++
#include <stdio.h>

void Swap(int* a, int* b)
{
	int temp;		//use the variable temp to store one value.
	temp = (*b);	//temp equals to content of pointer b
	(*b) = (*a);	//pointer b equals to content of pointer a
	(*a) = temp;	//content of pointer a equals to temp

}
int main()
{
	int i = 123, j = 456;
	int* x = &i;	//x points to i
	int* y = &j;	//y points to j
	printf("Before swapping: i = %d, j = %d\n",i , j);

	Swap(x, y);
	printf("After swapping: i = %d, j = %d\n",i , j);
return 0;
}
#+end_src
*** Initialising Arrays
- Arrays need to be initialised element by element
- Cannot assign two arrays
#+BEGIN_SRC c
array_int1 = array_int2; /* NOT POSSIBLE */

#+END_SRC
- Can initialise upon creation by specifying each element
#+BEGIN_SRC c
int array_int1[4] = {1, 4, 5, 6};
float array_f[] = {10.23, 34.33, 30.0};

#+END_SRC

* LOOPS AND RELATIONAL EXPRESSIONS
** Introducing for Loops
** Relational Expressions
** The while Loop
** The do while Loop
** Loops and Text Input
** Nested Loops and Two-Dimensional Arrays

** The compound or block statement
- Blocks are pieces of discrete code
- Blocks are bounded with braces {}
- Variables must be declared in the beginning of blocks
- Indent the statements inside blocks
** The if statement
- if - else
- switch
#+BEGIN_SRC c++
/* Leaving out these brackets is not advisable because
of future modifications to one of the sub statements of the if-else construction.*/
if (a > b)
{
    printf("a is larger than b\n");
}
else
{
    printf("a is not larger than b");
}
#+END_SRC
*** switch
The switch statement is almost equal to the if-else construction.
The syntax is:
#+BEGIN_SRC c++
switch(<expression>)
{
case <const_expression1>:
    <sub_statement> [break;]
case <const_expression2>:
    <sub_statement> [break;]
case <const_expression3>:
    <sub_statement> [break;]
default:
    <sub_statement>
}
#+END_SRC
The break statement is optional in the different cases. When it is left out all the following sub_statements are executed until a break statement or the end of the switch is reached.
** The for loop
Creating an infinite loop
#+BEGIN_SRC c
for (;;)
#+END_SRC
** The while loop
#+BEGIN_SRC c
do
    <sub_statement>
while (<expression>); /* do not forget the semicolon */
#+END_SRC
** The do-while loop
When creating a do-while loop do not place a semi-colon ';' after the while expression. Placing a
semicolon can create an infinite loop.
** Break and continue statements
** Multiple choices, the switch statement
** Goto and labels


* BRANCHING STATEMENTS AND LOGICAL OPERATORS
** The if Statement
** Logical Expressions
** The cctype Library of Character Functions
** The ?: Operator
#+BEGIN_SRC c
const int x = (a<b) ? b : a;
#+END_SRC
** The switch Statement
** The break and continue Statements
** Number-Reading Loops
** Simple File Input/Output



* FUNCTIONS: C++’S PROGRAMMING MODULES
** Function Review
*** Function Signatures
- A function consists of a return type, name and arguments
- The declaration is a description of the function characteristics
(signature)
<return_type> name([<arg_type arg, arg_type arg, ...>]);
#+BEGIN_SRC c++
int sqr(int);
/* returns: int
name: sqr
arguments: one int
*/
#+END_SRC
The function declaration needs to be repeated in every source file where we use the function. If 20 different source files use the function multiply() we have to declare it in all of those source files. *An easier way is to create a so called header file which contains the declarations of commonly used
functions (see next module).*

- The definition is the implementation of the function (body with code)
<return_type> name([<arg_type arg, arg_type arg, ...>])
{
}
** Function Arguments and Passing by Value

** Functions and Arrays
** Functions and Two-Dimensional Arrays
The pointer equivalent is a double pointer (pointer to a pointer)
#+BEGIN_SRC c
int** pmarr;

#+END_SRC
** Functions and C-Style Strings
** Functions and Structures
** Functions and string Class Objects
** Recursion
** Pointers to Functions



* ADVENTURES IN FUNCTIONS
** C++ Inline Functions
** Reference Variables
** Default Arguments
** Function Overloading
** Function Templates



* MEMORY MODELS AND NAMESPACES
** Separate Compilation
*** Conditional Compilation
- #ifdef
- #ifndef
- #elif
- #else
- #endif
*** Header Files and Directives
- Can include header file multiple times
- This can lead to redefinition errors
- Prevent multiple inclusion:
#+BEGIN_SRC c++
#ifndef CONSTANT_NAME
#define CONSTANT_NAME
/* declarations */
#endif

#+END_SRC
There is a possibility that a header file gets included more than once during one compilation. The
definitions in that header file will be defined more than once and generate a compiler error.
#+BEGIN_SRC c
#include "mine.h"
#include "mine.h" /* Error multiple declarations */
#+END_SRC
use
#+BEGIN_SRC c
#ifndef MINE_H
#define MINE_H
void print(void);
/* Other definitions */
#endif
#+END_SRC
** Storage Duration, Scope, and Linkage
** The Placement new Operator
** Namespaces



* OBJECTS AND CLASSES
** Procedural and Object-Oriented Programming
** Abstraction and Classes
** Class Constructors and Destructors
** Knowing Your Objects: The this Pointer
** An Array of Objects
** The Interface and Implementation Revisited
** Class Scope
** Abstract Data Types



* WORKING WITH CLASSES
** Operator Overloading
** Time on Our Hands: Developing an Operator Overloading Example
** Introducing Friends
** Overloaded Operators: Member Versus Nonmember Functions
** More Overloading: A Vector Class
** Automatic Conversions and Type Casts for Classes



* CLASSES AND DYNAMIC MEMORY ALLOCATION
** Dynamic Memory and Classes
- Create memory blocks during run-time
By using a function malloc() we can request a block of memory during run-time. We specify how many bytes we want and the malloc() function allocates it for us and assigns it to our program. The size is the number of bytes we want to allocate. The malloc() function returns the address of the memory we requested. This address must be stored in a variable.

When we use dynamic memory we have to request it using malloc() but we also need to return it to the system when we do not use it anymore. If we do not return it to the system but keep requesting more memory we would run out of memory. The free() function returns the memory to the system.

The function free() does not check if the pointer points to something allocated using malloc(). If the pointer was not initialised using the malloc() function and we would try to free() it, unpredictable errors would occur.
Pointers can store address:
#+BEGIN_SRC c
void main()
{
int* p;
p = (int*) malloc(10*sizeof(int));
if (p != NULL)
{
/* Use the array */
free(p);
}
}
#+END_SRC
- Use malloc() for allocation of block of bytes
- Returns NULL if not enough memory
- Cast return pointer to type*
#+BEGIN_SRC c
(int*)malloc(2*sizeof(int));

#+END_SRC
- Use free() to release allocated memory
#+BEGIN_SRC c
free(p);

#+END_SRC
** A Queue Simulation



* CLASS INHERITANCE
** Beginning with a Simple Base Class
** Inheritance: An Is-a Relationship
** Polymorphic Public Inheritance
** Access Control: protected
** Abstract Base Classes
** Inheritance and Dynamic Memory Allocation
** Class Design Review



* REUSING CODE IN C++
** Classes with Object Members
** Private Inheritance
** Multiple Inheritance
** Class Templates



* FRIENDS, EXCEPTIONS, AND MORE
** Friends
** Nested Classes
** Exceptions
** RTTI
** Type Cast Operators



* THE string CLASS AND THE STANDARD TEMPLATE LIBRARY
** The string Class
** The auto_ptr Class
** The STL
** Generic Programming
** Function Objects (aka Functors)
** Algorithms
** Other Libraries



* INPUT, OUTPUT, AND FILES
** An Overview of C++ Input and Output
*** print
%<flags><field width><.precision><type><format specifier>
** Output with cout
** Input with cin
** File Input and Output
#+BEGIN_SRC c
FILE* fp=fopen(file, mode)
fcose(fp)
#+END_SRC
** Incore Formatting
- String functions are defined in <string.h>
strcmp(), strcpy(), strcat(), etc.
- Character functions defined in <ctype.h>
isalpha(), toupper(),
tolower(), isdigit(), etc.
** What Now?
