#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: python2
#+DATE: <2017-06-26 Mon>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)


* Python basic operations:
** Module
- 当你运行一个Python模块 python fibo.py <arguments>
  Remember, everything in python is an object.

- python解释器CPython.

- 如果字符串里面有’\’,而实际上要把斜杠加到字符串里面，要在前面加r，代表raw. 例如r’Y:\codes’.

- 如果主目录下有子目录packages，记得要在子目录下加init.py，最好在主目录下建main.py函数。

- 解释器如果执行哪个一个文件为主程序，如 python program1.py，it will set the special variable name to program1.py equals to ‘main’
- One of the reasons for doing this is that sometimes you write a module (a .py file) where it can be executed directly. Alternatively, it can also be imported and used in another module. By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.

- 模块中的代码将会被执行，就像导入它一样，不过此时name 被设置为 “main“。这意味着，通过在你的模块末尾添加此代码.

- can’t import module from upper directory.

    - need to add the working directory to .bashrc PYTHONPATH
    - using ipython.
- Add custom folder path to the Windows environment.
  add PYTHONEXE%; to System Variable PATH;
  add System variable name: PYTHONEXE , value: C:\Users\Wei Wu\Anaconda2;C:\Users\Wei Wu\Python\ylib\src\py\;
  add PYTHONPATH:  C:\Users\Wei Wu\Anaconda2;C:\Users\Wei Wu\Python\ylib\src\py\;
  or add module path in Spyder directly;
- import module temperarily from parental directory without add path to the system.
#+begin_src python :tangle yes
# folder1
#    \__init__.py
#    \State.py
#    \StateMachine.py
#    \mouse_folder
#        \MouseAction.py
import os,sys,inspect
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir+'\\mouse')
sys.path.insert(0,parentdir)

from State import State
from StateMachine import StateMachine
from MouseAction import MouseAction
#+end_src

- check module path:
#+begin_src python
import os
print os.path.abspath(ylib.__file__)
#+end_src

- make a python 3 virtual environment:
#+begin_src sh
mkvirtual -p python3 ENVNAME
#+end_src

- install setup.py:
python setup.py install
to virtual environment:
/home/weiwu/.virtualenvs/data_analysis/bin/python2 setup.py install
- install from github:
pip install git+https://github.com/quantopian/zipline.git

- percentage output format:
#+begin_src python
from future import division
print “%s %.4f%%” % (sid, (len(not_close)/len(ctp)))
#+end_src
** zip
zip([iterable, ...])
This function returns a list of tuples, where the i-th tuple contains the i-th element from each of the argument sequences or iterables. The returned list is truncated in length to the length of the shortest argument sequence. When there are multiple arguments which are all of the same length, zip() is similar to map() with an initial argument of None. With a single sequence argument, it returns a list of 1-tuples. With no arguments, it returns an empty list.

The left-to-right evaluation order of the iterables is guaranteed. This makes possible an idiom for clustering a data series into n-length groups using zip(*[iter(s)]*n).

zip() in conjunction with the * operator can be used to unzip a list:
#+BEGIN_SRC shell
>>>
>>> x = [1, 2, 3]
>>> y = [4, 5, 6]
>>> zipped = zip(x, y)
>>> zipped
[(1, 4), (2, 5), (3, 6)]
>>> x2, y2 = zip(*zipped)
>>> x == list(x2) and y == list(y2)
True
#+END_SRC
** Float point issue
Floating-point numbers are represented in computer hardware as base 2 (binary) fractions. For example, the decimal fraction 0.001 has value 0/2 + 0/4 + 1/8.
On a typical machine running Python, there are 53 bits of precision available for a Python float, so the value stored internally when you enter the decimal number 0.1 is the binary fraction.
#+begin_src emacs-lisp :tangle yes
0.00011001100110011001100110011001100110011001100110011010
#+end_src
#+begin_src emacs-lisp :tangle yes
>>> round(2.675, 2)
2.67
#+end_src
it’s again replaced with a binary approximation, whose exact value is

2.67499999999999982236431605997495353221893310546875

** unittest:
- check data operation:
  - create, select, update, delete.

- purpose of unit test
  - checking parameter types, classes, or values.
  - checking data structure invariants.
  - checking “can’t happen” situations (duplicates in a list, contradictory state variables.)
  - after calling a function, to make sure that its return is reasonable.

** Time
- get specific timezone datetime
#+begin_src python
tz = pytz.timezone('America/Los_Angeles')
#date = date.today()
now = datetime.now()
los_angeles_time = datetime.now(tz)
#+end_src

- use tqdm as a status bar:
#+begin_src python
from tqdm import tqdm
from time import sleep
for i in tqdm(range(10)):
    sleep(0.1)
#+end_src

- string to datetime:
#+begin_src python
time.strptime(string[, format])
#+end_src

- datetime, Timestamp, datetime64
pandas, Timestamp
-- DatetimeIndex is composed by Timestamps.
#+BEGIN_SRC python
#Timestamp to string:i
str_timestamp = pd.to_datetime(Timestamp, format = '%Y%m%d')
str_timestamp = str_timestamp.strftime('%Y-%m-%d')
#+END_SRC
datetime, utc
datetime64
** Function
- function parameter
  - pass the parameters boo(a=1,b=2) won’t change the value of the parameters themselves. the sequence of the parameters are certain, you can’t change it.

- if the input argument is un-mutable,函数中改变形参值不会改变原值。
if the input is mutable, operate on the input like append operation will change the input argument.

- a, b = b, a + b # 相当于：
#+begin_src python
t = (b, a + b) # t是一个tuple
a = t[0]
b = t[1]
#+end_src

** Operator
- The ^ symbol
  - The ^ symbol is for the bitwise ‘xor’ operation, but in Python, the exponent operator symbol is **.
- the minimum value between nan and infinity is infinity.
min(np.nan, np.inf) = np.inf

** pickle

*** dump:
#+BEGIN_SRC python
import pickle

data1 = {'a': [1, 2.0, 3, 4+6j],
         'b': ('string', u'Unicode string'),
         'c': None}

selfref_list = [1, 2, 3]
selfref_list.append(selfref_list)

output = open('data.pkl', 'wb')

# Pickle dictionary using protocol 0.
pickle.dump(data1, output)

# Pickle the list using the highest protocol available.
pickle.dump(selfref_list, output, -1)

output.close()
pickle.dump( x0, open( "x0.pkl", "wb" ) )
#+END_SRC

*** load:
#+BEGIN_SRC python
import pprint, pickle

pkl_file = open('data.pkl', 'rb')

data1 = pickle.load(pkl_file)
pprint.pprint(data1)

data2 = pickle.load(pkl_file)
pprint.pprint(data2)

pkl_file.close()
#+END_SRC
** list operations:

- find difference of two lists:
#+begin_src python
a = [1,2,3,2,1,5,6,5,5,5]
import collections
print [item for item, count in collections.Counter(a).items() if count > 1]
#+end_src

- 列表生成式
#+begin_src python
[a.lower() for a in x=['Hello', 'World', 18, 'Apple', None] if isinstance(a,str)]
#+end_src

- read file to a list:
#+begin_src python
with open(r'y:\codes\data\smart_beta_etf_list.txt', 'rb') as f:
etf_list = f.readlines()
etf_list = [x.strip() for x in etf_list]
# you may also want to remove whitespace characters like `\n` at the end of each line
#+end_src

- save a list to a file:
#+begin_src python
thefile = open('test.txt', 'w')
#+end_src

- for item in thelist:
#+begin_src python
thefile.write("%s\n" % item)
#+end_src

- replace comma as next line (enter):
choose extend mode: replace ',' as \r\n

- split strings by space delimiter from reverse:
#+begin_src python
text.rsplit(' ', 1)[0]
#+end_src

- split strings by space delimiter from beginning:
#+begin_src python
text.split(' ', 1)[0]
>>>a.split('.',1)
['alvy','test.txt']
后面多了一个参数1，以第一个'.'分界，分成两个字符串，组成一个list
>>>a.rsplit('.',1)
['alvy.test','txt']
现在是rsplit函数，从右边第一个'.'分界，分成两个字符串，组成一个list
#+end_src

** 生成器
通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。
而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。
要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值：
next(g)
这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。
而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。

#+begin_src python
def odd():
    print('step 1')

    yield 1
    print('step 2')
    yield(3)
    print('step 3')
    yield(5)
>>> o = odd()
>>> next(o)
step 1
1
>>> next(o)
step 2
3
>>> next(o)
step 3
5
>>> next(o)
Traceback (most recent call last):

  File "<stdin>", line 1, in <module>
StopIteration
#+end_src

*** loop
- iterate key and value in a dictionary:
#+begin_src python
for index, value in dict.iteritems():
print index, value
#+end_src
- iterate keys in a dictionary:
#+begin_src python
for k in dict:
#+end_src

- iterate a row in pandas dataframe:
#+begin_src python
DataFrame.iterrows():
return generator.
>>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])
>>> row = next(df.iterrows())[1]
>>> row
int      1.0
float    1.5
Name: 0, dtype: float64
>>> print(row['int'].dtype)
float64
>>> print(df['int'].dtype)
int64
#+end_src

- To preserve dtypes while iterating over the rows, it is better to use itertuples()
  - which returns tuples of the values and which is generally faster as iterrows.

** magic method:
- getitem in a class allows its instances to use the [ ] (indexer) operators
- setitem Called to implement assignment to self[key]
- call magic method in a class causes its instances to become callables – in other words, those instances now behave like functions.
- getattr overrides Python’s default mechanism for member access.
- getattr magic method only gets invoked for attributes that are not in the dict magic attribute. Implementing getattr causes the hasattr built-in function to always return True, unless an exception is raised from within getattr.
- setattr allows you to override Python’s default mechanism for member assignment.
- The repr function also converts an object to a string. It can also be invoked using the reverse quotes (`), also called accent grave, (underneath the tilde, ~, on most keyboards).
#+begin_src python :tangle yes
print `a`
print repr(a)
#+end_src

** logging
#+BEGIN_SRC python
import logging
logger = logging.getLogger()
handler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s %(name)-12s %(levelname)-8s %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)
logger

# at the end of the program
handler.close()
logger.removeHandler(handler)
#+END_SRC

** regular express

*** useage:
- find strings
- convert strings

*** string array
[Pp]ython: find Python or python

**** parts
re.search('[a-zA-Z0-9]', 'x')

**** not
re.search('[^0-9]', 'x')

**** shortcut

- word: \w
- number: \d
- space, tab, next line: \s
- 0 length sub string: \b
re.search('\bcorn\b', 'corner')

**** start and end with strings
#+BEGIN_SRC python 2
re.search('^Python', 'Python 3')
re.search('Python$', 'this is Python')
#+END_SRC

**** any character
"."

*** optional words
'color' vs 'colour'
re.search('colou?r', 'my favoriate color')

*** repeat
{N}

#+BEGIN_SRC python2
# find a telephone number
re.search(r'[\d]{3}-[\d]{4}', '867-5309 /Jenny')

#+END_SRC

**** boundary of repeated times
[\d]{3,4}

**** open selection
[\d]{3,}

**** speed selection
- +: {1,}
- *: {0,}
** collections — High-performance container datatypes

| module      | function                                                             |
|-------------+----------------------------------------------------------------------|
| deque       | list-like container with fast appends and pops on either end         |
| Counter     | dict subclass for counting hashable objects                          |
| defaultdict | dict subclass that calls a factory function to supply missing values |

** fetch data from yahoo
#+begin_src python
import pandas as pd
import datetime as dt
import numpy as np
import pandas.io.data as web

data = pd.DataFrame()
symbols = ['GLD', 'GDX']
for sym in symbols:
    data[sym] = web.DataReader(sym, data_source='yahoo', start='20100510')['Adj Close']
data = data.dropna()
#+end_src

** trouble shooting
- linux python FileNotFoundError: [Errno 2] No such file or directory:

try to use absolute path instead of relative path to read a file.

- HDF5
pip install tables

** Jupyter notebook

*** Using a virtualenv in an IPython notebook
1. Install the ipython kernel module into your virtualenv
#+BEGIN_SRC python
workon my-virtualenv-name  # activate your virtualenv, if you haven't already
pip install ipykernel
#+END_SRC

2. Now run the kernel "self-install" script:
#+BEGIN_SRC python
python -m ipykernel install --user --name=my-virtualenv-name
#+END_SRC

* Data Analysis:

** pandas:
[[file:./pandas.org][pandas]]
- generate a dataframe:
#+begin_src python
dates = pd.date_range('1/1/2000', periods=8)
df = pd.DataFrame(np.random.randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
#+end_src

- connection with mysql:
#+begin_src python
pandas.read_sql_query(sql, con=engine):
pandas.read_sql_table(table_name, con=engine):
pandas.read_sql(sql, con=engine)
sql = 'DROP TABLE IF EXISTS etf_daily_price;'
result = engine.execute(sql)
#+end_src

- find all the values of TRUE in a dataframe:
#+begin_src python
z=(a!=b)
pd.concat([a.ix[z[reduce(lambda x, y: x | z[y], z, False)].index],b.ix[z[reduce(lambda x, y: x | z[y], z, False)].index]],axis=1)
#+end_src

- if array a is a subset of another array b:
#+BEGIN_SRC python
set(B).issubset(set(A))
#+END_SRC
- remove negative value from a column:
#+begin_src python
filtered_1=b[‘TRADE_size’].apply(lambda x: 0 if x < 0 else x)
b[‘TRADE_size’].loc[ b[‘TRADE_size’]<0, ‘TRADE_size’] = 0
#+end_src

- drop a lable:
#+BEGIN_SRC python
DataFrame.drop(labels, axis=0, level=None, inplace=False, errors='raise')
#+END_SRC

- check if any value is NaN in DataFrame
#+BEGIN_SRC python
df.isnull().values.any()
df.isnull().any().any()
#+END_SRC

- maximum & minimum value of a dataframe:
#+BEGIN_SRC python
df.values.max()
df.values.min()
#+END_SRC

- rename column names:
#+begin_src python
df_bbg = df_bbg.rename(columns = lambda x: x[:4].replace(' ',''))
#+end_src

- remove characters after space:
#+begin_src python
df_bbg = df_bbg.rename(columns = lambda x: x.)
#+end_src

- pandas long format to pivot:
#+begin_src python
pivoted = df.pivot('name1','name2','name3')
#+end_src

- change the time or date or a datetime:
#+begin_src python
end = end.replace(hour=23, minute=59, second=59)
#+end_src

- 万德 wind python pandas
#+begin_src python
df = pd.Dataframe(data = w.wsd().Data[0], index=w.wsd().Times)
#+end_src

- check DatetimeIndex difference:
#+BEGIN_SRC python
# to check the frequency of the strategy, DAILY or MONTHLY
dt_diff = df_single_period_return.index.to_series().diff().mean()
if dt_diff < pd.Timedelta('3 days'):
#+END_SRC

- resample by month and keep the last valid row
#+BEGIN_SRC python
benchmark_weight.index.name = 'Date'
m = benchmark_weight.index.to_period('m')
benchmark_weight = benchmark_weight.reset_index().groupby(m).last().set_index('Date')
benchmark_weight.index.name = ''
#+END_SRC

*** multiplying
- the multiplying calculation is not about the sequence of the index or column.

pandas will calculate on a sorted index and column value.
#+BEGIN_SRC python
In [87]: a=pd.DataFrame({'dog':[1,2],'fox':[3,4]},index=['a','b'])

In [88]: a
Out[88]:
   dog  fox
a    1    3
b    2    4

In [89]: b=pd.DataFrame({'fox':[1,2],'dog':[3,4]},index=['b','a'])

In [94]: b
Out[94]:
   dog  fox
b    3    1
a    4    2

In [95]: a*b
Out[95]:
   dog  fox
a    4    6
b    6    4
#+END_SRC

- dot multiplying
dot multiplying will sort the value.
#+BEGIN_SRC python
In [99]: a.dot(b.T)
Out[99]:
    b   a
a   6  10
b  10  16

In [100]: b.T
Out[104]:
     b  a
dog  3  4
fox  1  2

In [105]: a
Out[105]:
   dog  fox
a    1    3
b    2    4
#+END_SRC
*** Index
**** Index manuplication
- set column as datetime index
#+begin_src python
df = df.set_index(pd.DatetimeIndex(df['Date']))
#+end_src

- concaterate:
#+begin_src python
pd.concat([df1, df2], axis=0).sort_index()
pd.concat([df1, df2], axis=1)
result = df1.join(df2, how='outer’)
#+end_src

- pandas are two dataframe identical
#+BEGIN_SRC python
pandas.DataFrame.equals()

#+END_SRC
- change index name:
#+begin_src python
df.index.names = ['Date']
#+end_src

- for loop in pandas dataframe:
#+begin_src python
for index, value in DataFrame:
#+end_src

- compare two time series:
#+begin_src python
s1[s1.isin(s2)]
ax = df1.plot()
df2.plot(ax=ax)
#+end_src

- datetime to string:
#+begin_src python
df.index.strftime("%Y-%m-%d %H:%M:%S")
#+end_src

- concaterate index
#+begin_src python
pd.concat([df1, df2], axis=1)
#+end_src
concate will take two dataframe to a new dataframe by index, preserving the columns.
A:
index variable value
B:
index variable value

pd.concat([A, B])
index variable value variable value
**** merge
merge will take two dataframe to a new dataframe by index, on the columns.
A:
index variable value
B:
index variable value

pd.merge(A, B, how='left', on=['index', 'variable'])
index variable value value
**** update
update dataframe1 with dataframe2

**** access hierarchical index.
  - A MultiIndex can be created from a list of arrays (using MultiIndex.from_arrays), an array of tuples (using MultiIndex.from_tuples), or a crossed set of iterables (using MultiIndex.from_product).
#+begin_src python
df.loc[‘date’,’col’], df[‘date’], df.ix[[‘date1’, ‘date2’]]
#+end_src

- slicing:
#+begin_src python
df.loc['start':'end',], df['start': 'end']
#+end_src

- slice with a ‘range’ of values, by providing a slice of tuples:
#+begin_src python
df.loc[('2006-11-02','USO.US'):('2006-11-06','USO.US')]
df.loc(axis=0)[:,['SPY.US']]
#+end_src

- select certain columns:
#+begin_src python
df.loc(axis=0)[:,['SPY.US']]['updatedTime']
#+end_src

- select date range using pd series.
#+begin_src python
date_not_inserted = whole_index[~whole_index.isin(date_in_database['date'])]
df_need_to_be_updated = whole_df_stack.ix[days_not_in_db]
#+end_src

**** remove pandas duplicated index
***** #1
#+begin_src python
grouped = sym.groupby(level=0)
sym = grouped.last()
#+end_src

***** #2
#+begin_src python
df2[~df2.index.duplicated()]
#+end_SRC

**** convert a dataframe to an array:
#+begin_src emacs-lisp :tangle yes
pd.dataframe.to_matrix()
#+end_src

**** panel:
- create from dictionary:
#+BEGIN_SRC python
datetime_index = pd.DatetimeIndex(assets_group['date'].unique())
panel_model = pd.Panel({date: pd.DataFrame(0, index=assets.loc[date,'variable'],
                                           columns=assets.loc[date,'variable']) for date in datetime_index})
#+END_SRC
pandas panel item axis should be datetime64, this should not be an array.
** numpy
- count nan:
#+begin_src python
np.count_nonzero(~np.isnan(df['series']))
#+end_src
- count number of negative value:
#+begin_src python
np.sum((df < 0).values.ravel())
#+end_src
** plot:
*** subplot with the same axis:
pandas plot.
using matplotlib:
- multiple subplots
#+begin_src python
import matplotlib.pyplot as plt
fig = plt.figure()
ax1 = fig.add_subplot(2, 2, 1)
ax2 = fig.add_subplot(2, 2, 2)
ax3 = fig.add_subplot(2, 2, 3)
fig, axes = plt.subplots(2,3)
fig, ax : tuple
#+end_src
*** subplot with different axis
#+BEGIN_SRC python
plt.subplot(2, 1, 1)
plt.boxplot(x1)
plt.plot(1, x1.ix[-1], 'r*', markersize=15.0)

plt.subplot(2, 1, 2)
x1.plot()
# or
fig, axes = plt.subplots(2, 1, figsize=(10, 14))
axes[0].boxplot(pe000001)
axes[0].plot(1, pe000001.ix[-1], 'r*', markersize=15.0)

pe000001.plot()
#+END_SRC

*** plot a secondary y scale
#+begin_src python
df.price.plot(legend=True)
(100-df.pct_long).plot(secondary_y=True, style='g', legend=True)
#+end_src
- highlight a certain value in the plot:
#+begin_src python
a['DGAZ.US'].hist(bins=50)
plt.axvline(a['DGAZ.US'][-1], color='b', linestyle='dashed', linewidth=2)
#+end_src

*** plot a 3d figure:
#+begin_src python :tangle yes
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

strike = np.linspace(50, 150, 5)
ttm = np.linspace(0.5, 2.5, 8)

strike, ttm = np.meshgrid(strike, ttm)
iv = (strike - 100) ** 2 / (100 * strike) / ttm
fig = plt.figure(figsize=(9,6))
ax = fig.gca(projection='3d')
surf = ax.plot_surface(strike, ttm, iv, rstride=2, cstride=2,
                       cmap=plt.cm.coolwarm, linewidth=0.5,
                       antialiased=True)
fig.colorbar(surf, shrink=0.5, aspect=5)
#+end_src
fig is the :class:matplotlib.figure.Figure object.

- ax can be either a single axis object or an array of axis
- objects if more than one subplot was created.

[http://docs.pythontab.com/interpy/args_kwargs/Usage_args/]

[http://python.usyiyi.cn/python_278/library/index.html]

[https://docs.python.org/2/reference/simple_stmts.html?highlight=assert]

** scipy
- combination k from n.
$$
{\displaystyle {\binom {n}{k}}={\frac {n(n-1)\dotsb (n-k+1)}{k(k-1)\dotsb 1}},} {\binom {n}{k}}={\frac {n(n-1)\dotsb (n-k+1)}{k(k-1)\dotsb 1}}$$

which can be written using factorials as$$ {\displaystyle \textstyle {\frac {n!}{k!(n-k)!}}} \textstyle {\frac {n!}{k!(n-k)!}} $$
#+BEGIN_SRC python
>>> from scipy.special import comb
>>> k = np.array([3, 4])
>>> n = np.array([10, 10])
>>> comb(n, k, exact=False)
array([ 120.,  210.])
>>> comb(10, 3, exact=True)
120L
>>> comb(10, 3, exact=True, repetition=True)
220L
#+END_SRC
[https://docs.scipy.org/doc/scipy/reference/generated/scipy.misc.comb.html]
