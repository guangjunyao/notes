#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: Python Interview Questions
#+DATE: <2018-07-09 Mon>
#+AUTHORS: weiwu
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ../../configOrg/level2.org
#+HTML: <div class="outline-2" id="meta">
| *Author* | {{{author}}} ({{{email}}})    |
| *Date*   | {{{time(%Y-%m-%d %H:%M:%S)}}} |
| *Title*  | {{{TITLE}}}                   |
#+HTML: </div>

http://www.10tiao.com/html/383/201801/2247486052/1.html

#+BEGIN_SRC txt
Yes
#+END_SRC

#+BEGIN_SRC txt
No
#+END_SRC

#+BEGIN_SRC txt

#+END_SRC

#+BEGIN_SRC bash

#+END_SRC

#+BEGIN_SRC python

#+END_SRC

* 1000道Python题库系列分享一（17道）

1.1  到Python官方网站下载并安装Python解释器环境。

1.2  到Anaconda官方网站下载并安装最新的Anaconda3开发环境。

1.3  Python程序的__name__的作用是什么？
#+BEGIN_SRC txt
每个Python程序都有一个__name__变量，用来表示程序的运行方式。当作为模块导入时，__name__变量的值等于程序文件名，当直接运行程序时其值为字符串’__main__’。
#+END_SRC
#+BEGIN_SRC python
#!/usr/bin/python
# Filename: using_name.py

if __name__ == '__main__':
	print 'This program is being run by itself'
else:
	print 'I am being imported from another module'

#+END_SRC

#+RESULTS:
: $ python using_name.py
: This program is being run by itself

#+RESULTS:
: $ python
: >>> import using_name
: I am being imported from another module

1.4  Python安装扩展库常用的工具是______pip____和conda，其中后者需要安装Python集成开发环境Anaconda3之后才可以使用，而前者是Python官方推荐和标配的。

1.5  Python程序文件扩展名主要有_____.py_____和___.pyw_______两种，其中后者常用于GUI程序。

1.6  Python源代码程序伪编译后的文件扩展名为___.pyc_______。

1.7  使用pip工具在线安装Excel文件操作扩展库openpyxl的完整命令是__________。
#+BEGIN_SRC bash
pip install openpyxl
#+END_SRC

1.8  使用pip工具在线升级科学计算扩展库numpy的完整命令是__________。
#+BEGIN_SRC bash
pip install numpy --update
#+END_SRC

1.9  使用pip工具把本机已安装的Python扩展库及版本信息输出到文本文件requirements.txt中的完整命令是__________。
#+BEGIN_SRC bash
pip freeze > requirements.txt
#+END_SRC

1.10  使用pip工具查看当前已安装的Python扩展库（不含版本号）的完整命令是__________。
#+BEGIN_SRC bash
pip list
#+END_SRC

1.11  判断对错：Python是一种跨平台、开源、免费的高级动态编程语言。
#+BEGIN_SRC txt
Yes
#+END_SRC

1.12  判断对错：Python 3.x完全兼容Python 2.x。
#+BEGIN_SRC txt
No
#+END_SRC

1.13  判断对错：在Windows平台上编写的Python程序无法在Unix平台运行。
#+BEGIN_SRC txt
No
#+END_SRC

1.14  判断对错：不可以在同一台计算机上安装多个Python版本。
#+BEGIN_SRC txt
No
#+END_SRC

1.15  判断对错：pip命令支持使用扩展名为whl的文件离线安装Python扩展库。
#+BEGIN_SRC txt
Yes
#+END_SRC

1.16  判断对错：下载whl文件进行离线安装扩展库时，因为whl文件的名字都比较长，可以改成短一些的名字再使用pip进行安装。
#+BEGIN_SRC txt
No
#+END_SRC

1.17  判断对错：用来安装Python扩展库的pip命令应该在命令提示符环境下运行，如果安装了多个版本的Python，最好切换至相应版本的Python安装目录下运行。
#+BEGIN_SRC txt
Yes
#+END_SRC

* 1000道Python题库系列分享二（48道）
*2.1  表达式int('11111', 2)的值为__________。*
#+BEGIN_SRC python
In [210]: int?
Init signature: int(self, /, *args, **kwargs)
Docstring:
int(x=0) -> integer
int(x, base=10) -> integer

Convert a number or string to an integer, or return 0 if no arguments
are given.  If x is a number, return x.__int__().  For floating point
numbers, this truncates towards zero.

If x is not a number or if base is given, then x must be a string,
bytes, or bytearray instance representing an integer literal in the
given base.  The literal can be preceded by '+' or '-' and be surrounded
by whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.
Base 0 means to interpret the base from the string as an integer literal.
>>> int('0b100', base=0)
4
Type:           type
#+END_SRC

#+BEGIN_SRC python
# binary 0b or 0B
print("For 1010, int is:", int('1010', 2))
print("For 0b1010, int is:", int('0b1010', 2))

# octal 0o or 0O
print("For 12, int is:", int('12', 8))
print("For 0o12, int is:", int('0o12', 8))

# hexadecimal
print("For A, int is:", int('A', 16))
print("For 0xA, int is:", int('0xA', 16))
#+END_SRC

#+BEGIN_SRC text
此题为：base=2, 1+2+4+8+16=31
#+END_SRC

2.2  表达式chr(ord('D')+2)的值为__________。
#+BEGIN_SRC text
In [253]: ord?
Signature: ord(c, /)
Docstring: Return the Unicode code point for a one-character string.
Type:      builtin_function_or_method

In [255]: chr?
Signature: chr(i, /)
Docstring: Return a Unicode string of one character with ordinal i; 0 <= i <= 0x10ffff.
Type:      builtin_function_or_method
#+END_SRC

*2.3  简单解释Python基于值的内存管理模式。*
#+BEGIN_SRC text
Python采用的是基于值得内存管理方式，在Python中可以为不同变量赋值为相同值，这个值在内存中只有一份，多个变量指向同一个内存地址；

Python具有自动内存管理功能，会自动跟踪内存中所有的值，对于没有任何变量指向的值，Python自动将其删除。
#+END_SRC

2.4  简单解释运算符/和//的区别。
#+BEGIN_SRC text
/普通真除法，//取整数。
#+END_SRC

2.5  运算符%__________（可以/不可以）对浮点数进行求余数操作。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.6  一个数字5__________（是/不是）合法的Python表达式。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.7  判断对错：在Python 3.x中，内置函数input()把用户的键盘输入一律作为字符串返回。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.8  在Python中关键字__________表示空类型。
#+BEGIN_SRC txt
None
#+END_SRC

2.9  列表、元组、字符串是Python的____有序______(有序、无序？)序列。

2.10  查看变量类型的Python内置函数是__________。
#+BEGIN_SRC txt
type
#+END_SRC

*2.11  查看对象内存地址的Python内置函数是__________。*
#+BEGIN_SRC python
id()
#+END_SRC

2.12  以3为实部4为虚部，Python复数的表达形式为__________或__________。
#+BEGIN_SRC python
3+4j, (3+4J)
#+END_SRC

2.13  Python运算符中用来计算整商的是_______//___。

2.14  Python运算符中用来计算集合并集的是_____|_____。

2.15  Python运算符中用来计算集合差集的是______-____。

2.16  Python运算符中用来计算集合交集的是_______&___。

2.17  使用运算符测试集合A是否为集合B的真子集的表达式可以写作___A<B_______。

2.18  ___del_______命令既可以删除列表中的一个元素，也可以删除整个列表或其他任意类型的Python对象。

2.19  表达式int('123', 16)的值为__________。

2.20  表达式int('123', 8)的值为__________。

2.21  表达式int('123')的值为_______123___。

2.22  表达式int('101',2)的值为_____101,2_____。

2.23  表达式abs(-3)的值为_______3___。

2.24  Python 3.x语句print(1, 2, 3, sep=':')的输出结果为__________。

2.25  Python 3.x语句print(1, 2, 3, sep=',')的输出结果为__________。

2.26  表达式int(4**0.5)的值为__2________。

2.27  表达式8 ** (1/3)的值为____2.0______。

2.28  Python内置函数____len()______可以返回列表、元组、字典、集合、字符串以及range对象中元素个数。

2.29  Python内置函数____max()______用来返回序列中的最大元素。

2.30  Python内置函数_______min()___用来返回序列中的最小元素。

2.31  Python内置函数______sum()____用来返回数值型序列中所有元素之和。

2.32  已知x = 3，那么执行语句x += 6之后，x的值为___9_______。

2.33  表达式13 / 4的值为______3.25____。

2.34  表达式13 // 4的值为____3______。

2.35  表达式-13 // 4的值为____-4______。

2.36  表达式3 ** 2的值为____9______。

2.37  表达式chr(ord('a')-32) 的值为__________。

2.38  表达式abs(3+4j) 的值为____5.0______。

2.39  表达式16 ** 0.5的值为__4________。

*2.40  表达式type({3})的值为__________。*
#+BEGIN_SRC txt
set
#+END_SRC

2.41  表达式type({3:3})的值为__________。
#+BEGIN_SRC txt
dict
#+END_SRC

2.42  表达式isinstance('Hello world', str)的值为__________。
#+BEGIN_SRC txt
True
#+END_SRC

2.43  表达式isinstance('abc', int)的值为__________。
#+BEGIN_SRC txt
False
#+END_SRC

2.44  表达式isinstance(4j, (int, float, complex))的值为__________。
#+BEGIN_SRC txt
True
#+END_SRC

2.45  表达式isinstance('4', (int, float, complex))的值为__________。
#+BEGIN_SRC txt
False
#+END_SRC

2.46  表达式type(3) in (int, float, complex)的值为__________。
#+BEGIN_SRC txt
True
#+END_SRC

2.47  表达式type('3') in (int, float, complex)的值为__________。
#+BEGIN_SRC txt
False
#+END_SRC

2.48  表达式type(3) == int的值为__________。
#+BEGIN_SRC txt
True
#+END_SRC

* 1000道Python题库系列分享三（30道）

2.49  判断对错：已知x = 3，那么赋值语句x = 'abcedfg'是无法正常执行的。
#+BEGIN_SRC txt
No
#+END_SRC

2.50  判断对错：Python变量使用前必须先声明，并且一旦声明就不能在当前作用域内改变其类型了。
#+BEGIN_SRC txt
No
#+END_SRC

*2.51  判断对错：Python不允许使用关键字作为变量名，但是允许使用内置函数名作为变量名，不过这会改变函数名的含义，所以不建议这样做。*
#+BEGIN_SRC txt
Yes
#+END_SRC

2.52  判断对错：在Python中可以使用if作为变量名。
#+BEGIN_SRC txt
No
#+END_SRC

*2.53  判断对错：在Python 3.x中可以使用中文作为变量名。*
#+BEGIN_SRC txt
Yes
#+END_SRC

2.54  判断对错：Python变量名必须以字母或下划线开头，并且区分字母大小写。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.55  判断对错：加法运算符可以用来连接字符串并生成新字符串。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.56  判断对错：x = 9999**9999这样的语句在Python中无法运行，因为数字太大了超出了整型变量的表示范围。
#+BEGIN_SRC txt
No
#+END_SRC

2.57  判断对错：3+4j不是合法的Python表达式。
#+BEGIN_SRC txt
No
#+END_SRC

2.58  判断对错：0o12f是合法的八进制数字。
#+BEGIN_SRC txt
No
#+END_SRC

2.59  判断对错：只有Python扩展库才需要导入以后才能使用其中的对象，Python标准库不需要导入即可使用其中的所有对象。
#+BEGIN_SRC txt
No
#+END_SRC

2.60  判断对错：在Python中0xad是合法的十六进制数字表示形式。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.61  判断对错：4j 是合法Python数字类型。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.62  判断对错：Python使用缩进来体现代码之间的逻辑关系，对缩进的要求非常严格。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.63  判断对错：Python代码的注释只有一种方式，那就是使用#符号。
#+BEGIN_SRC txt
No
#+END_SRC

2.64  判断对错：放在一对三引号之间的任何内容将被认为是注释。
#+BEGIN_SRC txt
No
#+END_SRC

2.65  判断对错：尽管可以使用import语句一次导入任意多个标准库或扩展库，但是仍建议每次只导入一个标准库或扩展库。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.66  判断对错：为了让代码更加紧凑，编写Python程序时应尽量避免加入空格和空行。
#+BEGIN_SRC txt
No
#+END_SRC

*2.67  判断对错：在Python 3.5中运算符+不仅可以实现数值的相加、字符串连接，还可以实现列表、元组的连接和集合的并集运算。*
#+BEGIN_SRC txt
No
#+END_SRC

2.68  判断对错：在Python中可以使用 for 作为变量名。
#+BEGIN_SRC txt
No
#+END_SRC

2.69  判断对错：在Python中可以使用 id 作为变量名，但是不建议这样做。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.70  判断对错：一个数字5也是合法的Python表达式。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.71  判断对错：执行语句from math import sin之后，可以直接使用sin()函数，例如 sin(3)。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.72  判断对错：一般来说，Python扩展库没有通用于所有版本Python的，安装时应选择与已安装Python的版本对应的扩展库。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.73  判断对错：Python变量名区分大小写，所以student和Student不是同一个变量。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.74  判断对错：在Python 3.x中reduce()是内置函数。
#+BEGIN_SRC txt
No
#+END_SRC

2.75  判断对错：如果只需要math模块中的sin()函数，建议使用from math import sin来导入，而不要使用import math导入整个模块。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.76  判断对错：表达式pow(3, 2) == 3 ** 2的值为True。
#+BEGIN_SRC txt
Yes
#+END_SRC

2.77  判断对错：已知x = 3，那么执行语句x+=6之后，x的内存地址不变。
#+BEGIN_SRC txt
No
#+END_SRC

2.78  判断对错：安装Python扩展库时只能使用pip工具在线安装，如果安装不成功就没有别的办法了。
#+BEGIN_SRC txt
No
#+END_SRC

* 1000道Python题库系列分享四（40道）
3.1  为什么应尽量从列表的尾部进行元素的增加与删除操作？
#+BEGIN_SRC txt
函数指针是增加的
#+END_SRC

3.2  Python 3.x的range()函数返回一个_____________。
#+BEGIN_SRC txt
iterator
#+END_SRC

3.3  编写程序，生成包含1000个0到100之间的随机整数，并统计每个元素的出现次数。
#+BEGIN_SRC python
import defaults
dictionary_stat = defaults.default_dict()

#+END_SRC

3.4  表达式
#+BEGIN_SRC python
[3] in [1, 2, 3, 4]
#+END_SRC
的值为___________。
#+BEGIN_SRC text
False
#+END_SRC

3.5  编写程序，用户输入一个列表和2个整数作为下标，然后使用切片获取并输出列表中介于2个下标之间的元素组成的子列表。例如用户输入[1, 2, 3, 4, 5, 6]和2,5，程序输出[3, 4, 5, 6]。
#+BEGIN_SRC txt
a = [1, 2, 3, 4, 5, 6]
begin = input()
end = input()
a[begin:end+1]
#+END_SRC

3.6  列表对象的sort()方法用来对列表元素进行原地排序，该函数返回值为________。
#+BEGIN_SRC txt
None
#+END_SRC

*3.7  列表对象的___________方法删除首次出现的指定元素，如果列表中不存在要删除的元素，则抛出异常。*
#+BEGIN_SRC txt
remove()
#+END_SRC

3.8  假设列表对象aList的值为[3, 4, 5, 6, 7, 9, 11, 13, 15, 17]，那么切片aList[3:7]得到的值是_____________________。
#+BEGIN_SRC txt
[6, 7, 9, 11]
#+END_SRC

3.9  设计一个字典，并编写程序，用户输入内容作为“键”，然后输出字典中对应的“值”，如果用户输入的“键”不存在，则输出“您输入的键不存在！”
#+BEGIN_SRC python
d={"a":1,"b":2}
key = input()
d.get(key,"key not existed")
#+END_SRC

3.10  编写程序，生成包含20个随机数的列表，然后将前10个元素升序排列，后10个元素降序排列，并输出结果。
#+BEGIN_SRC python
import numpy as np
a = np.random.randn(20)
print(sorted(a[:10]))
print(sorted(a[10:],reverse=True))
#+END_SRC

3.11  在Python中，字典和集合都是用一对____{}________作为界定符，字典的每个元素有两部分组成，即____key____和_____value_____，其中___key_____不允许重复。

3.12  使用字典对象的__items()________方法可以返回字典的“键-值对”，使用字典对象的_____keys()________方法可以返回字典的“键”，使用字典对象的___values()_______方法可以返回字典的“值”。

3.13  假设有列表a = ['name', 'age', 'sex']和b = ['Dong', 38, 'Male']，请使用一个语句将这两个列表的内容转换为字典，并且以列表a中的元素为“键”，
以列表b中的元素为“值”，这个语句可以写为_____________________。
#+BEGIN_SRC python
dict(zip(a,b))
#+END_SRC

3.14  假设有一个列表a，现要求从列表a中每3个元素取1个，并且将取到的元素组成新的列表b，可以使用语句________________。
#+BEGIN_SRC python
a = [3, 4, 5, 6, 7, 9, 11, 13, 15, 17]
b = a[::2]
#+END_SRC

3.15  使用列表推导式生成包含10个数字5的列表，语句可以写为__________________。
#+BEGIN_SRC python
[5 for _ in range(10)]
#+END_SRC

3.16  ___________（可以、不可以）使用del命令来删除元组中的部分元素。
#+BEGIN_SRC txt
No
#+END_SRC

3.17  表达式[1, 2, 3]*3的值为______________________。
#+BEGIN_SRC txt
[1,2,3,1,2,3,1,2,3]
#+END_SRC

3.18  表达式list(map(str, [1, 2, 3]))的值为__________。
#+BEGIN_SRC txt
['1','2','3']
#+END_SRC

3.19  语句x = 3==3, 5执行结束后，变量x的值为__________。
#+BEGIN_SRC txt
(True, 5)
#+END_SRC

3.20  已知x = 3，并且id(x)的返回值为496103280，那么执行语句x += 6之后，表达式id(x) == 496103280的值为__________。
#+BEGIN_SRC txt
False
#+END_SRC

3.21  已知x = 3，那么执行语句x *= 6之后，x的值为__________。
#+BEGIN_SRC txt
18
#+END_SRC

3.22  表达式3 in [1, 2, 3, 4]的值为__________。
#+BEGIN_SRC txt
True
#+END_SRC

3.23  使用列表与整数的乘法生成包含10个数字5的列表，可以写为__________。
#+BEGIN_SRC txt
[5] * 10
#+END_SRC

3.24  任意长度的非空列表、元组和字符串中最后一个元素的下标为__________。
#+BEGIN_SRC txt
-1
#+END_SRC

3.25  表达式list(range(1, 10, 3))的值为__________。
#+BEGIN_SRC txt
[1,4,7]
#+END_SRC

3.26  表达式list(range(10, 1, -3))的值为__________。
#+BEGIN_SRC txt
[10, 7, 4]
#+END_SRC

3.27  表达式list(range(5))的值为________________。
#+BEGIN_SRC txt
[0,1,2,3,4]
#+END_SRC

3.28  已知a = [1, 2, 3]和b = [1, 2, 4]，那么
#+BEGIN_SRC python
id(a[1])==id(b[1])
#+END_SRC
的执行结果为_True_________。

3.29  切片操作list(range(6))[::2]执行结果为__________。
#+BEGIN_SRC txt
[0, 2, 4]
#+END_SRC

3.30  使用切片操作在列表对象x的开始处增加一个元素3的代码为__________。
#+BEGIN_SRC python
x[0:0] = [3]
#+END_SRC

3.31  语句sorted([1, 2, 3], reverse=True) == reversed([1, 2, 3])执行结果为__________。
#+BEGIN_SRC txt
False
#+END_SRC

3.32  表达式sorted([111, 2, 33], key=lambda x: len(str(x)))的值为________________。
#+BEGIN_SRC txt
[2, 33, 111]
#+END_SRC

3.33  表达式sorted([111, 2, 33], key=lambda x: -len(str(x)))的值为__________。
#+BEGIN_SRC txt
[111, 33, 2]
#+END_SRC

3.34  表达式max([111, 22, 3], key=str)的值为__________。
#+BEGIN_SRC txt
3
#+END_SRC

3.35  语句x = (3,)执行后x的值为__________。
#+BEGIN_SRC txt
(3,)
#+END_SRC

3.36  语句x = (3)执行后x的值为__________。
#+BEGIN_SRC txt
3
#+END_SRC

3.37  已知x=3和y=5，执行语句 x, y = y, x 后x的值是__________。
#+BEGIN_SRC txt
5
#+END_SRC

3.38  可以使用内置函数__________查看包含当前作用域内所有全局变量和值的字典。
#+BEGIN_SRC txt
globals()
#+END_SRC

3.39  可以使用内置函数__________查看包含当前作用域内所有局部变量和值的字典。
#+BEGIN_SRC txt
locals()
#+END_SRC

3.40  字典中多个元素之间使用___,_______分隔开，每个元素的“键”与“值”之间使用______:____分隔开。
#+BEGIN_SRC txt

#+END_SRC

* 1000道Python题库系列分享五（40道）
3.43 x = ?
#+BEGIN_SRC python
x = {1:2}
x[2] = 3
#+END_SRC

#+RESULTS:
: {1:2, 2:3}

3.44
#+BEGIN_SRC python
{1,2,3,4} - {3,4,5,6}
#+END_SRC
#+RESULTS:
: {1,2}

3.46
#+BEGIN_SRC python
[x for x in range(100) if x%13 == 0]
#+END_SRC

3.47
#+BEGIN_SRC python
x = [1,2,3,4]
#+END_SRC

#+RESULTS:
: x[10:] = []

3.48
#+BEGIN_SRC python
x[len(x):]=[1,2]
#+END_SRC

#+RESULTS:
: In [291]: x
: Out[291]: [1, 2, 3, 4, 1, 2]

3.49
#+BEGIN_SRC python
x = [1, 2, 3, 4, 1, 2]
x.sort(reverse=True)
In [314]: x
Out[314]: [4, 3, 2, 2, 1, 1]
#+END_SRC

3.50
#+BEGIN_SRC python
x = [1, 2, 3, 4, 1, 2]
x = x.sort(reverse=True)
In [314]: x
Out[314]:
#+END_SRC

3.51
#+BEGIN_SRC python
x = [1, 11, 111]
x.sort(key=lambda x:len(str(x)), reverse=True)
In [314]: x
Out[314]: [111, 11, 1]
#+END_SRC

3.55
#+BEGIN_SRC python
In [348]: list(map(list, zip(*[[1,2,3],[4,5,6]])))
Out[349]: [[1, 4], [2, 5], [3, 6]]
#+END_SRC

3.60
#+BEGIN_SRC python
In [350]: list(enumerate([1,2]))
Out[354]: [(0, 1), (1, 2)]
#+END_SRC

3.67
#+BEGIN_SRC python
In [385]: x = [1,2,3,4,2]

In [389]: x.remove(2)

In [390]: x
Out[390]: [1, 3, 4, 2]
In [392]: x.remove?
Docstring:
L.remove(value) -> None -- remove first occurrence of value.
Raises ValueError if the value is not present.
Type:      builtin_function_or_method
#+END_SRC

3.71
#+BEGIN_SRC python
In [411]: range(10,20)[4]
Out[416]: 14
#+END_SRC

3.74
#+BEGIN_SRC python
In [420]: x=(3)

In [425]: x
Out[425]: 3
#+END_SRC

3.75
#+BEGIN_SRC python
In [442]: x=(3,)

In [443]: x
Out[443]: (3,)

In [444]: type(x)
Out[445]: tuple

In [446]: x*3
Out[450]: (3, 3, 3)
#+END_SRC

3.80
#+BEGIN_SRC python
In [456]: x=[1,2]*2

In [457]: x.insert(1,4)

In [463]: x
Out[463]: [1, 4, 2, 1, 2]

In [464]: x.insert?
Docstring: L.insert(index, object) -- insert object before index
Type:      builtin_function_or_method
#+END_SRC

* 1000道Python题库系列分享六（40道）
3.82
#+BEGIN_SRC python
In [465]: x=[[1]]*3

In [469]: x
Out[470]: [[1], [1], [1]]

#+END_SRC

3.84
#+BEGIN_SRC python
In [482]: y=x[:]

In [484]: id(x)
Out[485]: 140324141711560

In [486]: id(y)
Out[490]: 140324142182536

In [491]: x==y
Out[492]: True

In [497]: id(x)==id(y)
Out[497]: False
#+END_SRC

3.85
#+BEGIN_SRC python
In [512]: sorted([13,1,237,89,100],key=lambda x:len(str(x)))
Out[532]: [1, 13, 89, 237, 100]
#+END_SRC

3.90
#+BEGIN_SRC python
In [540]: {1,2,3} < {3,4,5}
Out[540]: False

In [541]: {1,2,3} < {1,2,4}
Out[541]: False

#+END_SRC

3.94
#+BEGIN_SRC python
In [552]: random.randrange?
Signature: random.randrange(start, stop=None, step=1, _int=<class 'int'>)
Docstring:
Choose a random item from range(start, stop[, step]).

This fixes the problem with randint() which includes the
endpoint; in Python this is usually not what you want.
File:      ~/.virtualenvs/graph/lib/python3.6/random.py
Type:      method
#+END_SRC

3.95
#+BEGIN_SRC python
In [557]: random.sample?
Signature: random.sample(population, k)
Docstring:
Chooses k unique random elements from a population sequence or set.
#+END_SRC

3.104
#+BEGIN_SRC python
In [592]: x=[1,2]

In [594]: y=x

In [597]: y.append(3)

In [610]: x
Out[611]: [1, 2, 3]
#+END_SRC

3.114
#+BEGIN_SRC python
x = [1,2]
x.append([3])
In [631]: x
Out[631]: [1, 2, [3]]
#+END_SRC

3.111
#+BEGIN_SRC python
x = [[1,2,3],[4,5,6]]
[[row[i] for row in x] for i in range(len(x[0]))]
# 先从最右边起，i in range(3), 循环3次， row在x里面取两次，取[x[[0][0],x[[1],[0]]...
#+END_SRC

* 1000道Python题库系列分享七（30道）

3.121
#+BEGIN_SRC python
In [666]: [1,2,3] == [1,3,2]
Out[672]: False
#+END_SRC
