#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t c:nil
#+OPTIONS: creator:nil d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t
#+OPTIONS: num:t p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t timestamp:t
#+OPTIONS: title:t toc:t todo:t |:t
#+TITLES: Python
#+DATE: <2017-04-22 Sat>
#+EMAIL: victor.wuv@gmail.com
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 24.5.1 (Org mode 8.3.4)
#+SETUPFILE: ~/website/leolle.github.io/configOrg/level2.org

* Python basic operations:

- 当你运行一个Python模块 python fibo.py <arguments>

- 模块中的代码将会被执行，就像导入它一样，不过此时name 被设置为 “main“。这意味着，通过在你的模块末尾添加此代码.
- can’t import module from upper directory.

    - need to add the working directory to .bashrc PYTHONPATH
    - using ipython.
import os

    - print os.path.abspath(ylib.__file__)

- make a python 3 virtual environment:
mkvirtual -p python3 ENVNAME
- get specific timezone datetime
#+begin_src python
tz = pytz.timezone('America/Los_Angeles')
#date = date.today()
now = datetime.now()
los_angeles_time = datetime.now(tz)
#+end_src

- use tqdm as a status bar:
#+begin_src python
from tqdm import tqdm
from time import sleep
for i in tqdm(range(10)):
    sleep(0.1)
#+end_src

- find difference of two lists:
#+begin_src python
a = [1,2,3,2,1,5,6,5,5,5]
import collections
print [item for item, count in collections.Counter(a).items() if count > 1]
#+end_src

- 列表生成式
#+begin_src python
[a.lower() for a in x=['Hello', 'World', 18, 'Apple', None] if isinstance(a,str)]
#+end_src

- function parameter
pass the parameters boo(a=1,b=2) won’t change the value of the parameters themselves.
the sequence of the parameters are certain, you can’t change it.
函数中改变形参值不会改变原值。
- a, b = b, a + b # 相当于：
#+begin_src python
t = (b, a + b) # t是一个tuple
a = t[0]
b = t[1]
#+end_src

- The ^ symbol is for the bitwise ‘xor’ operation:
but in Python, the exponent operator symbol is **.

- 生成器
通过列表生成式，我们可以直接创建一个列表。但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。
要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：
如果要一个一个打印出来，可以通过next()函数获得generator的下一个返回值：
next(g)
这里，最难理解的就是generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句返回，再次执行时从上次返回的yield语句处继续执行。

#+begin_src python
def odd():
    print('step 1')

    yield 1
    print('step 2')
    yield(3)
    print('step 3')
    yield(5)
>>> o = odd()
>>> next(o)
step 1
1
>>> next(o)
step 2
3
>>> next(o)
step 3
5
>>> next(o)
Traceback (most recent call last):

  File "<stdin>", line 1, in <module>
StopIteration
#+end_src


- read file to a list:
#+begin_src python
with open(r'y:\codes\data\smart_beta_etf_list.txt', 'rb') as f:
#+end_src


-   etf_list = f.readlines()
# you may also want to remove whitespace characters like `\n` at the end of each line
etf_list = [x.strip() for x in etf_list]

- save a list to a file:
thefile = open('test.txt', 'w')

- for item in thelist:
thefile.write("%s\n" % item)

- replace comma as next line (enter):
choose extend mode: replace ',' as \r\n

- string to datetime:
time.strptime(string[, format])
- iterate key and value in a dictionary:
for k, v in dict.iteritems():
- iterate keys in a dictionary:
for k in dict:
- iterate a row in pandas dataframe:
#+begin_src python
DataFrame.iterrows():
return generator.
>>> df = pd.DataFrame([[1, 1.5]], columns=['int', 'float'])
>>> row = next(df.iterrows())[1]
>>> row
int      1.0
float    1.5
Name: 0, dtype: float64
>>> print(row['int'].dtype)
float64
>>> print(df['int'].dtype)
int64
#+end_src

To preserve dtypes while iterating over the rows, it is better to use itertuples() which returns tuples of the values and which is generally faster as iterrows.

- install setup.py:
python setup.py install
- magic method:
getitem in a class allows its instances to use the [ ] (indexer) operators
- setitem Called to implement assignment to self[key]

- call magic method in a class causes its instances to become callables – in other words, those instances now behave like functions.
- getattr overrides Python’s default mechanism for member access.
- getattr magic method only gets invoked for attributes that are not in the dict magic attribute. Implementing getattr causes the hasattr built-in function to always return True, unless an exception is raised from within getattr.
- setattr allows you to override Python’s default mechanism for member assignment.
- split strings by space delimiter from reverse:

#+begin_src python
text.rsplit(' ', 1)[0]
#+end_src

- split strings by space delimiter from beginning:
#+begin_src python
text.split(' ', 1)[0]
>>>a.split('.',1)
['alvy','test.txt']
后面多了一个参数1，以第一个'.'分界，分成两个字符串，组成一个list
>>>a.rsplit('.',1)
['alvy.test','txt']
现在是rsplit函数，从右边第一个'.'分界，分成两个字符串，组成一个list
#+end_src

- unittest:
check data operation:
create, select, update, delete.

    - checking parameter types, classes, or values.
    - checking data structure invariants.
    - checking “can’t happen” situations (duplicates in a list, contradictory state variables.)
    - after calling a function, to make sure that its return is reasonable.

* Data Analysis:

** pandas:

- generate a dataframe:
dates = pd.date_range('1/1/2000', periods=8)
df = pd.DataFrame(np.random.randn(8, 4), index=dates, columns=['A', 'B', 'C', 'D'])
- connection with mysql:
pandas.read_sql_query(sql, con=engine):

- pandas.read_sql_table(table_name, con=engine):
- pandas.read_sql(sql, con=engine)

- sql = 'DROP TABLE IF EXISTS etf_daily_price;'
result = engine.execute(sql)
- find all the values of TRUE in a dataframe:
z=(a!=b)
pd.concat([a.ix[z[reduce(lambda x, y: x | z[y], z, False)].index],b.ix[z[reduce(lambda x, y: x | z[y], z, False)].index]],axis=1)
- remove negative value from a column:
1). filtered_1=b[‘TRADE_size’].apply(lambda x: 0 if x < 0 else x)
2). b[‘TRADE_size’].loc[ b[‘TRADE_size’]<0, ‘TRADE_size’] = 0
percentage output format:
from future import division
- print “%s %.4f%%” % (sid, (len(not_close)/len(ctp)))
- rename column names:
df_bbg = df_bbg.rename(columns = lambda x: x[:4].replace(' ',''))

- remove characters after space:
df_bbg = df_bbg.rename(columns = lambda x: x.)
- pandas long format to pivot:
pivoted = df.pivot('name1','name2','name3')

access hierarchical index.

A MultiIndex can be created from a list of arrays (using MultiIndex.from_arrays), an array of tuples (using MultiIndex.from_tuples), or a crossed set of iterables (using MultiIndex.from_product).
#+begin_src python
df.loc[‘date’,’col’], df[‘date’], df.ix[[‘date1’, ‘date2’]]
#+end_src
- slicing:
#+begin_src python
df.loc['start':'end',], df['start': 'end']
#+end_src

- slice with a ‘range’ of values, by providing a slice of tuples:
df.loc[('2006-11-02','USO.US'):('2006-11-06','USO.US')]

    - df.loc(axis=0)[:,['SPY.US']]
    - select certain columns:
df.loc(axis=0)[:,['SPY.US']]['updatedTime']

        - select date range using pd series.
date_not_inserted = whole_index[~whole_index.isin(date_in_database['date'])]
df_need_to_be_updated = whole_df_stack.ix[days_not_in_db]

- remove pandas duplicated index
#+begin_src python

#+end_src

1). grouped = sym.groupby(level=0)
    - sym = grouped.last()

    - 2).df2[~df2.index.duplicated()]
    - set column as datetime index
#+begin_src python

#+end_src

df = df.set_index(pd.DatetimeIndex(df['Date']))
    - change index name:
#+begin_src python

#+end_src

df.index.names = ['Date']
    - for loop in pandas dataframe:
#+begin_src python

#+end_src

for index, value in DataFrame:
    - compare two time series:
#+begin_src python

#+end_src

s1[s1.isin(s2)]
ax = df1.plot()
df2.plot(ax=ax)

- datetime to string:
#+begin_src python

#+end_src

df.index.strftime("%Y-%m-%d %H:%M:%S")
- concaterate index
#+begin_src python

#+end_src

pd.concat([df1, df2], axis=1)
- change the time or date or a datetime:
end = end.replace(hour=23, minute=59, second=59)

- 万德 wind python pandas
#+begin_src python
df = pd.Dataframe(data = w.wsd().Data[0], index=w.wsd().Times)
#+end_src
- concaterate:
pd.concat([df1, df2], axis=0).sort_index()
pd.concat([df1, df2], axis=1)
result = df1.join(df2, how='outer’)

- python解释器CPython.

- 如果字符串里面有’\’,而实际上要把斜杠加到字符串里面，要在前面加r，代表raw. 例如r’Y:\codes’.
- count nan:
np.count_nonzero(~np.isnan(df['series']))

- 如果主目录下有子目录packages，记得要在子目录下加init.py，最好在主目录下建main.py函数。

- 解释器如果执行哪个一个文件为主程序，如 python program1.py，it will set the special variable name to program1.py equals to ‘main’
- One of the reasons for doing this is that sometimes you write a module (a .py file) where it can be executed directly. Alternatively, it can also be imported and used in another module. By doing the main check, you can have that code only execute when you want to run the module as a program and not have it execute when someone just wants to import your module and call your functions themselves.

** plot:

pandas plot.

using matplotlib:
- import matplotlib.pyplot as plt
#+begin_src python
fig = plt.figure()
ax1 = fig.add_subplot(2, 2, 1)
ax2 = fig.add_subplot(2, 2, 2)
ax3 = fig.add_subplot(2, 2, 3)
fig, axes = plt.subplots(2,3)
fig, ax : tuple
#+end_src

- highlight a certain value in the plot:
#+begin_src python
a['DGAZ.US'].hist(bins=50)
plt.axvline(a['DGAZ.US'][-1], color='b', linestyle='dashed', linewidth=2)
#+end_src

fig is the :class:matplotlib.figure.Figure object.

- ax can be either a single axis object or an array of axis
- objects if more than one subplot was created.

[http://docs.pythontab.com/interpy/args_kwargs/Usage_args/]

[http://python.usyiyi.cn/python_278/library/index.html]

[https://docs.python.org/2/reference/simple_stmts.html?highlight=assert]
